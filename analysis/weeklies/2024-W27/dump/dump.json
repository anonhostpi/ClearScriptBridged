{
  "3": {
    "metadata": {
      "scriptId": "3",
      "url": "node:internal/per_context/primordials",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 748,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "9d302e02cad3701963ad08c6808447eec06832579ad75795e14c5bc8f21fc803",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 22794,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/primordials"
    },
    "source": "'use strict';\r\n\r\n/* eslint-disable node-core/prefer-primordials */\r\n\r\n// This file subclasses and stores the JS builtins that come from the VM\r\n// so that Node.js's builtin modules do not need to later look these up from\r\n// the global proxy, which can be mutated by users.\r\n\r\n// Use of primordials have sometimes a dramatic impact on performance, please\r\n// benchmark all changes made in performance-sensitive areas of the codebase.\r\n// See: https://github.com/nodejs/node/pull/38248\r\n\r\nconst {\r\n  defineProperty: ReflectDefineProperty,\r\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\r\n  ownKeys: ReflectOwnKeys,\r\n} = Reflect;\r\n\r\n// `uncurryThis` is equivalent to `func => Function.prototype.call.bind(func)`.\r\n// It is using `bind.bind(call)` to avoid using `Function.prototype.bind`\r\n// and `Function.prototype.call` after it may have been mutated by users.\r\nconst { apply, bind, call } = Function.prototype;\r\nconst uncurryThis = bind.bind(call);\r\nprimordials.uncurryThis = uncurryThis;\r\n\r\n// `applyBind` is equivalent to `func => Function.prototype.apply.bind(func)`.\r\n// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\r\n// and `Function.prototype.apply` after it may have been mutated by users.\r\nconst applyBind = bind.bind(apply);\r\nprimordials.applyBind = applyBind;\r\n\r\n// Methods that accept a variable number of arguments, and thus it's useful to\r\n// also create `${prefix}${key}Apply`, which uses `Function.prototype.apply`,\r\n// instead of `Function.prototype.call`, and thus doesn't require iterator\r\n// destructuring.\r\nconst varargsMethods = [\r\n  // 'ArrayPrototypeConcat' is omitted, because it performs the spread\r\n  // on its own for arrays and array-likes with a truthy\r\n  // @@isConcatSpreadable symbol property.\r\n  'ArrayOf',\r\n  'ArrayPrototypePush',\r\n  'ArrayPrototypeUnshift',\r\n  // 'FunctionPrototypeCall' is omitted, since there's 'ReflectApply'\r\n  // and 'FunctionPrototypeApply'.\r\n  'MathHypot',\r\n  'MathMax',\r\n  'MathMin',\r\n  'StringFromCharCode',\r\n  'StringFromCodePoint',\r\n  'StringPrototypeConcat',\r\n  'TypedArrayOf',\r\n];\r\n\r\nfunction getNewKey(key) {\r\n  return typeof key === 'symbol' ?\r\n    `Symbol${key.description[7].toUpperCase()}${key.description.slice(8)}` :\r\n    `${key[0].toUpperCase()}${key.slice(1)}`;\r\n}\r\n\r\nfunction copyAccessor(dest, prefix, key, { enumerable, get, set }) {\r\n  ReflectDefineProperty(dest, `${prefix}Get${key}`, {\r\n    __proto__: null,\r\n    value: uncurryThis(get),\r\n    enumerable,\r\n  });\r\n  if (set !== undefined) {\r\n    ReflectDefineProperty(dest, `${prefix}Set${key}`, {\r\n      __proto__: null,\r\n      value: uncurryThis(set),\r\n      enumerable,\r\n    });\r\n  }\r\n}\r\n\r\nfunction copyPropsRenamed(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          // `src` is bound as the `this` so that the static `this` points\r\n          // to the object it was defined on,\r\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\r\n          value: applyBind(desc.value, src),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction copyPropsRenamedBound(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const { value } = desc;\r\n      if (typeof value === 'function') {\r\n        desc.value = value.bind(src);\r\n      }\r\n\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          value: applyBind(value, src),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction copyPrototype(src, dest, prefix) {\r\n  for (const key of ReflectOwnKeys(src)) {\r\n    const newKey = getNewKey(key);\r\n    const desc = ReflectGetOwnPropertyDescriptor(src, key);\r\n    if ('get' in desc) {\r\n      copyAccessor(dest, prefix, newKey, desc);\r\n    } else {\r\n      const { value } = desc;\r\n      if (typeof value === 'function') {\r\n        desc.value = uncurryThis(value);\r\n      }\r\n\r\n      const name = `${prefix}${newKey}`;\r\n      ReflectDefineProperty(dest, name, { __proto__: null, ...desc });\r\n      if (varargsMethods.includes(name)) {\r\n        ReflectDefineProperty(dest, `${name}Apply`, {\r\n          __proto__: null,\r\n          value: applyBind(value),\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Create copies of configurable value properties of the global object\r\n[\r\n  'Proxy',\r\n  'globalThis',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  primordials[name] = globalThis[name];\r\n});\r\n\r\n// Create copies of URI handling functions\r\n[\r\n  decodeURI,\r\n  decodeURIComponent,\r\n  encodeURI,\r\n  encodeURIComponent,\r\n].forEach((fn) => {\r\n  primordials[fn.name] = fn;\r\n});\r\n\r\n// Create copies of legacy functions\r\n[\r\n  escape,\r\n  eval,\r\n  unescape,\r\n].forEach((fn) => {\r\n  primordials[fn.name] = fn;\r\n});\r\n\r\n// Create copies of the namespace objects\r\n[\r\n  'Atomics',\r\n  'JSON',\r\n  'Math',\r\n  'Proxy',\r\n  'Reflect',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  copyPropsRenamed(globalThis[name], primordials, name);\r\n});\r\n\r\n// Create copies of intrinsic objects\r\n[\r\n  'AggregateError',\r\n  'Array',\r\n  'ArrayBuffer',\r\n  'BigInt',\r\n  'BigInt64Array',\r\n  'BigUint64Array',\r\n  'Boolean',\r\n  'DataView',\r\n  'Date',\r\n  'Error',\r\n  'EvalError',\r\n  'FinalizationRegistry',\r\n  'Float32Array',\r\n  'Float64Array',\r\n  'Function',\r\n  'Int16Array',\r\n  'Int32Array',\r\n  'Int8Array',\r\n  'Map',\r\n  'Number',\r\n  'Object',\r\n  'RangeError',\r\n  'ReferenceError',\r\n  'RegExp',\r\n  'Set',\r\n  'String',\r\n  'Symbol',\r\n  'SyntaxError',\r\n  'TypeError',\r\n  'URIError',\r\n  'Uint16Array',\r\n  'Uint32Array',\r\n  'Uint8Array',\r\n  'Uint8ClampedArray',\r\n  'WeakMap',\r\n  'WeakRef',\r\n  'WeakSet',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  const original = globalThis[name];\r\n  primordials[name] = original;\r\n  copyPropsRenamed(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\n// Define Symbol.dispose and Symbol.asyncDispose\r\n// Until these are defined by the environment.\r\n// TODO(MoLow): Remove this polyfill once Symbol.dispose and Symbol.asyncDispose are available in V8.\r\nprimordials.SymbolDispose ??= primordials.SymbolFor('nodejs.dispose');\r\nprimordials.SymbolAsyncDispose ??= primordials.SymbolFor('nodejs.asyncDispose');\r\n\r\n// Create copies of intrinsic objects that require a valid `this` to call\r\n// static methods.\r\n// Refs: https://www.ecma-international.org/ecma-262/#sec-promise.all\r\n[\r\n  'Promise',\r\n].forEach((name) => {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  const original = globalThis[name];\r\n  primordials[name] = original;\r\n  copyPropsRenamedBound(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\n// Create copies of abstract intrinsic objects that are not directly exposed\r\n// on the global object.\r\n// Refs: https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object\r\n[\r\n  { name: 'TypedArray', original: Reflect.getPrototypeOf(Uint8Array) },\r\n  { name: 'ArrayIterator', original: {\r\n    prototype: Reflect.getPrototypeOf(Array.prototype[Symbol.iterator]()),\r\n  } },\r\n  { name: 'StringIterator', original: {\r\n    prototype: Reflect.getPrototypeOf(String.prototype[Symbol.iterator]()),\r\n  } },\r\n].forEach(({ name, original }) => {\r\n  primordials[name] = original;\r\n  // The static %TypedArray% methods require a valid `this`, but can't be bound,\r\n  // as they need a subclass constructor as the receiver:\r\n  copyPrototype(original, primordials, name);\r\n  copyPrototype(original.prototype, primordials, `${name}Prototype`);\r\n});\r\n\r\nprimordials.IteratorPrototype = Reflect.getPrototypeOf(primordials.ArrayIteratorPrototype);\r\n\r\n/* eslint-enable node-core/prefer-primordials */\r\n\r\nconst {\r\n  Array: ArrayConstructor,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  FinalizationRegistry,\r\n  FunctionPrototypeCall,\r\n  Map,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromisePrototypeThen,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectGet,\r\n  ReflectSet,\r\n  RegExp,\r\n  RegExpPrototype,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeGetDotAll,\r\n  RegExpPrototypeGetFlags,\r\n  RegExpPrototypeGetGlobal,\r\n  RegExpPrototypeGetHasIndices,\r\n  RegExpPrototypeGetIgnoreCase,\r\n  RegExpPrototypeGetMultiline,\r\n  RegExpPrototypeGetSource,\r\n  RegExpPrototypeGetSticky,\r\n  RegExpPrototypeGetUnicode,\r\n  Set,\r\n  SymbolIterator,\r\n  SymbolMatch,\r\n  SymbolMatchAll,\r\n  SymbolReplace,\r\n  SymbolSearch,\r\n  SymbolSpecies,\r\n  SymbolSplit,\r\n  WeakMap,\r\n  WeakRef,\r\n  WeakSet,\r\n} = primordials;\r\n\r\n\r\n/**\r\n * Creates a class that can be safely iterated over.\r\n *\r\n * Because these functions are used by `makeSafe`, which is exposed on the\r\n * `primordials` object, it's important to use const references to the\r\n * primordials that they use.\r\n * @template {Iterable} T\r\n * @template {*} TReturn\r\n * @template {*} TNext\r\n * @param {(self: T) => IterableIterator<T>} factory\r\n * @param {(...args: [] | [TNext]) => IteratorResult<T, TReturn>} next\r\n * @returns {Iterator<T, TReturn, TNext>}\r\n */\r\nconst createSafeIterator = (factory, next) => {\r\n  class SafeIterator {\r\n    constructor(iterable) {\r\n      this._iterator = factory(iterable);\r\n    }\r\n    next() {\r\n      return next(this._iterator);\r\n    }\r\n    [SymbolIterator]() {\r\n      return this;\r\n    }\r\n  }\r\n  ObjectSetPrototypeOf(SafeIterator.prototype, null);\r\n  ObjectFreeze(SafeIterator.prototype);\r\n  ObjectFreeze(SafeIterator);\r\n  return SafeIterator;\r\n};\r\n\r\nprimordials.SafeArrayIterator = createSafeIterator(\r\n  primordials.ArrayPrototypeSymbolIterator,\r\n  primordials.ArrayIteratorPrototypeNext,\r\n);\r\nprimordials.SafeStringIterator = createSafeIterator(\r\n  primordials.StringPrototypeSymbolIterator,\r\n  primordials.StringIteratorPrototypeNext,\r\n);\r\n\r\nconst copyProps = (src, dest) => {\r\n  ArrayPrototypeForEach(ReflectOwnKeys(src), (key) => {\r\n    if (!ReflectGetOwnPropertyDescriptor(dest, key)) {\r\n      ReflectDefineProperty(\r\n        dest,\r\n        key,\r\n        { __proto__: null, ...ReflectGetOwnPropertyDescriptor(src, key) });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * @type {typeof primordials.makeSafe}\r\n */\r\nconst makeSafe = (unsafe, safe) => {\r\n  if (SymbolIterator in unsafe.prototype) {\r\n    const dummy = new unsafe();\r\n    let next; // We can reuse the same `next` method.\r\n\r\n    ArrayPrototypeForEach(ReflectOwnKeys(unsafe.prototype), (key) => {\r\n      if (!ReflectGetOwnPropertyDescriptor(safe.prototype, key)) {\r\n        const desc = ReflectGetOwnPropertyDescriptor(unsafe.prototype, key);\r\n        if (\r\n          typeof desc.value === 'function' &&\r\n          desc.value.length === 0 &&\r\n          SymbolIterator in (FunctionPrototypeCall(desc.value, dummy) ?? {})\r\n        ) {\r\n          const createIterator = uncurryThis(desc.value);\r\n          next ??= uncurryThis(createIterator(dummy).next);\r\n          const SafeIterator = createSafeIterator(createIterator, next);\r\n          desc.value = function() {\r\n            return new SafeIterator(this);\r\n          };\r\n        }\r\n        ReflectDefineProperty(safe.prototype, key, { __proto__: null, ...desc });\r\n      }\r\n    });\r\n  } else {\r\n    copyProps(unsafe.prototype, safe.prototype);\r\n  }\r\n  copyProps(unsafe, safe);\r\n\r\n  ObjectSetPrototypeOf(safe.prototype, null);\r\n  ObjectFreeze(safe.prototype);\r\n  ObjectFreeze(safe);\r\n  return safe;\r\n};\r\nprimordials.makeSafe = makeSafe;\r\n\r\n// Subclass the constructors because we need to use their prototype\r\n// methods later.\r\n// Defining the `constructor` is necessary here to avoid the default\r\n// constructor which uses the user-mutable `%ArrayIteratorPrototype%.next`.\r\nprimordials.SafeMap = makeSafe(\r\n  Map,\r\n  class SafeMap extends Map {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\nprimordials.SafeWeakMap = makeSafe(\r\n  WeakMap,\r\n  class SafeWeakMap extends WeakMap {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\n\r\nprimordials.SafeSet = makeSafe(\r\n  Set,\r\n  class SafeSet extends Set {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\nprimordials.SafeWeakSet = makeSafe(\r\n  WeakSet,\r\n  class SafeWeakSet extends WeakSet {\r\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\r\n  },\r\n);\r\n\r\nprimordials.SafeFinalizationRegistry = makeSafe(\r\n  FinalizationRegistry,\r\n  class SafeFinalizationRegistry extends FinalizationRegistry {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(cleanupCallback) { super(cleanupCallback); }\r\n  },\r\n);\r\nprimordials.SafeWeakRef = makeSafe(\r\n  WeakRef,\r\n  class SafeWeakRef extends WeakRef {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(target) { super(target); }\r\n  },\r\n);\r\n\r\nconst SafePromise = makeSafe(\r\n  Promise,\r\n  class SafePromise extends Promise {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(executor) { super(executor); }\r\n  },\r\n);\r\n\r\n/**\r\n * Attaches a callback that is invoked when the Promise is settled (fulfilled or\r\n * rejected). The resolved value cannot be modified from the callback.\r\n * Prefer using async functions when possible.\r\n * @param {Promise<any>} thisPromise\r\n * @param {() => void) | undefined | null} onFinally The callback to execute\r\n *        when the Promise is settled (fulfilled or rejected).\r\n * @returns {Promise} A Promise for the completion of the callback.\r\n */\r\nprimordials.SafePromisePrototypeFinally = (thisPromise, onFinally) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    new SafePromise((a, b) => PromisePrototypeThen(thisPromise, a, b))\r\n      .finally(onFinally)\r\n      .then(a, b),\r\n  );\r\n\r\nprimordials.AsyncIteratorPrototype =\r\n  primordials.ReflectGetPrototypeOf(\r\n    primordials.ReflectGetPrototypeOf(\r\n      async function* () {}).prototype);\r\n\r\nconst arrayToSafePromiseIterable = (promises, mapFn) =>\r\n  new primordials.SafeArrayIterator(\r\n    ArrayPrototypeMap(\r\n      promises,\r\n      (promise, i) =>\r\n        new SafePromise((a, b) => PromisePrototypeThen(mapFn == null ? promise : mapFn(promise, i), a, b)),\r\n    ),\r\n  );\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>[]>}\r\n */\r\nprimordials.SafePromiseAll = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.all(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * Should only be used for internal functions, this would produce similar\r\n * results as `Promise.all` but without prototype pollution, and the return\r\n * value is not a genuine Array but an array-like object.\r\n * @template T,U\r\n * @param {ArrayLike<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<ArrayLike<Awaited<U>>>}\r\n */\r\nprimordials.SafePromiseAllReturnArrayLike = (promises, mapFn) =>\r\n  new Promise((resolve, reject) => {\r\n    const { length } = promises;\r\n\r\n    const returnVal = ArrayConstructor(length);\r\n    ObjectSetPrototypeOf(returnVal, null);\r\n    if (length === 0) resolve(returnVal);\r\n\r\n    let pendingPromises = length;\r\n    for (let i = 0; i < length; i++) {\r\n      const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n      PromisePrototypeThen(PromiseResolve(promise), (result) => {\r\n        returnVal[i] = result;\r\n        if (--pendingPromises === 0) resolve(returnVal);\r\n      }, reject);\r\n    }\r\n  });\r\n\r\n/**\r\n * Should only be used when we only care about waiting for all the promises to\r\n * resolve, not what value they resolve to.\r\n * @template T,U\r\n * @param {ArrayLike<T | PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<void>}\r\n */\r\nprimordials.SafePromiseAllReturnVoid = (promises, mapFn) =>\r\n  new Promise((resolve, reject) => {\r\n    let pendingPromises = promises.length;\r\n    if (pendingPromises === 0) resolve();\r\n    const onFulfilled = () => {\r\n      if (--pendingPromises === 0) {\r\n        resolve();\r\n      }\r\n    };\r\n    for (let i = 0; i < promises.length; i++) {\r\n      const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n      PromisePrototypeThen(PromiseResolve(promise), onFulfilled, reject);\r\n    }\r\n  });\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<PromiseSettledResult<any>[]>}\r\n */\r\nprimordials.SafePromiseAllSettled = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.allSettled(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * Should only be used when we only care about waiting for all the promises to\r\n * settle, not what value they resolve or reject to.\r\n * @template T,U\r\n * @param {ArrayLike<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<void>}\r\n */\r\nprimordials.SafePromiseAllSettledReturnVoid = (promises, mapFn) => new Promise((resolve) => {\r\n  let pendingPromises = promises.length;\r\n  if (pendingPromises === 0) resolve();\r\n  const onSettle = () => {\r\n    if (--pendingPromises === 0) resolve();\r\n  };\r\n  for (let i = 0; i < promises.length; i++) {\r\n    const promise = mapFn != null ? mapFn(promises[i], i) : promises[i];\r\n    PromisePrototypeThen(PromiseResolve(promise), onSettle, onSettle);\r\n  }\r\n});\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>>}\r\n */\r\nprimordials.SafePromiseAny = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.any(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n/**\r\n * @template T,U\r\n * @param {Array<T|PromiseLike<T>>} promises\r\n * @param {(v: T|PromiseLike<T>, k: number) => U|PromiseLike<U>} [mapFn]\r\n * @returns {Promise<Awaited<U>>}\r\n */\r\nprimordials.SafePromiseRace = (promises, mapFn) =>\r\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\r\n  // prototype to user-land.\r\n  new Promise((a, b) =>\r\n    SafePromise.race(arrayToSafePromiseIterable(promises, mapFn)).then(a, b),\r\n  );\r\n\r\n\r\nconst {\r\n  exec: OriginalRegExpPrototypeExec,\r\n  [SymbolMatch]: OriginalRegExpPrototypeSymbolMatch,\r\n  [SymbolMatchAll]: OriginalRegExpPrototypeSymbolMatchAll,\r\n  [SymbolReplace]: OriginalRegExpPrototypeSymbolReplace,\r\n  [SymbolSearch]: OriginalRegExpPrototypeSymbolSearch,\r\n  [SymbolSplit]: OriginalRegExpPrototypeSymbolSplit,\r\n} = RegExpPrototype;\r\n\r\nclass RegExpLikeForStringSplitting {\r\n  #regex;\r\n  constructor() {\r\n    this.#regex = ReflectConstruct(RegExp, arguments);\r\n  }\r\n\r\n  get lastIndex() {\r\n    return ReflectGet(this.#regex, 'lastIndex');\r\n  }\r\n  set lastIndex(value) {\r\n    ReflectSet(this.#regex, 'lastIndex', value);\r\n  }\r\n\r\n  exec() {\r\n    return ReflectApply(OriginalRegExpPrototypeExec, this.#regex, arguments);\r\n  }\r\n}\r\nObjectSetPrototypeOf(RegExpLikeForStringSplitting.prototype, null);\r\n\r\n/**\r\n * @param {RegExp} pattern\r\n * @returns {RegExp}\r\n */\r\nprimordials.hardenRegExp = function hardenRegExp(pattern) {\r\n  ObjectDefineProperties(pattern, {\r\n    [SymbolMatch]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolMatch,\r\n    },\r\n    [SymbolMatchAll]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolMatchAll,\r\n    },\r\n    [SymbolReplace]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolReplace,\r\n    },\r\n    [SymbolSearch]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolSearch,\r\n    },\r\n    [SymbolSplit]: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeSymbolSplit,\r\n    },\r\n    constructor: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: {\r\n        [SymbolSpecies]: RegExpLikeForStringSplitting,\r\n      },\r\n    },\r\n    dotAll: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetDotAll(pattern),\r\n    },\r\n    exec: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: OriginalRegExpPrototypeExec,\r\n    },\r\n    global: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetGlobal(pattern),\r\n    },\r\n    hasIndices: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetHasIndices(pattern),\r\n    },\r\n    ignoreCase: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetIgnoreCase(pattern),\r\n    },\r\n    multiline: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetMultiline(pattern),\r\n    },\r\n    source: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetSource(pattern),\r\n    },\r\n    sticky: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetSticky(pattern),\r\n    },\r\n    unicode: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      value: RegExpPrototypeGetUnicode(pattern),\r\n    },\r\n  });\r\n  ObjectDefineProperty(pattern, 'flags', {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: RegExpPrototypeGetFlags(pattern),\r\n  });\r\n  return pattern;\r\n};\r\n\r\n\r\n/**\r\n * @param {string} str\r\n * @param {RegExp} regexp\r\n * @returns {number}\r\n */\r\nprimordials.SafeStringPrototypeSearch = (str, regexp) => {\r\n  regexp.lastIndex = 0;\r\n  const match = RegExpPrototypeExec(regexp, str);\r\n  return match ? match.index : -1;\r\n};\r\n\r\nObjectSetPrototypeOf(primordials, null);\r\nObjectFreeze(primordials);\r\n"
  },
  "4": {
    "metadata": {
      "scriptId": "4",
      "url": "node:internal/per_context/domexception",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 153,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "43ce514c107fd4251093b31c959426ec177810f76cf1964d403dbed864dcd2e8",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4636,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/domexception"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototype,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  SymbolToStringTag,\r\n  TypeError,\r\n} = primordials;\r\n\r\nfunction throwInvalidThisError(Base, type) {\r\n  const err = new Base();\r\n  const key = 'ERR_INVALID_THIS';\r\n  ObjectDefineProperties(err, {\r\n    message: {\r\n      __proto__: null,\r\n      value: `Value of \"this\" must be of ${type}`,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    },\r\n    toString: {\r\n      __proto__: null,\r\n      value() {\r\n        return `${this.name} [${key}]: ${this.message}`;\r\n      },\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    },\r\n  });\r\n  err.code = key;\r\n  throw err;\r\n}\r\n\r\nconst internalsMap = new SafeWeakMap();\r\nconst nameToCodeMap = new SafeMap();\r\n\r\n// These were removed from the error names table.\r\n// See https://github.com/heycam/webidl/pull/946.\r\nconst disusedNamesSet = new SafeSet()\r\n  .add('DOMStringSizeError')\r\n  .add('NoDataAllowedError')\r\n  .add('ValidationError');\r\n\r\nclass DOMException {\r\n  constructor(message = '', options = 'Error') {\r\n    ErrorCaptureStackTrace(this);\r\n\r\n    if (options && typeof options === 'object') {\r\n      const { name } = options;\r\n      internalsMap.set(this, {\r\n        message: `${message}`,\r\n        name: `${name}`,\r\n      });\r\n\r\n      if ('cause' in options) {\r\n        ObjectDefineProperty(this, 'cause', {\r\n          __proto__: null,\r\n          value: options.cause,\r\n          configurable: true,\r\n          writable: true,\r\n          enumerable: false,\r\n        });\r\n      }\r\n    } else {\r\n      internalsMap.set(this, {\r\n        message: `${message}`,\r\n        name: `${options}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  get name() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n    return internals.name;\r\n  }\r\n\r\n  get message() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n    return internals.message;\r\n  }\r\n\r\n  get code() {\r\n    const internals = internalsMap.get(this);\r\n    if (internals === undefined) {\r\n      throwInvalidThisError(TypeError, 'DOMException');\r\n    }\r\n\r\n    if (disusedNamesSet.has(internals.name)) {\r\n      return 0;\r\n    }\r\n\r\n    const code = nameToCodeMap.get(internals.name);\r\n    return code === undefined ? 0 : code;\r\n  }\r\n}\r\n\r\nObjectSetPrototypeOf(DOMException.prototype, ErrorPrototype);\r\nObjectDefineProperties(DOMException.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'DOMException' },\r\n  name: { __proto__: null, enumerable: true, configurable: true },\r\n  message: { __proto__: null, enumerable: true, configurable: true },\r\n  code: { __proto__: null, enumerable: true, configurable: true },\r\n});\r\n\r\nfor (const { 0: name, 1: codeName, 2: value } of [\r\n  ['IndexSizeError', 'INDEX_SIZE_ERR', 1],\r\n  ['DOMStringSizeError', 'DOMSTRING_SIZE_ERR', 2],\r\n  ['HierarchyRequestError', 'HIERARCHY_REQUEST_ERR', 3],\r\n  ['WrongDocumentError', 'WRONG_DOCUMENT_ERR', 4],\r\n  ['InvalidCharacterError', 'INVALID_CHARACTER_ERR', 5],\r\n  ['NoDataAllowedError', 'NO_DATA_ALLOWED_ERR', 6],\r\n  ['NoModificationAllowedError', 'NO_MODIFICATION_ALLOWED_ERR', 7],\r\n  ['NotFoundError', 'NOT_FOUND_ERR', 8],\r\n  ['NotSupportedError', 'NOT_SUPPORTED_ERR', 9],\r\n  ['InUseAttributeError', 'INUSE_ATTRIBUTE_ERR', 10],\r\n  ['InvalidStateError', 'INVALID_STATE_ERR', 11],\r\n  ['SyntaxError', 'SYNTAX_ERR', 12],\r\n  ['InvalidModificationError', 'INVALID_MODIFICATION_ERR', 13],\r\n  ['NamespaceError', 'NAMESPACE_ERR', 14],\r\n  ['InvalidAccessError', 'INVALID_ACCESS_ERR', 15],\r\n  ['ValidationError', 'VALIDATION_ERR', 16],\r\n  ['TypeMismatchError', 'TYPE_MISMATCH_ERR', 17],\r\n  ['SecurityError', 'SECURITY_ERR', 18],\r\n  ['NetworkError', 'NETWORK_ERR', 19],\r\n  ['AbortError', 'ABORT_ERR', 20],\r\n  ['URLMismatchError', 'URL_MISMATCH_ERR', 21],\r\n  ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR', 22],\r\n  ['TimeoutError', 'TIMEOUT_ERR', 23],\r\n  ['InvalidNodeTypeError', 'INVALID_NODE_TYPE_ERR', 24],\r\n  ['DataCloneError', 'DATA_CLONE_ERR', 25],\r\n  // There are some more error names, but since they don't have codes assigned,\r\n  // we don't need to care about them.\r\n]) {\r\n  const desc = { enumerable: true, value };\r\n  ObjectDefineProperty(DOMException, codeName, desc);\r\n  ObjectDefineProperty(DOMException.prototype, codeName, desc);\r\n  nameToCodeMap.set(name, value);\r\n}\r\n\r\nexports.DOMException = DOMException;\r\n"
  },
  "5": {
    "metadata": {
      "scriptId": "5",
      "url": "node:internal/per_context/messageport",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 39,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "54d7f5614437826db833ed826cd0438fac4be40d230175286d08ce51e18f61c4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1034,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/per_context/messageport"
    },
    "source": "'use strict';\r\nconst {\r\n  SymbolFor,\r\n} = primordials;\r\n\r\nclass MessageEvent {\r\n  constructor(data, target, type, ports) {\r\n    this.data = data;\r\n    this.target = target;\r\n    this.type = type;\r\n    this.ports = ports ?? [];\r\n  }\r\n}\r\n\r\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\r\nconst kCurrentlyReceivingPorts =\r\n  SymbolFor('nodejs.internal.kCurrentlyReceivingPorts');\r\n\r\nexports.emitMessage = function(data, ports, type) {\r\n  if (typeof this[kHybridDispatch] === 'function') {\r\n    this[kCurrentlyReceivingPorts] = ports;\r\n    try {\r\n      this[kHybridDispatch](data, type, undefined);\r\n    } finally {\r\n      this[kCurrentlyReceivingPorts] = undefined;\r\n    }\r\n    return;\r\n  }\r\n\r\n  const event = new MessageEvent(data, this, type, ports);\r\n  if (type === 'message') {\r\n    if (typeof this.onmessage === 'function')\r\n      this.onmessage(event);\r\n  } else {\r\n    // eslint-disable-next-line no-lonely-if\r\n    if (typeof this.onmessageerror === 'function')\r\n      this.onmessageerror(event);\r\n  }\r\n};\r\n"
  },
  "6": {
    "metadata": {
      "scriptId": "6",
      "url": "node:internal/bootstrap/realm",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 475,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "64cc2970e2b3dca04428986f72a63ba3099c9b18e5ba8f7248753e1f61857d21",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 15757,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/realm"
    },
    "source": "// This file is executed in every realm that is created by Node.js, including\r\n// the context of main thread, worker threads, and ShadowRealms.\r\n// Only per-realm internal states and bindings should be bootstrapped in this\r\n// file and no globals should be exposed to the user code.\r\n//\r\n// This file creates the internal module & binding loaders used by built-in\r\n// modules. In contrast, user land modules are loaded using\r\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\r\n// lib/internal/modules/esm/* (ES Modules).\r\n//\r\n// This file is compiled and run by node.cc before bootstrap/node.js\r\n// was called, therefore the loaders are bootstrapped before we start to\r\n// actually bootstrap Node.js. It creates the following objects:\r\n//\r\n// C++ binding loaders:\r\n// - process.binding(): the legacy C++ binding loader, accessible from user land\r\n//   because it is an object attached to the global process object.\r\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\r\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\r\n//   about the stability of these bindings, but still have to take care of\r\n//   compatibility issues caused by them from time to time.\r\n// - process._linkedBinding(): intended to be used by embedders to add\r\n//   additional C++ bindings in their applications. These C++ bindings\r\n//   can be created using NODE_BINDING_CONTEXT_AWARE_CPP() with the flag\r\n//   NM_F_LINKED.\r\n// - internalBinding(): the private internal C++ binding loader, inaccessible\r\n//   from user land unless through `require('internal/test/binding')`.\r\n//   These C++ bindings are created using NODE_BINDING_CONTEXT_AWARE_INTERNAL()\r\n//   and have their nm_flags set to NM_F_INTERNAL.\r\n//\r\n// Internal JavaScript module loader:\r\n// - BuiltinModule: a minimal module system used to load the JavaScript core\r\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\r\n//   compiled into the node binary via node_javascript.cc generated by js2c.py,\r\n//   so they can be loaded faster without the cost of I/O. This class makes the\r\n//   lib/internal/*, deps/internal/* modules and internalBinding() available by\r\n//   default to core modules, and lets the core modules require itself via\r\n//   require('internal/bootstrap/realm') even when this file is not written in\r\n//   CommonJS style.\r\n//\r\n// Other objects:\r\n// - process.moduleLoadList: an array recording the bindings and the modules\r\n//   loaded in the process and the order in which they are loaded.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by node::RunBootstrapping()\r\n/* global process, getLinkedBinding, getInternalBinding, primordials */\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  Error,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  ReflectGet,\r\n  SafeMap,\r\n  SafeSet,\r\n  String,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  TypeError,\r\n} = primordials;\r\n\r\n// Set up process.moduleLoadList.\r\nconst moduleLoadList = [];\r\nObjectDefineProperty(process, 'moduleLoadList', {\r\n  __proto__: null,\r\n  value: moduleLoadList,\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: false,\r\n});\r\n\r\n\r\n// processBindingAllowList contains the name of bindings that are allowed\r\n// for access via process.binding(). This is used to provide a transition\r\n// path for modules that are being moved over to internalBinding.\r\n// Certain bindings may not actually correspond to an internalBinding any\r\n// more, we just implement them as legacy wrappers instead. See the\r\n// legacyWrapperList.\r\nconst processBindingAllowList = new SafeSet([\r\n  'buffer',\r\n  'cares_wrap',\r\n  'config',\r\n  'constants',\r\n  'contextify',\r\n  'fs',\r\n  'fs_event_wrap',\r\n  'icu',\r\n  'inspector',\r\n  'js_stream',\r\n  'os',\r\n  'pipe_wrap',\r\n  'process_wrap',\r\n  'spawn_sync',\r\n  'stream_wrap',\r\n  'tcp_wrap',\r\n  'tls_wrap',\r\n  'tty_wrap',\r\n  'udp_wrap',\r\n  'uv',\r\n  'zlib',\r\n]);\r\n\r\nconst runtimeDeprecatedList = new SafeSet([\r\n  'async_wrap',\r\n  'crypto',\r\n  'http_parser',\r\n  'signal_wrap',\r\n  'url',\r\n  'v8',\r\n]);\r\n\r\nconst legacyWrapperList = new SafeSet([\r\n  'natives',\r\n  'util',\r\n]);\r\n\r\n// The code bellow assumes that the two lists must not contain any modules\r\n// beginning with \"internal/\".\r\n// Modules that can only be imported via the node: scheme.\r\nconst schemelessBlockList = new SafeSet([\r\n  'sea',\r\n  'test',\r\n  'test/reporters',\r\n]);\r\n// Modules that will only be enabled at run time.\r\nconst experimentalModuleList = new SafeSet();\r\n\r\n// Set up process.binding() and process._linkedBinding().\r\n{\r\n  const bindingObj = { __proto__: null };\r\n\r\n  process.binding = function binding(module) {\r\n    module = String(module);\r\n    const mod = bindingObj[module];\r\n    if (typeof mod === 'object') {\r\n      return mod;\r\n    }\r\n    // Deprecated specific process.binding() modules, but not all, allow\r\n    // selective fallback to internalBinding for the deprecated ones.\r\n    if (runtimeDeprecatedList.has(module)) {\r\n      process.emitWarning(\r\n        `Access to process.binding('${module}') is deprecated.`,\r\n        'DeprecationWarning',\r\n        'DEP0111');\r\n      return internalBinding(module);\r\n    }\r\n    if (legacyWrapperList.has(module)) {\r\n      return requireBuiltin('internal/legacy/processbinding')[module]();\r\n    }\r\n    if (processBindingAllowList.has(module)) {\r\n      return internalBinding(module);\r\n    }\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    throw new Error(`No such module: ${module}`);\r\n  };\r\n\r\n  process._linkedBinding = function _linkedBinding(module) {\r\n    module = String(module);\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object')\r\n      mod = bindingObj[module] = getLinkedBinding(module);\r\n    return mod;\r\n  };\r\n}\r\n\r\n/**\r\n * Set up internalBinding() in the closure.\r\n * @type {import('typings/globals').internalBinding}\r\n */\r\nlet internalBinding;\r\n{\r\n  const bindingObj = { __proto__: null };\r\n  // eslint-disable-next-line no-global-assign\r\n  internalBinding = function internalBinding(module) {\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object') {\r\n      mod = bindingObj[module] = getInternalBinding(module);\r\n      ArrayPrototypePush(moduleLoadList, `Internal Binding ${module}`);\r\n    }\r\n    return mod;\r\n  };\r\n}\r\n\r\nconst selfId = 'internal/bootstrap/realm';\r\nconst {\r\n  builtinIds,\r\n  compileFunction,\r\n  setInternalLoaders,\r\n} = internalBinding('builtins');\r\n\r\nconst { ModuleWrap } = internalBinding('module_wrap');\r\nObjectSetPrototypeOf(ModuleWrap.prototype, null);\r\n\r\nconst getOwn = (target, property, receiver) => {\r\n  return ObjectPrototypeHasOwnProperty(target, property) ?\r\n    ReflectGet(target, property, receiver) :\r\n    undefined;\r\n};\r\n\r\nconst publicBuiltinIds = builtinIds\r\n  .filter((id) =>\r\n    !StringPrototypeStartsWith(id, 'internal/') &&\r\n      !experimentalModuleList.has(id),\r\n  );\r\n// Do not expose the loaders to user land even with --expose-internals.\r\nconst internalBuiltinIds = builtinIds\r\n  .filter((id) => StringPrototypeStartsWith(id, 'internal/') && id !== selfId);\r\n\r\n// When --expose-internals is on we'll add the internal builtin ids to these.\r\nlet canBeRequiredByUsersList = new SafeSet(publicBuiltinIds);\r\nlet canBeRequiredByUsersWithoutSchemeList =\r\n  new SafeSet(publicBuiltinIds.filter((id) => !schemelessBlockList.has(id)));\r\n\r\n/**\r\n * An internal abstraction for the built-in JavaScript modules of Node.js.\r\n * Be careful not to expose this to user land unless --expose-internals is\r\n * used, in which case there is no compatibility guarantee about this class.\r\n */\r\nclass BuiltinModule {\r\n  /**\r\n   * A map from the module IDs to the module instances.\r\n   * @type {Map<string, BuiltinModule>}\r\n   */\r\n  static map = new SafeMap(\r\n    ArrayPrototypeMap(builtinIds, (id) => [id, new BuiltinModule(id)]),\r\n  );\r\n\r\n  constructor(id) {\r\n    this.filename = `${id}.js`;\r\n    this.id = id;\r\n\r\n    // The CJS exports object of the module.\r\n    this.exports = {};\r\n    // States used to work around circular dependencies.\r\n    this.loaded = false;\r\n    this.loading = false;\r\n\r\n    // The following properties are used by the ESM implementation and only\r\n    // initialized when the built-in module is loaded by users.\r\n    /**\r\n     * The C++ ModuleWrap binding used to interface with the ESM implementation.\r\n     * @type {ModuleWrap|undefined}\r\n     */\r\n    this.module = undefined;\r\n    /**\r\n     * Exported names for the ESM imports.\r\n     * @type {string[]|undefined}\r\n     */\r\n    this.exportKeys = undefined;\r\n  }\r\n\r\n  static allowRequireByUsers(id) {\r\n    if (id === selfId) {\r\n      // No code because this is an assertion against bugs.\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Should not allow ${id}`);\r\n    }\r\n    canBeRequiredByUsersList.add(id);\r\n    if (!schemelessBlockList.has(id)) {\r\n      canBeRequiredByUsersWithoutSchemeList.add(id);\r\n    }\r\n  }\r\n\r\n  static setRealmAllowRequireByUsers(ids) {\r\n    canBeRequiredByUsersList =\r\n      new SafeSet(ArrayPrototypeFilter(ids, (id) => ArrayPrototypeIncludes(publicBuiltinIds, id)));\r\n    canBeRequiredByUsersWithoutSchemeList =\r\n      new SafeSet(ArrayPrototypeFilter(ids, (id) => !schemelessBlockList.has(id)));\r\n  }\r\n\r\n  // To be called during pre-execution when --expose-internals is on.\r\n  // Enables the user-land module loader to access internal modules.\r\n  static exposeInternals() {\r\n    for (let i = 0; i < internalBuiltinIds.length; ++i) {\r\n      BuiltinModule.allowRequireByUsers(internalBuiltinIds[i]);\r\n    }\r\n  }\r\n\r\n  static exists(id) {\r\n    return BuiltinModule.map.has(id);\r\n  }\r\n\r\n  static canBeRequiredByUsers(id) {\r\n    return canBeRequiredByUsersList.has(id);\r\n  }\r\n\r\n  static canBeRequiredWithoutScheme(id) {\r\n    return canBeRequiredByUsersWithoutSchemeList.has(id);\r\n  }\r\n\r\n  static normalizeRequirableId(id) {\r\n    if (StringPrototypeStartsWith(id, 'node:')) {\r\n      const normalizedId = StringPrototypeSlice(id, 5);\r\n      if (BuiltinModule.canBeRequiredByUsers(normalizedId)) {\r\n        return normalizedId;\r\n      }\r\n    } else if (BuiltinModule.canBeRequiredWithoutScheme(id)) {\r\n      return id;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  static isBuiltin(id) {\r\n    return BuiltinModule.canBeRequiredWithoutScheme(id) || (\r\n      typeof id === 'string' &&\r\n        StringPrototypeStartsWith(id, 'node:') &&\r\n        BuiltinModule.canBeRequiredByUsers(StringPrototypeSlice(id, 5))\r\n    );\r\n  }\r\n\r\n  static getCanBeRequiredByUsersWithoutSchemeList() {\r\n    return ArrayFrom(canBeRequiredByUsersWithoutSchemeList);\r\n  }\r\n\r\n  static getSchemeOnlyModuleNames() {\r\n    return ArrayFrom(schemelessBlockList);\r\n  }\r\n\r\n  // Used by user-land module loaders to compile and load builtins.\r\n  compileForPublicLoader() {\r\n    if (!BuiltinModule.canBeRequiredByUsers(this.id)) {\r\n      // No code because this is an assertion against bugs\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Should not compile ${this.id} for public use`);\r\n    }\r\n    this.compileForInternalLoader();\r\n    if (!this.exportKeys) {\r\n      // When using --expose-internals, we do not want to reflect the named\r\n      // exports from core modules as this can trigger unnecessary getters.\r\n      const internal = StringPrototypeStartsWith(this.id, 'internal/');\r\n      this.exportKeys = internal ? [] : ObjectKeys(this.exports);\r\n    }\r\n    return this.exports;\r\n  }\r\n\r\n  getESMFacade() {\r\n    if (this.module) return this.module;\r\n    const url = `node:${this.id}`;\r\n    const builtin = this;\r\n    const exportsKeys = ArrayPrototypeSlice(this.exportKeys);\r\n    if (!ArrayPrototypeIncludes(exportsKeys, 'default')) {\r\n      ArrayPrototypePush(exportsKeys, 'default');\r\n    }\r\n    this.module = new ModuleWrap(\r\n      url, undefined, exportsKeys,\r\n      function() {\r\n        builtin.syncExports();\r\n        this.setExport('default', builtin.exports);\r\n      });\r\n    // Ensure immediate sync execution to capture exports now\r\n    this.module.instantiate();\r\n    this.module.evaluate(-1, false);\r\n    return this.module;\r\n  }\r\n\r\n  // Provide named exports for all builtin libraries so that the libraries\r\n  // may be imported in a nicer way for ESM users. The default export is left\r\n  // as the entire namespace (module.exports) and updates when this function is\r\n  // called so that APMs and other behavior are supported.\r\n  syncExports() {\r\n    const names = this.exportKeys;\r\n    if (this.module) {\r\n      for (let i = 0; i < names.length; i++) {\r\n        const exportName = names[i];\r\n        if (exportName === 'default') continue;\r\n        this.module.setExport(exportName,\r\n                              getOwn(this.exports, exportName, this.exports));\r\n      }\r\n    }\r\n  }\r\n\r\n  compileForInternalLoader() {\r\n    if (this.loaded || this.loading) {\r\n      return this.exports;\r\n    }\r\n\r\n    const id = this.id;\r\n    this.loading = true;\r\n\r\n    try {\r\n      const requireFn = StringPrototypeStartsWith(this.id, 'internal/deps/') ?\r\n        requireWithFallbackInDeps : requireBuiltin;\r\n\r\n      const fn = compileFunction(id);\r\n      // Arguments must match the parameters specified in\r\n      // BuiltinLoader::LookupAndCompile().\r\n      fn(this.exports, requireFn, this, process, internalBinding, primordials);\r\n\r\n      this.loaded = true;\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n\r\n    // \"NativeModule\" is a legacy name of \"BuiltinModule\". We keep it\r\n    // here to avoid breaking users who parse process.moduleLoadList.\r\n    ArrayPrototypePush(moduleLoadList, `NativeModule ${id}`);\r\n    return this.exports;\r\n  }\r\n}\r\n\r\n// Think of this as module.exports in this file even though it is not\r\n// written in CommonJS style.\r\nconst loaderExports = {\r\n  internalBinding,\r\n  BuiltinModule,\r\n  require: requireBuiltin,\r\n};\r\n\r\nfunction requireBuiltin(id) {\r\n  if (id === selfId) {\r\n    return loaderExports;\r\n  }\r\n\r\n  const mod = BuiltinModule.map.get(id);\r\n  // Can't load the internal errors module from here, have to use a raw error.\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\r\n  return mod.compileForInternalLoader();\r\n}\r\n\r\n// Allow internal modules from dependencies to require\r\n// other modules from dependencies by providing fallbacks.\r\nfunction requireWithFallbackInDeps(request) {\r\n  if (StringPrototypeStartsWith(request, 'node:')) {\r\n    request = StringPrototypeSlice(request, 5);\r\n  } else if (!BuiltinModule.map.has(request)) {\r\n    request = `internal/deps/${request}`;\r\n  }\r\n  return requireBuiltin(request);\r\n}\r\n\r\nfunction setupPrepareStackTrace() {\r\n  const {\r\n    setEnhanceStackForFatalException,\r\n    setPrepareStackTraceCallback,\r\n  } = internalBinding('errors');\r\n  const {\r\n    prepareStackTraceCallback,\r\n    ErrorPrepareStackTrace,\r\n    fatalExceptionStackEnhancers: {\r\n      beforeInspector,\r\n      afterInspector,\r\n    },\r\n  } = requireBuiltin('internal/errors');\r\n  // Tell our PrepareStackTraceCallback passed to the V8 API\r\n  // to call prepareStackTrace().\r\n  setPrepareStackTraceCallback(prepareStackTraceCallback);\r\n  // Set the function used to enhance the error stack for printing\r\n  setEnhanceStackForFatalException(beforeInspector, afterInspector);\r\n  // Setup the default Error.prepareStackTrace.\r\n  ObjectDefineProperty(Error, 'prepareStackTrace', {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: ErrorPrepareStackTrace,\r\n  });\r\n}\r\n\r\n// Store the internal loaders in C++.\r\nsetInternalLoaders(internalBinding, requireBuiltin);\r\n\r\n// Setup per-realm bindings.\r\nsetupPrepareStackTrace();\r\n"
  },
  "7": {
    "metadata": {
      "scriptId": "7",
      "url": "node:internal/errors",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1885,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "22298675d4468f521fe2722c1894ec0d725f853043692e74f6ccf2a2d2d981f2",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 69094,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/errors"
    },
    "source": "/* eslint node-core/documented-errors: \"error\" */\r\n/* eslint node-core/alphabetize-errors: [\"error\", {checkErrorDeclarations: true}] */\r\n/* eslint node-core/prefer-util-format-errors: \"error\" */\r\n\r\n'use strict';\r\n\r\n// The whole point behind this internal module is to allow Node.js to no\r\n// longer be forced to treat every error message change as a semver-major\r\n// change. The NodeError classes here all expose a `code` property whose\r\n// value statically and permanently identifies the error. While the error\r\n// message may change, the code should not.\r\n\r\nconst {\r\n  AggregateError,\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototypeToString,\r\n  JSONStringify,\r\n  MapPrototypeGet,\r\n  MathAbs,\r\n  MathMax,\r\n  Number,\r\n  NumberIsInteger,\r\n  ObjectAssign,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectIsExtensible,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RangeError,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n  String,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n  SymbolFor,\r\n  SyntaxError,\r\n  TypeError,\r\n  URIError,\r\n} = primordials;\r\n\r\nconst kIsNodeError = Symbol('kIsNodeError');\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst messages = new SafeMap();\r\nconst codes = {};\r\n\r\nconst classRegExp = /^[A-Z][a-zA-Z0-9]*$/;\r\n\r\n// Sorted by a rough estimate on most frequently used entries.\r\nconst kTypes = [\r\n  'string',\r\n  'function',\r\n  'number',\r\n  'object',\r\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\r\n  'Function',\r\n  'Object',\r\n  'boolean',\r\n  'bigint',\r\n  'symbol',\r\n];\r\n\r\nconst MainContextError = Error;\r\nconst overrideStackTrace = new SafeWeakMap();\r\nlet internalPrepareStackTrace = defaultPrepareStackTrace;\r\n\r\n/**\r\n * The default implementation of `Error.prepareStackTrace` with simple\r\n * concatenation of stack frames.\r\n * Read more about `Error.prepareStackTrace` at https://v8.dev/docs/stack-trace-api#customizing-stack-traces.\r\n */\r\nfunction defaultPrepareStackTrace(error, trace) {\r\n  // Normal error formatting:\r\n  //\r\n  // Error: Message\r\n  //     at function (file)\r\n  //     at file\r\n  let errorString;\r\n  if (kIsNodeError in error) {\r\n    errorString = `${error.name} [${error.code}]: ${error.message}`;\r\n  } else {\r\n    errorString = ErrorPrototypeToString(error);\r\n  }\r\n  if (trace.length === 0) {\r\n    return errorString;\r\n  }\r\n  return `${errorString}\\n    at ${ArrayPrototypeJoin(trace, '\\n    at ')}`;\r\n}\r\n\r\nfunction setInternalPrepareStackTrace(callback) {\r\n  internalPrepareStackTrace = callback;\r\n}\r\n\r\n/**\r\n * Every realm has its own prepareStackTraceCallback. When `error.stack` is\r\n * accessed, if the error is created in a shadow realm, the shadow realm's\r\n * prepareStackTraceCallback is invoked. Otherwise, the principal realm's\r\n * prepareStackTraceCallback is invoked. Note that accessing `error.stack`\r\n * of error objects created in a VM Context will always invoke the\r\n * prepareStackTraceCallback of the principal realm.\r\n * @param {object} globalThis The global object of the realm that the error was\r\n *   created in. When the error object is created in a VM Context, this is the\r\n *   global object of that VM Context.\r\n * @param {object} error The error object.\r\n * @param {CallSite[]} trace An array of CallSite objects, read more at https://v8.dev/docs/stack-trace-api#customizing-stack-traces.\r\n * @returns {string}\r\n */\r\nfunction prepareStackTraceCallback(globalThis, error, trace) {\r\n  // API for node internals to override error stack formatting\r\n  // without interfering with userland code.\r\n  if (overrideStackTrace.has(error)) {\r\n    const f = overrideStackTrace.get(error);\r\n    overrideStackTrace.delete(error);\r\n    return f(error, trace);\r\n  }\r\n\r\n  // Polyfill of V8's Error.prepareStackTrace API.\r\n  // https://crbug.com/v8/7848\r\n  // `globalThis` is the global that contains the constructor which\r\n  // created `error`.\r\n  if (typeof globalThis.Error?.prepareStackTrace === 'function') {\r\n    return globalThis.Error.prepareStackTrace(error, trace);\r\n  }\r\n  // We still have legacy usage that depends on the main context's `Error`\r\n  // being used, even when the error is from a different context.\r\n  // TODO(devsnek): evaluate if this can be eventually deprecated/removed.\r\n  if (typeof MainContextError.prepareStackTrace === 'function') {\r\n    return MainContextError.prepareStackTrace(error, trace);\r\n  }\r\n\r\n  // If the Error.prepareStackTrace was not a function, fallback to the\r\n  // internal implementation.\r\n  return internalPrepareStackTrace(error, trace);\r\n}\r\n\r\n/**\r\n * The default Error.prepareStackTrace implementation.\r\n */\r\nfunction ErrorPrepareStackTrace(error, trace) {\r\n  return internalPrepareStackTrace(error, trace);\r\n}\r\n\r\nconst aggregateTwoErrors = (innerError, outerError) => {\r\n  if (innerError && outerError && innerError !== outerError) {\r\n    if (ArrayIsArray(outerError.errors)) {\r\n      // If `outerError` is already an `AggregateError`.\r\n      ArrayPrototypePush(outerError.errors, innerError);\r\n      return outerError;\r\n    }\r\n    let err;\r\n    if (isErrorStackTraceLimitWritable()) {\r\n      const limit = Error.stackTraceLimit;\r\n      Error.stackTraceLimit = 0;\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      err = new AggregateError(new SafeArrayIterator([\r\n        outerError,\r\n        innerError,\r\n      ]), outerError.message);\r\n      Error.stackTraceLimit = limit;\r\n      ErrorCaptureStackTrace(err, aggregateTwoErrors);\r\n    } else {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      err = new AggregateError(new SafeArrayIterator([\r\n        outerError,\r\n        innerError,\r\n      ]), outerError.message);\r\n    }\r\n    err.code = outerError.code;\r\n    return err;\r\n  }\r\n  return innerError || outerError;\r\n};\r\n\r\nclass NodeAggregateError extends AggregateError {\r\n  constructor(errors, message) {\r\n    super(new SafeArrayIterator(errors), message);\r\n    this.code = errors[0]?.code;\r\n  }\r\n\r\n  get [kIsNodeError]() {\r\n    return true;\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return AggregateError;\r\n  }\r\n}\r\n\r\nconst assert = require('internal/assert');\r\n\r\n// Lazily loaded\r\nlet util;\r\n\r\nlet internalUtil = null;\r\nfunction lazyInternalUtil() {\r\n  internalUtil ??= require('internal/util');\r\n  return internalUtil;\r\n}\r\n\r\nlet internalUtilInspect = null;\r\nfunction lazyInternalUtilInspect() {\r\n  internalUtilInspect ??= require('internal/util/inspect');\r\n  return internalUtilInspect;\r\n}\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\nlet buffer;\r\nfunction lazyBuffer() {\r\n  buffer ??= require('buffer').Buffer;\r\n  return buffer;\r\n}\r\n\r\nfunction isErrorStackTraceLimitWritable() {\r\n  // Do no touch Error.stackTraceLimit as V8 would attempt to install\r\n  // it again during deserialization.\r\n  if (require('internal/v8/startup_snapshot').namespace.isBuildingSnapshot()) {\r\n    return false;\r\n  }\r\n\r\n  const desc = ObjectGetOwnPropertyDescriptor(Error, 'stackTraceLimit');\r\n  if (desc === undefined) {\r\n    return ObjectIsExtensible(Error);\r\n  }\r\n\r\n  return ObjectPrototypeHasOwnProperty(desc, 'writable') ?\r\n    desc.writable :\r\n    desc.set !== undefined;\r\n}\r\n\r\nfunction inspectWithNoCustomRetry(obj, options) {\r\n  const utilInspect = lazyInternalUtilInspect();\r\n\r\n  try {\r\n    return utilInspect.inspect(obj, options);\r\n  } catch {\r\n    return utilInspect.inspect(obj, { ...options, customInspect: false });\r\n  }\r\n}\r\n\r\n// A specialized Error that includes an additional info property with\r\n// additional information about the error condition.\r\n// It has the properties present in a UVException but with a custom error\r\n// message followed by the uv error code and uv error message.\r\n// It also has its own error code with the original uv error context put into\r\n// `err.info`.\r\n// The context passed into this error must have .code, .syscall and .message,\r\n// and may have .path and .dest.\r\nclass SystemError extends Error {\r\n  constructor(key, context) {\r\n    super();\r\n    const prefix = getMessage(key, [], this);\r\n    let message = `${prefix}: ${context.syscall} returned ` +\r\n                  `${context.code} (${context.message})`;\r\n\r\n    if (context.path !== undefined)\r\n      message += ` ${context.path}`;\r\n    if (context.dest !== undefined)\r\n      message += ` => ${context.dest}`;\r\n\r\n    this.code = key;\r\n\r\n    ObjectDefineProperties(this, {\r\n      [kIsNodeError]: {\r\n        __proto__: null,\r\n        value: true,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: true,\r\n      },\r\n      name: {\r\n        __proto__: null,\r\n        value: 'SystemError',\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true,\r\n      },\r\n      message: {\r\n        __proto__: null,\r\n        value: message,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true,\r\n      },\r\n      info: {\r\n        __proto__: null,\r\n        value: context,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: false,\r\n      },\r\n      errno: {\r\n        __proto__: null,\r\n        get() {\r\n          return context.errno;\r\n        },\r\n        set: (value) => {\r\n          context.errno = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      },\r\n      syscall: {\r\n        __proto__: null,\r\n        get() {\r\n          return context.syscall;\r\n        },\r\n        set: (value) => {\r\n          context.syscall = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      },\r\n    });\r\n\r\n    if (context.path !== undefined) {\r\n      // TODO(BridgeAR): Investigate why and when the `.toString()` was\r\n      // introduced. The `path` and `dest` properties in the context seem to\r\n      // always be of type string. We should probably just remove the\r\n      // `.toString()` and `Buffer.from()` operations and set the value on the\r\n      // context as the user did.\r\n      ObjectDefineProperty(this, 'path', {\r\n        __proto__: null,\r\n        get() {\r\n          return context.path != null ?\r\n            context.path.toString() : context.path;\r\n        },\r\n        set: (value) => {\r\n          context.path = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n\r\n    if (context.dest !== undefined) {\r\n      ObjectDefineProperty(this, 'dest', {\r\n        __proto__: null,\r\n        get() {\r\n          return context.dest != null ?\r\n            context.dest.toString() : context.dest;\r\n        },\r\n        set: (value) => {\r\n          context.dest = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} [${this.code}]: ${this.message}`;\r\n  }\r\n\r\n  [SymbolFor('nodejs.util.inspect.custom')](recurseTimes, ctx) {\r\n    return lazyInternalUtilInspect().inspect(this, {\r\n      ...ctx,\r\n      getters: true,\r\n      customInspect: false,\r\n    });\r\n  }\r\n}\r\n\r\nfunction makeSystemErrorWithCode(key) {\r\n  return class NodeError extends SystemError {\r\n    constructor(ctx) {\r\n      super(key, ctx);\r\n    }\r\n  };\r\n}\r\n\r\n// This is a special error type that is only used for the E function.\r\nclass HideStackFramesError extends Error {\r\n}\r\n\r\nfunction makeNodeErrorForHideStackFrame(Base, clazz) {\r\n  class HideStackFramesError extends Base {\r\n    constructor(...args) {\r\n      if (isErrorStackTraceLimitWritable()) {\r\n        const limit = Error.stackTraceLimit;\r\n        Error.stackTraceLimit = 0;\r\n        super(...args);\r\n        Error.stackTraceLimit = limit;\r\n      } else {\r\n        super(...args);\r\n      }\r\n    }\r\n\r\n    // This is a workaround for wpt tests that expect that the error\r\n    // constructor has a `name` property of the base class.\r\n    get ['constructor']() {\r\n      return clazz;\r\n    }\r\n  }\r\n\r\n  return HideStackFramesError;\r\n}\r\n\r\nfunction makeNodeErrorWithCode(Base, key) {\r\n  const msg = messages.get(key);\r\n  const expectedLength = typeof msg !== 'string' ? -1 : getExpectedArgumentLength(msg);\r\n\r\n  switch (expectedLength) {\r\n    case 0: {\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          assert(\r\n            args.length === 0,\r\n            `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n              `match the required ones (${expectedLength}).`,\r\n          );\r\n          super(msg);\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n    case -1: {\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          super();\r\n          ObjectDefineProperty(this, 'message', {\r\n            __proto__: null,\r\n            value: getMessage(key, args, this),\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n          });\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n    default: {\r\n\r\n      class NodeError extends Base {\r\n        code = key;\r\n\r\n        constructor(...args) {\r\n          assert(\r\n            args.length === expectedLength,\r\n            `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n              `match the required ones (${expectedLength}).`,\r\n          );\r\n\r\n          ArrayPrototypeUnshift(args, msg);\r\n          super(ReflectApply(lazyInternalUtilInspect().format, null, args));\r\n        }\r\n\r\n        // This is a workaround for wpt tests that expect that the error\r\n        // constructor has a `name` property of the base class.\r\n        get ['constructor']() {\r\n          return Base;\r\n        }\r\n\r\n        get [kIsNodeError]() {\r\n          return true;\r\n        }\r\n\r\n        toString() {\r\n          return `${this.name} [${key}]: ${this.message}`;\r\n        }\r\n      }\r\n      return NodeError;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function removes unnecessary frames from Node.js core errors.\r\n * @template {(...args: unknown[]) => unknown} T\r\n * @param {T} fn\r\n * @returns {T}\r\n */\r\nfunction hideStackFrames(fn) {\r\n  function wrappedFn(...args) {\r\n    try {\r\n      return ReflectApply(fn, this, args);\r\n    } catch (error) {\r\n      Error.stackTraceLimit && ErrorCaptureStackTrace(error, wrappedFn);\r\n      throw error;\r\n    }\r\n  }\r\n  wrappedFn.withoutStackTrace = fn;\r\n  return wrappedFn;\r\n}\r\n\r\n// Utility function for registering the error codes. Only used here. Exported\r\n// *only* to allow for testing.\r\nfunction E(sym, val, def, ...otherClasses) {\r\n  // Special case for SystemError that formats the error message differently\r\n  // The SystemErrors only have SystemError as their base classes.\r\n  messages.set(sym, val);\r\n\r\n  const ErrClass = def === SystemError ?\r\n    makeSystemErrorWithCode(sym) :\r\n    makeNodeErrorWithCode(def, sym);\r\n\r\n  if (otherClasses.length !== 0) {\r\n    if (otherClasses.includes(HideStackFramesError)) {\r\n      if (otherClasses.length !== 1) {\r\n        otherClasses.forEach((clazz) => {\r\n          if (clazz !== HideStackFramesError) {\r\n            ErrClass[clazz.name] = makeNodeErrorWithCode(clazz, sym);\r\n            ErrClass[clazz.name].HideStackFramesError = makeNodeErrorForHideStackFrame(ErrClass[clazz.name], clazz);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      otherClasses.forEach((clazz) => {\r\n        ErrClass[clazz.name] = makeNodeErrorWithCode(clazz, sym);\r\n      });\r\n    }\r\n  }\r\n\r\n  if (otherClasses.includes(HideStackFramesError)) {\r\n    ErrClass.HideStackFramesError = makeNodeErrorForHideStackFrame(ErrClass, def);\r\n  }\r\n\r\n  codes[sym] = ErrClass;\r\n}\r\n\r\nfunction getExpectedArgumentLength(msg) {\r\n  let expectedLength = 0;\r\n  const regex = /%[dfijoOs]/g;\r\n  while (RegExpPrototypeExec(regex, msg) !== null) expectedLength++;\r\n  return expectedLength;\r\n}\r\n\r\nfunction getMessage(key, args, self) {\r\n  const msg = messages.get(key);\r\n\r\n  if (typeof msg === 'function') {\r\n    assert(\r\n      msg.length <= args.length, // Default options do not count.\r\n      `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n        `match the required ones (${msg.length}).`,\r\n    );\r\n    return ReflectApply(msg, self, args);\r\n  }\r\n\r\n  const expectedLength = getExpectedArgumentLength(msg);\r\n  assert(\r\n    expectedLength === args.length,\r\n    `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n      `match the required ones (${expectedLength}).`,\r\n  );\r\n  if (args.length === 0)\r\n    return msg;\r\n\r\n  ArrayPrototypeUnshift(args, msg);\r\n  return ReflectApply(lazyInternalUtilInspect().format, null, args);\r\n}\r\n\r\nlet uvBinding;\r\n\r\nfunction lazyUv() {\r\n  uvBinding ??= internalBinding('uv');\r\n  return uvBinding;\r\n}\r\n\r\nconst uvUnmappedError = ['UNKNOWN', 'unknown error'];\r\n\r\nfunction uvErrmapGet(name) {\r\n  uvBinding = lazyUv();\r\n  uvBinding.errmap ??= uvBinding.getErrorMap();\r\n  return MapPrototypeGet(uvBinding.errmap, name);\r\n}\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * function UVException using a context object with data assembled in C++.\r\n * The goal is to migrate them to ERR_* errors later when compatibility is\r\n * not a concern.\r\n */\r\nclass UVException extends Error {\r\n  /**\r\n   * @param {object} ctx\r\n   */\r\n  constructor(ctx) {\r\n    const { 0: code, 1: uvmsg } = uvErrmapGet(ctx.errno) || uvUnmappedError;\r\n    let message = `${code}: ${ctx.message || uvmsg}, ${ctx.syscall}`;\r\n\r\n    let path;\r\n    let dest;\r\n    if (ctx.path) {\r\n      path = ctx.path.toString();\r\n      message += ` '${path}'`;\r\n    }\r\n    if (ctx.dest) {\r\n      dest = ctx.dest.toString();\r\n      message += ` -> '${dest}'`;\r\n    }\r\n\r\n    super(message);\r\n\r\n    for (const prop of ObjectKeys(ctx)) {\r\n      if (prop === 'message' || prop === 'path' || prop === 'dest') {\r\n        continue;\r\n      }\r\n      this[prop] = ctx[prop];\r\n    }\r\n\r\n    this.code = code;\r\n    if (path) {\r\n      this.path = path;\r\n    }\r\n    if (dest) {\r\n      this.dest = dest;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * This function should replace the deprecated\r\n * `exceptionWithHostPort()` function.\r\n */\r\nclass UVExceptionWithHostPort extends Error {\r\n  /**\r\n   * @param {number} err - A libuv error number\r\n   * @param {string} syscall\r\n   * @param {string} address\r\n   * @param {number} [port]\r\n   */\r\n  constructor(err, syscall, address, port) {\r\n    const { 0: code, 1: uvmsg } = uvErrmapGet(err) || uvUnmappedError;\r\n    const message = `${syscall} ${code}: ${uvmsg}`;\r\n    let details = '';\r\n\r\n    if (port && port > 0) {\r\n      details = ` ${address}:${port}`;\r\n    } else if (address) {\r\n      details = ` ${address}`;\r\n    }\r\n\r\n    super(`${message}${details}`);\r\n\r\n    this.code = code;\r\n    this.errno = err;\r\n    this.syscall = syscall;\r\n    this.address = address;\r\n    if (port) {\r\n      this.port = port;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * This used to be util._errnoException().\r\n */\r\nclass ErrnoException extends Error {\r\n  /**\r\n   * @param {number} err - A libuv error number\r\n   * @param {string} syscall\r\n   * @param {string} [original] err\r\n   */\r\n  constructor(err, syscall, original) {\r\n    // TODO(joyeecheung): We have to use the type-checked\r\n    // getSystemErrorName(err) to guard against invalid arguments from users.\r\n    // This can be replaced with [ code ] = errmap.get(err) when this method\r\n    // is no longer exposed to user land.\r\n    util ??= require('util');\r\n    const code = util.getSystemErrorName(err);\r\n    const message = original ?\r\n      `${syscall} ${code} ${original}` : `${syscall} ${code}`;\r\n\r\n    super(message);\r\n\r\n    this.errno = err;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\n/**\r\n * Deprecated, new Error is `UVExceptionWithHostPort()`\r\n * New function added the error description directly\r\n * from C++. this method for backwards compatibility\r\n * @param {number} err - A libuv error number\r\n * @param {string} syscall\r\n * @param {string} address\r\n * @param {number} [port]\r\n * @param {string} [additional]\r\n * @returns {Error}\r\n */\r\nclass ExceptionWithHostPort extends Error {\r\n  constructor(err, syscall, address, port, additional) {\r\n    // TODO(joyeecheung): We have to use the type-checked\r\n    // getSystemErrorName(err) to guard against invalid arguments from users.\r\n    // This can be replaced with [ code ] = errmap.get(err) when this method\r\n    // is no longer exposed to user land.\r\n    util ??= require('util');\r\n    const code = util.getSystemErrorName(err);\r\n    let details = '';\r\n    if (port && port > 0) {\r\n      details = ` ${address}:${port}`;\r\n    } else if (address) {\r\n      details = ` ${address}`;\r\n    }\r\n    if (additional) {\r\n      details += ` - Local (${additional})`;\r\n    }\r\n\r\n    super(`${syscall} ${code}${details}`);\r\n\r\n    this.errno = err;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n    this.address = address;\r\n    if (port) {\r\n      this.port = port;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nclass DNSException extends Error {\r\n  /**\r\n   * @param {number|string} code - A libuv error number or a c-ares error code\r\n   * @param {string} syscall\r\n   * @param {string} [hostname]\r\n   */\r\n  constructor(code, syscall, hostname) {\r\n    let errno;\r\n    // If `code` is of type number, it is a libuv error number, else it is a\r\n    // c-ares error code.\r\n    // TODO(joyeecheung): translate c-ares error codes into numeric ones and\r\n    // make them available in a property that's not error.errno (since they\r\n    // can be in conflict with libuv error codes). Also make sure\r\n    // util.getSystemErrorName() can understand them when an being informed that\r\n    // the number is a c-ares error code.\r\n    if (typeof code === 'number') {\r\n      errno = code;\r\n      // ENOTFOUND is not a proper POSIX error, but this error has been in place\r\n      // long enough that it's not practical to remove it.\r\n      if (code === lazyUv().UV_EAI_NODATA || code === lazyUv().UV_EAI_NONAME) {\r\n        code = 'ENOTFOUND'; // Fabricated error name.\r\n      } else {\r\n        code = lazyInternalUtil().getSystemErrorName(code);\r\n      }\r\n    }\r\n    super(`${syscall} ${code}${hostname ? ` ${hostname}` : ''}`);\r\n    this.errno = errno;\r\n    this.code = code;\r\n    this.syscall = syscall;\r\n    if (hostname) {\r\n      this.hostname = hostname;\r\n    }\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nclass ConnResetException extends Error {\r\n  constructor(msg) {\r\n    super(msg);\r\n    this.code = 'ECONNRESET';\r\n  }\r\n\r\n  get ['constructor']() {\r\n    return Error;\r\n  }\r\n}\r\n\r\nlet maxStack_ErrorName;\r\nlet maxStack_ErrorMessage;\r\n\r\n/**\r\n * Returns true if `err.name` and `err.message` are equal to engine-specific\r\n * values indicating max call stack size has been exceeded.\r\n * \"Maximum call stack size exceeded\" in V8.\r\n * @param {Error} err\r\n * @returns {boolean}\r\n */\r\nfunction isStackOverflowError(err) {\r\n  if (maxStack_ErrorMessage === undefined) {\r\n    try {\r\n      function overflowStack() { overflowStack(); }\r\n      overflowStack();\r\n    } catch (err) {\r\n      maxStack_ErrorMessage = err.message;\r\n      maxStack_ErrorName = err.name;\r\n    }\r\n  }\r\n\r\n  return err && err.name === maxStack_ErrorName &&\r\n         err.message === maxStack_ErrorMessage;\r\n}\r\n\r\n// Only use this for integers! Decimal numbers do not work with this function.\r\nfunction addNumericalSeparator(val) {\r\n  let res = '';\r\n  let i = val.length;\r\n  const start = val[0] === '-' ? 1 : 0;\r\n  for (; i >= start + 4; i -= 3) {\r\n    res = `_${StringPrototypeSlice(val, i - 3, i)}${res}`;\r\n  }\r\n  return `${StringPrototypeSlice(val, 0, i)}${res}`;\r\n}\r\n\r\n// Used to enhance the stack that will be picked up by the inspector\r\nconst kEnhanceStackBeforeInspector = Symbol('kEnhanceStackBeforeInspector');\r\n\r\n// These are supposed to be called only on fatal exceptions before\r\n// the process exits.\r\nconst fatalExceptionStackEnhancers = {\r\n  beforeInspector(error) {\r\n    if (typeof error[kEnhanceStackBeforeInspector] !== 'function') {\r\n      return error.stack;\r\n    }\r\n\r\n    try {\r\n      // Set the error.stack here so it gets picked up by the\r\n      // inspector.\r\n      error.stack = error[kEnhanceStackBeforeInspector]();\r\n    } catch {\r\n      // We are just enhancing the error. If it fails, ignore it.\r\n    }\r\n    return error.stack;\r\n  },\r\n  afterInspector(error) {\r\n    const originalStack = error.stack;\r\n    let useColors = true;\r\n    // Some consoles do not convert ANSI escape sequences to colors,\r\n    // rather display them directly to the stdout. On those consoles,\r\n    // libuv emulates colors by intercepting stdout stream and calling\r\n    // corresponding Windows API functions for setting console colors.\r\n    // However, fatal error are handled differently and we cannot easily\r\n    // highlight them. On Windows, detecting whether a console supports\r\n    // ANSI escape sequences is not reliable.\r\n    if (isWindows) {\r\n      const info = internalBinding('os').getOSInformation();\r\n      const ver = ArrayPrototypeMap(StringPrototypeSplit(info[2], '.'),\r\n                                    Number);\r\n      if (ver[0] !== 10 || ver[2] < 14393) {\r\n        useColors = false;\r\n      }\r\n    }\r\n    const {\r\n      inspect,\r\n      inspectDefaultOptions: {\r\n        colors: defaultColors,\r\n      },\r\n    } = lazyInternalUtilInspect();\r\n    const colors = useColors && (lazyUtilColors().shouldColorize(process.stderr) || defaultColors);\r\n    try {\r\n      return inspect(error, {\r\n        colors,\r\n        customInspect: false,\r\n        depth: MathMax(inspect.defaultOptions.depth, 5),\r\n      });\r\n    } catch {\r\n      return originalStack;\r\n    }\r\n  },\r\n};\r\n\r\nconst {\r\n  privateSymbols: {\r\n    arrow_message_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n// Ensures the printed error line is from user code.\r\nfunction setArrowMessage(err, arrowMessage) {\r\n  err[arrow_message_private_symbol] = arrowMessage;\r\n}\r\n\r\n// Hide stack lines before the first user code line.\r\nfunction hideInternalStackFrames(error) {\r\n  overrideStackTrace.set(error, (error, stackFrames) => {\r\n    let frames = stackFrames;\r\n    if (typeof stackFrames === 'object') {\r\n      frames = ArrayPrototypeFilter(\r\n        stackFrames,\r\n        (frm) => !StringPrototypeStartsWith(frm.getFileName() || '',\r\n                                            'node:internal'),\r\n      );\r\n    }\r\n    ArrayPrototypeUnshift(frames, error);\r\n    return ArrayPrototypeJoin(frames, '\\n    at ');\r\n  });\r\n}\r\n\r\n// Node uses an AbortError that isn't exactly the same as the DOMException\r\n// to make usage of the error in userland and readable-stream easier.\r\n// It is a regular error with `.code` and `.name`.\r\nclass AbortError extends Error {\r\n  constructor(message = 'The operation was aborted', options = undefined) {\r\n    if (options !== undefined && typeof options !== 'object') {\r\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n    }\r\n    super(message, options);\r\n    this.code = 'ABORT_ERR';\r\n    this.name = 'AbortError';\r\n  }\r\n}\r\n\r\n/**\r\n * This creates a generic Node.js error.\r\n * @param {string} message The error message.\r\n * @param {object} errorProperties Object with additional properties to be added to the error.\r\n * @returns {Error}\r\n */\r\nconst genericNodeError = hideStackFrames(function genericNodeError(message, errorProperties) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  ObjectAssign(err, errorProperties);\r\n  return err;\r\n});\r\n\r\n/**\r\n * Determine the specific type of a value for type-mismatch errors.\r\n * @param {*} value\r\n * @returns {string}\r\n */\r\nfunction determineSpecificType(value) {\r\n  if (value === null) {\r\n    return 'null';\r\n  } else if (value === undefined) {\r\n    return 'undefined';\r\n  }\r\n\r\n  const type = typeof value;\r\n\r\n  switch (type) {\r\n    case 'bigint':\r\n      return `type bigint (${value}n)`;\r\n    case 'number':\r\n      if (value === 0) {\r\n        return 1 / value === -Infinity ? 'type number (-0)' : 'type number (0)';\r\n      } else if (value !== value) { // eslint-disable-line no-self-compare\r\n        return 'type number (NaN)';\r\n      } else if (value === Infinity) {\r\n        return 'type number (Infinity)';\r\n      } else if (value === -Infinity) {\r\n        return 'type number (-Infinity)';\r\n      }\r\n      return `type number (${value})`;\r\n    case 'boolean':\r\n      return value ? 'type boolean (true)' : 'type boolean (false)';\r\n    case 'symbol':\r\n      return `type symbol (${String(value)})`;\r\n    case 'function':\r\n      return `function ${value.name}`;\r\n    case 'object':\r\n      if (value.constructor && 'name' in value.constructor) {\r\n        return `an instance of ${value.constructor.name}`;\r\n      }\r\n      return `${lazyInternalUtilInspect().inspect(value, { depth: -1 })}`;\r\n    case 'string':\r\n      value.length > 28 && (value = `${StringPrototypeSlice(value, 0, 25)}...`);\r\n      if (StringPrototypeIndexOf(value, \"'\") === -1) {\r\n        return `type string ('${value}')`;\r\n      }\r\n      return `type string (${JSONStringify(value)})`;\r\n    default:\r\n      value = lazyInternalUtilInspect().inspect(value, { colors: false });\r\n      if (value.length > 28) {\r\n        value = `${StringPrototypeSlice(value, 0, 25)}...`;\r\n      }\r\n\r\n      return `type ${type} (${value})`;\r\n  }\r\n}\r\n\r\n/**\r\n * Create a list string in the form like 'A and B' or 'A, B, ..., and Z'.\r\n * We cannot use Intl.ListFormat because it's not available in\r\n * --without-intl builds.\r\n * @param {string[]} array An array of strings.\r\n * @param {string} [type] The list type to be inserted before the last element.\r\n * @returns {string}\r\n */\r\nfunction formatList(array, type = 'and') {\r\n  switch (array.length) {\r\n    case 0: return '';\r\n    case 1: return `${array[0]}`;\r\n    case 2: return `${array[0]} ${type} ${array[1]}`;\r\n    case 3: return `${array[0]}, ${array[1]}, ${type} ${array[2]}`;\r\n    default:\r\n      return `${ArrayPrototypeJoin(ArrayPrototypeSlice(array, 0, -1), ', ')}, ${type} ${array[array.length - 1]}`;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  NodeAggregateError,\r\n  codes,\r\n  ConnResetException,\r\n  DNSException,\r\n  // This is exported only to facilitate testing.\r\n  determineSpecificType,\r\n  E,\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  fatalExceptionStackEnhancers,\r\n  formatList,\r\n  genericNodeError,\r\n  getMessage,\r\n  hideInternalStackFrames,\r\n  hideStackFrames,\r\n  inspectWithNoCustomRetry,\r\n  isErrorStackTraceLimitWritable,\r\n  isStackOverflowError,\r\n  kEnhanceStackBeforeInspector,\r\n  kIsNodeError,\r\n  defaultPrepareStackTrace,\r\n  setInternalPrepareStackTrace,\r\n  overrideStackTrace,\r\n  prepareStackTraceCallback,\r\n  ErrorPrepareStackTrace,\r\n  setArrowMessage,\r\n  SystemError,\r\n  uvErrmapGet,\r\n  UVException,\r\n  UVExceptionWithHostPort,\r\n};\r\n\r\n// To declare an error message, use the E(sym, val, def) function above. The sym\r\n// must be an upper case string. The val can be either a function or a string.\r\n// The def must be an error class.\r\n// The return value of the function must be a string.\r\n// Examples:\r\n// E('EXAMPLE_KEY1', 'This is the error value', Error);\r\n// E('EXAMPLE_KEY2', (a, b) => return `${a} ${b}`, RangeError);\r\n//\r\n// Once an error code has been assigned, the code itself MUST NOT change and\r\n// any given error code must never be reused to identify a different error.\r\n//\r\n// Any error code added here should also be added to the documentation\r\n//\r\n// Note: Please try to keep these in alphabetical order\r\n//\r\n// Note: Node.js specific errors must begin with the prefix ERR_\r\n\r\nE('ERR_ACCESS_DENIED',\r\n  'Access to this API has been restricted. Permission: %s',\r\n  Error);\r\nE('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\r\nE('ERR_ARG_NOT_ITERABLE', '%s must be iterable', TypeError);\r\nE('ERR_ASSERTION', '%s', Error);\r\nE('ERR_ASYNC_CALLBACK', '%s must be a function', TypeError);\r\nE('ERR_ASYNC_TYPE', 'Invalid name for async \"type\": %s', TypeError);\r\nE('ERR_BROTLI_INVALID_PARAM', '%s is not a valid Brotli parameter', RangeError);\r\nE('ERR_BUFFER_OUT_OF_BOUNDS',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name = undefined) => {\r\n    if (name) {\r\n      return `\"${name}\" is outside of buffer bounds`;\r\n    }\r\n    return 'Attempt to access memory outside buffer bounds';\r\n  }, RangeError);\r\nE('ERR_BUFFER_TOO_LARGE',\r\n  'Cannot create a Buffer larger than %s bytes',\r\n  RangeError);\r\nE('ERR_CANNOT_WATCH_SIGINT', 'Cannot watch for SIGINT signals', Error);\r\nE('ERR_CHILD_CLOSED_BEFORE_REPLY',\r\n  'Child closed before reply received', Error);\r\nE('ERR_CHILD_PROCESS_IPC_REQUIRED',\r\n  \"Forked processes must have an IPC channel, missing value 'ipc' in %s\",\r\n  Error);\r\nE('ERR_CHILD_PROCESS_STDIO_MAXBUFFER', '%s maxBuffer length exceeded',\r\n  RangeError);\r\nE('ERR_CONSOLE_WRITABLE_STREAM',\r\n  'Console expects a writable stream instance for %s', TypeError);\r\nE('ERR_CONTEXT_NOT_INITIALIZED', 'context used is not initialized', Error);\r\nE('ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED',\r\n  'Custom engines not supported by this OpenSSL', Error);\r\nE('ERR_CRYPTO_ECDH_INVALID_FORMAT', 'Invalid ECDH format: %s', TypeError);\r\nE('ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY',\r\n  'Public key is not valid for specified curve', Error);\r\nE('ERR_CRYPTO_ENGINE_UNKNOWN', 'Engine \"%s\" was not found', Error);\r\nE('ERR_CRYPTO_FIPS_FORCED',\r\n  'Cannot set FIPS mode, it was forced with --force-fips at startup.', Error);\r\nE('ERR_CRYPTO_FIPS_UNAVAILABLE', 'Cannot set FIPS mode in a non-FIPS build.',\r\n  Error);\r\nE('ERR_CRYPTO_HASH_FINALIZED', 'Digest already called', Error);\r\nE('ERR_CRYPTO_HASH_UPDATE_FAILED', 'Hash update failed', Error);\r\nE('ERR_CRYPTO_INCOMPATIBLE_KEY', 'Incompatible %s: %s', Error);\r\nE('ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS', 'The selected key encoding %s %s.',\r\n  Error);\r\nE('ERR_CRYPTO_INVALID_DIGEST', 'Invalid digest: %s', TypeError);\r\nE('ERR_CRYPTO_INVALID_JWK', 'Invalid JWK data', TypeError);\r\nE('ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE',\r\n  'Invalid key object type %s, expected %s.', TypeError);\r\nE('ERR_CRYPTO_INVALID_STATE', 'Invalid state for operation %s', Error);\r\nE('ERR_CRYPTO_PBKDF2_ERROR', 'PBKDF2 error', Error);\r\nE('ERR_CRYPTO_SCRYPT_INVALID_PARAMETER', 'Invalid scrypt parameter', Error);\r\nE('ERR_CRYPTO_SCRYPT_NOT_SUPPORTED', 'Scrypt algorithm not supported', Error);\r\n// Switch to TypeError. The current implementation does not seem right.\r\nE('ERR_CRYPTO_SIGN_KEY_REQUIRED', 'No key provided to sign', Error);\r\nE('ERR_DEBUGGER_ERROR', '%s', Error);\r\nE('ERR_DEBUGGER_STARTUP_ERROR', '%s', Error);\r\nE('ERR_DIR_CLOSED', 'Directory handle was closed', Error);\r\nE('ERR_DIR_CONCURRENT_OPERATION',\r\n  'Cannot do synchronous work on directory handle with concurrent ' +\r\n  'asynchronous operations', Error);\r\nE('ERR_DNS_SET_SERVERS_FAILED', 'c-ares failed to set servers: \"%s\" [%s]',\r\n  Error);\r\nE('ERR_DOMAIN_CALLBACK_NOT_AVAILABLE',\r\n  'A callback was registered through ' +\r\n     'process.setUncaughtExceptionCaptureCallback(), which is mutually ' +\r\n     'exclusive with using the `domain` module',\r\n  Error);\r\nE('ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE',\r\n  'The `domain` module is in use, which is mutually exclusive with calling ' +\r\n     'process.setUncaughtExceptionCaptureCallback()',\r\n  Error);\r\nE('ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION',\r\n  'Deserialize main function is already configured.', Error);\r\nE('ERR_ENCODING_INVALID_ENCODED_DATA', function(encoding, ret) {\r\n  this.errno = ret;\r\n  return `The encoded data was not valid for encoding ${encoding}`;\r\n}, TypeError);\r\nE('ERR_ENCODING_NOT_SUPPORTED', 'The \"%s\" encoding is not supported',\r\n  RangeError);\r\nE('ERR_EVAL_ESM_CANNOT_PRINT', '--print cannot be used with ESM input', Error);\r\nE('ERR_EVENT_RECURSION', 'The event \"%s\" is already being dispatched', Error);\r\nE('ERR_FALSY_VALUE_REJECTION', function(reason) {\r\n  this.reason = reason;\r\n  return 'Promise was rejected with falsy value';\r\n}, Error, HideStackFramesError);\r\nE('ERR_FEATURE_UNAVAILABLE_ON_PLATFORM',\r\n  'The feature %s is unavailable on the current platform' +\r\n  ', which is being used to run Node.js',\r\n  TypeError);\r\nE('ERR_FS_CP_DIR_TO_NON_DIR',\r\n  'Cannot overwrite non-directory with directory', SystemError);\r\nE('ERR_FS_CP_EEXIST', 'Target already exists', SystemError);\r\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest', SystemError);\r\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe', SystemError);\r\nE('ERR_FS_CP_NON_DIR_TO_DIR',\r\n  'Cannot overwrite directory with non-directory', SystemError);\r\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file', SystemError);\r\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY',\r\n  'Cannot overwrite symlink in subdirectory of self', SystemError);\r\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type', SystemError);\r\nE('ERR_FS_EISDIR', 'Path is a directory', SystemError, HideStackFramesError);\r\nE('ERR_FS_FILE_TOO_LARGE', 'File size (%s) is greater than 2 GiB', RangeError);\r\nE('ERR_FS_INVALID_SYMLINK_TYPE',\r\n  'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"%s\"',\r\n  Error); // Switch to TypeError. The current implementation does not seem right\r\nE('ERR_HTTP2_ALTSVC_INVALID_ORIGIN',\r\n  'HTTP/2 ALTSVC frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_ALTSVC_LENGTH',\r\n  'HTTP/2 ALTSVC frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_CONNECT_AUTHORITY',\r\n  ':authority header is required for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_PATH',\r\n  'The :path header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_SCHEME',\r\n  'The :scheme header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_GOAWAY_SESSION',\r\n  'New streams cannot be created after receiving a GOAWAY', Error);\r\nE('ERR_HTTP2_HEADERS_AFTER_RESPOND',\r\n  'Cannot specify additional headers after response initiated', Error);\r\nE('ERR_HTTP2_HEADERS_SENT', 'Response has already been initiated.', Error);\r\nE('ERR_HTTP2_HEADER_SINGLE_VALUE',\r\n  'Header field \"%s\" must only have a single value', TypeError);\r\nE('ERR_HTTP2_INFO_STATUS_NOT_ALLOWED',\r\n  'Informational status codes cannot be used', RangeError);\r\nE('ERR_HTTP2_INVALID_CONNECTION_HEADERS',\r\n  'HTTP/1 Connection specific headers are forbidden: \"%s\"', TypeError);\r\nE('ERR_HTTP2_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_INFO_STATUS',\r\n  'Invalid informational status code: %s', RangeError);\r\nE('ERR_HTTP2_INVALID_ORIGIN',\r\n  'HTTP/2 ORIGIN frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH',\r\n  'Packed settings length must be a multiple of six', RangeError);\r\nE('ERR_HTTP2_INVALID_PSEUDOHEADER',\r\n  '\"%s\" is an invalid pseudoheader or is used incorrectly', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_SESSION', 'The session has been destroyed', Error);\r\nE('ERR_HTTP2_INVALID_SETTING_VALUE',\r\n  // Using default arguments here is important so the arguments are not counted\r\n  // towards `Function#length`.\r\n  function(name, actual, min = undefined, max = undefined) {\r\n    this.actual = actual;\r\n    if (min !== undefined) {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n    return `Invalid value for setting \"${name}\": ${actual}`;\r\n  }, TypeError, RangeError, HideStackFramesError);\r\nE('ERR_HTTP2_INVALID_STREAM', 'The stream has been destroyed', Error);\r\nE('ERR_HTTP2_MAX_PENDING_SETTINGS_ACK',\r\n  'Maximum number of pending settings acknowledgements', Error);\r\nE('ERR_HTTP2_NESTED_PUSH',\r\n  'A push stream cannot initiate another push stream.', Error);\r\nE('ERR_HTTP2_NO_MEM', 'Out of memory', Error);\r\nE('ERR_HTTP2_NO_SOCKET_MANIPULATION',\r\n  'HTTP/2 sockets should not be directly manipulated (e.g. read and written)',\r\n  Error);\r\nE('ERR_HTTP2_ORIGIN_LENGTH',\r\n  'HTTP/2 ORIGIN frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_OUT_OF_STREAMS',\r\n  'No stream ID is available because maximum stream ID has been reached',\r\n  Error);\r\nE('ERR_HTTP2_PAYLOAD_FORBIDDEN',\r\n  'Responses with %s status must not have a payload', Error);\r\nE('ERR_HTTP2_PING_CANCEL', 'HTTP2 ping cancelled', Error);\r\nE('ERR_HTTP2_PING_LENGTH', 'HTTP2 ping payload must be 8 bytes', RangeError);\r\nE('ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED',\r\n  'Cannot set HTTP/2 pseudo-headers', TypeError, HideStackFramesError);\r\nE('ERR_HTTP2_PUSH_DISABLED', 'HTTP/2 client has disabled push streams', Error);\r\nE('ERR_HTTP2_SEND_FILE', 'Directories cannot be sent', Error);\r\nE('ERR_HTTP2_SEND_FILE_NOSEEK',\r\n  'Offset or length can only be specified for regular files', Error);\r\nE('ERR_HTTP2_SESSION_ERROR', 'Session closed with error code %s', Error);\r\nE('ERR_HTTP2_SETTINGS_CANCEL', 'HTTP2 session settings canceled', Error);\r\nE('ERR_HTTP2_SOCKET_BOUND',\r\n  'The socket is already bound to an Http2Session', Error);\r\nE('ERR_HTTP2_SOCKET_UNBOUND',\r\n  'The socket has been disconnected from the Http2Session', Error);\r\nE('ERR_HTTP2_STATUS_101',\r\n  'HTTP status code 101 (Switching Protocols) is forbidden in HTTP/2', Error);\r\nE('ERR_HTTP2_STATUS_INVALID', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP2_STREAM_CANCEL', function(error) {\r\n  let msg = 'The pending stream has been canceled';\r\n  if (error) {\r\n    this.cause = error;\r\n    if (typeof error.message === 'string')\r\n      msg += ` (caused by: ${error.message})`;\r\n  }\r\n  return msg;\r\n}, Error);\r\nE('ERR_HTTP2_STREAM_ERROR', 'Stream closed with error code %s', Error);\r\nE('ERR_HTTP2_STREAM_SELF_DEPENDENCY',\r\n  'A stream cannot depend on itself', Error);\r\nE('ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS',\r\n  'Number of custom settings exceeds MAX_ADDITIONAL_SETTINGS', Error);\r\nE('ERR_HTTP2_TOO_MANY_INVALID_FRAMES', 'Too many invalid HTTP/2 frames', Error);\r\nE('ERR_HTTP2_TRAILERS_ALREADY_SENT',\r\n  'Trailing headers have already been sent', Error);\r\nE('ERR_HTTP2_TRAILERS_NOT_READY',\r\n  'Trailing headers cannot be sent until after the wantTrailers event is ' +\r\n  'emitted', Error);\r\nE('ERR_HTTP2_UNSUPPORTED_PROTOCOL', 'protocol \"%s\" is unsupported.', Error);\r\nE('ERR_HTTP_BODY_NOT_ALLOWED',\r\n  'Adding content for this request method or response status is not allowed.', Error);\r\nE('ERR_HTTP_CONTENT_LENGTH_MISMATCH',\r\n  'Response body\\'s content-length of %s byte(s) does not match the content-length of %s byte(s) set in header', Error);\r\nE('ERR_HTTP_HEADERS_SENT',\r\n  'Cannot %s headers after they are sent to the client', Error);\r\nE('ERR_HTTP_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_HTTP_INVALID_STATUS_CODE', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP_REQUEST_TIMEOUT', 'Request timeout', Error);\r\nE('ERR_HTTP_SOCKET_ASSIGNED',\r\n  'ServerResponse has an already assigned socket', Error);\r\nE('ERR_HTTP_SOCKET_ENCODING',\r\n  'Changing the socket encoding is not allowed per RFC7230 Section 3.', Error);\r\nE('ERR_HTTP_TRAILER_INVALID',\r\n  'Trailers are invalid with this transfer encoding', Error);\r\nE('ERR_ILLEGAL_CONSTRUCTOR', 'Illegal constructor', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_MISSING',\r\n  'Module \"%s\" needs an import attribute of \"%s: %s\"', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE',\r\n  'Module \"%s\" is not of type \"%s\"', TypeError);\r\nE('ERR_IMPORT_ATTRIBUTE_UNSUPPORTED',\r\n  'Import attribute \"%s\" with value \"%s\" is not supported', TypeError);\r\nE('ERR_INCOMPATIBLE_OPTION_PAIR',\r\n  'Option \"%s\" cannot be used in combination with option \"%s\"', TypeError, HideStackFramesError);\r\nE('ERR_INPUT_TYPE_NOT_ALLOWED', '--input-type can only be used with string ' +\r\n  'input via --eval, --print, or STDIN', Error);\r\nE('ERR_INSPECTOR_ALREADY_ACTIVATED',\r\n  'Inspector is already activated. Close it with inspector.close() ' +\r\n  'before activating it again.',\r\n  Error);\r\nE('ERR_INSPECTOR_ALREADY_CONNECTED', '%s is already connected', Error);\r\nE('ERR_INSPECTOR_CLOSED', 'Session was closed', Error);\r\nE('ERR_INSPECTOR_COMMAND', 'Inspector error %d: %s', Error);\r\nE('ERR_INSPECTOR_NOT_ACTIVE', 'Inspector is not active', Error);\r\nE('ERR_INSPECTOR_NOT_AVAILABLE', 'Inspector is not available', Error);\r\nE('ERR_INSPECTOR_NOT_CONNECTED', 'Session is not connected', Error);\r\nE('ERR_INSPECTOR_NOT_WORKER', 'Current thread is not a worker', Error);\r\nE('ERR_INTERNAL_ASSERTION', (message) => {\r\n  const suffix = 'This is caused by either a bug in Node.js ' +\r\n    'or incorrect usage of Node.js internals.\\n' +\r\n    'Please open an issue with this stack trace at ' +\r\n    'https://github.com/nodejs/node/issues\\n';\r\n  return message === undefined ? suffix : `${message}\\n${suffix}`;\r\n}, Error);\r\nE('ERR_INVALID_ADDRESS_FAMILY', function(addressType, host, port) {\r\n  this.host = host;\r\n  this.port = port;\r\n  return `Invalid address family: ${addressType} ${host}:${port}`;\r\n}, RangeError);\r\nE('ERR_INVALID_ARG_TYPE',\r\n  (name, expected, actual) => {\r\n    assert(typeof name === 'string', \"'name' must be a string\");\r\n    if (!ArrayIsArray(expected)) {\r\n      expected = [expected];\r\n    }\r\n\r\n    let msg = 'The ';\r\n    if (StringPrototypeEndsWith(name, ' argument')) {\r\n      // For cases like 'first argument'\r\n      msg += `${name} `;\r\n    } else {\r\n      const type = StringPrototypeIncludes(name, '.') ? 'property' : 'argument';\r\n      msg += `\"${name}\" ${type} `;\r\n    }\r\n    msg += 'must be ';\r\n\r\n    const types = [];\r\n    const instances = [];\r\n    const other = [];\r\n\r\n    for (const value of expected) {\r\n      assert(typeof value === 'string',\r\n             'All expected entries have to be of type string');\r\n      if (ArrayPrototypeIncludes(kTypes, value)) {\r\n        ArrayPrototypePush(types, StringPrototypeToLowerCase(value));\r\n      } else if (RegExpPrototypeExec(classRegExp, value) !== null) {\r\n        ArrayPrototypePush(instances, value);\r\n      } else {\r\n        assert(value !== 'object',\r\n               'The value \"object\" should be written as \"Object\"');\r\n        ArrayPrototypePush(other, value);\r\n      }\r\n    }\r\n\r\n    // Special handle `object` in case other instances are allowed to outline\r\n    // the differences between each other.\r\n    if (instances.length > 0) {\r\n      const pos = ArrayPrototypeIndexOf(types, 'object');\r\n      if (pos !== -1) {\r\n        ArrayPrototypeSplice(types, pos, 1);\r\n        ArrayPrototypePush(instances, 'Object');\r\n      }\r\n    }\r\n\r\n    if (types.length > 0) {\r\n      msg += `${types.length > 1 ? 'one of type' : 'of type'} ${formatList(types, 'or')}`;\r\n      if (instances.length > 0 || other.length > 0)\r\n        msg += ' or ';\r\n    }\r\n\r\n    if (instances.length > 0) {\r\n      msg += `an instance of ${formatList(instances, 'or')}`;\r\n      if (other.length > 0)\r\n        msg += ' or ';\r\n    }\r\n\r\n    if (other.length > 0) {\r\n      if (other.length > 1) {\r\n        msg += `one of ${formatList(other, 'or')}`;\r\n      } else {\r\n        if (StringPrototypeToLowerCase(other[0]) !== other[0])\r\n          msg += 'an ';\r\n        msg += `${other[0]}`;\r\n      }\r\n    }\r\n\r\n    msg += `. Received ${determineSpecificType(actual)}`;\r\n\r\n    return msg;\r\n  }, TypeError, HideStackFramesError);\r\nE('ERR_INVALID_ARG_VALUE', (name, value, reason = 'is invalid') => {\r\n  let inspected = lazyInternalUtilInspect().inspect(value);\r\n  if (inspected.length > 128) {\r\n    inspected = `${StringPrototypeSlice(inspected, 0, 128)}...`;\r\n  }\r\n  const type = StringPrototypeIncludes(name, '.') ? 'property' : 'argument';\r\n  return `The ${type} '${name}' ${reason}. Received ${inspected}`;\r\n}, TypeError, RangeError, HideStackFramesError);\r\nE('ERR_INVALID_ASYNC_ID', 'Invalid %s value: %s', RangeError);\r\nE('ERR_INVALID_BUFFER_SIZE',\r\n  'Buffer size must be a multiple of %s', RangeError);\r\nE('ERR_INVALID_CHAR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name, field = undefined) => {\r\n    let msg = `Invalid character in ${name}`;\r\n    if (field !== undefined) {\r\n      msg += ` [\"${field}\"]`;\r\n    }\r\n    return msg;\r\n  }, TypeError, HideStackFramesError);\r\nE('ERR_INVALID_CURSOR_POS',\r\n  'Cannot set cursor row without setting its column', TypeError);\r\nE('ERR_INVALID_FD',\r\n  '\"fd\" must be a positive integer: %s', RangeError);\r\nE('ERR_INVALID_FD_TYPE', 'Unsupported fd type: %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_HOST',\r\n  'File URL host must be \"localhost\" or empty on %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_PATH', 'File URL path %s', TypeError);\r\nE('ERR_INVALID_HANDLE_TYPE', 'This handle type cannot be sent', TypeError);\r\nE('ERR_INVALID_HTTP_TOKEN', '%s must be a valid HTTP token [\"%s\"]', TypeError, HideStackFramesError);\r\nE('ERR_INVALID_IP_ADDRESS', 'Invalid IP address: %s', TypeError);\r\nE('ERR_INVALID_MIME_SYNTAX', (production, str, invalidIndex) => {\r\n  const msg = invalidIndex !== -1 ? ` at ${invalidIndex}` : '';\r\n  return `The MIME syntax for a ${production} in \"${str}\" is invalid` + msg;\r\n}, TypeError);\r\nE('ERR_INVALID_MODULE_SPECIFIER', (request, reason, base = undefined) => {\r\n  return `Invalid module \"${request}\" ${reason}${base ?\r\n    ` imported from ${base}` : ''}`;\r\n}, TypeError);\r\nE('ERR_INVALID_PACKAGE_CONFIG', (path, base, message) => {\r\n  return `Invalid package config ${path}${base ? ` while importing ${base}` :\r\n    ''}${message ? `. ${message}` : ''}`;\r\n}, Error);\r\nE('ERR_INVALID_PACKAGE_TARGET',\r\n  (pkgPath, key, target, isImport = false, base = undefined) => {\r\n    const relError = typeof target === 'string' && !isImport &&\r\n      target.length && !StringPrototypeStartsWith(target, './');\r\n    if (key === '.') {\r\n      assert(isImport === false);\r\n      return `Invalid \"exports\" main target ${JSONStringify(target)} defined ` +\r\n        `in the package config ${pkgPath}package.json${base ?\r\n          ` imported from ${base}` : ''}${relError ?\r\n          '; targets must start with \"./\"' : ''}`;\r\n    }\r\n    return `Invalid \"${isImport ? 'imports' : 'exports'}\" target ${\r\n      JSONStringify(target)} defined for '${key}' in the package config ${\r\n      pkgPath}package.json${base ? ` imported from ${base}` : ''}${relError ?\r\n      '; targets must start with \"./\"' : ''}`;\r\n  }, Error);\r\nE('ERR_INVALID_PROTOCOL',\r\n  'Protocol \"%s\" not supported. Expected \"%s\"',\r\n  TypeError);\r\nE('ERR_INVALID_REPL_EVAL_CONFIG',\r\n  'Cannot specify both \"breakEvalOnSigint\" and \"eval\" for REPL', TypeError);\r\nE('ERR_INVALID_REPL_INPUT', '%s', TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY', (input, name, prop, value) => {\r\n  return `Expected a valid ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" hook but got ${determineSpecificType(value)}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY_VALUE', (input, name, prop, value) => {\r\n  return `Expected ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" hook but got ${determineSpecificType(value)}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_VALUE', (input, name, value) => {\r\n  const type = determineSpecificType(value);\r\n\r\n  return `Expected ${input} to be returned from the \"${name}\"` +\r\n         ` function but got ${type}.`;\r\n}, TypeError, RangeError);\r\nE('ERR_INVALID_STATE', 'Invalid state: %s', Error, TypeError, RangeError);\r\nE('ERR_INVALID_SYNC_FORK_INPUT',\r\n  'Asynchronous forks do not support ' +\r\n    'Buffer, TypedArray, DataView or string input: %s',\r\n  TypeError);\r\nE('ERR_INVALID_THIS', 'Value of \"this\" must be of type %s', TypeError);\r\nE('ERR_INVALID_TUPLE', '%s must be an iterable %s tuple', TypeError);\r\nE('ERR_INVALID_URI', 'URI malformed', URIError);\r\nE('ERR_INVALID_URL', function(input, base = null) {\r\n  this.input = input;\r\n\r\n  if (base != null) {\r\n    this.base = base;\r\n  }\r\n\r\n  // Don't include URL in message.\r\n  // (See https://github.com/nodejs/node/pull/38614)\r\n  return 'Invalid URL';\r\n}, TypeError);\r\nE('ERR_INVALID_URL_SCHEME',\r\n  (expected) => {\r\n    if (typeof expected === 'string')\r\n      expected = [expected];\r\n    assert(expected.length <= 2);\r\n    const res = expected.length === 2 ?\r\n      `one of scheme ${expected[0]} or ${expected[1]}` :\r\n      `of scheme ${expected[0]}`;\r\n    return `The URL must be ${res}`;\r\n  }, TypeError);\r\nE('ERR_IPC_CHANNEL_CLOSED', 'Channel closed', Error);\r\nE('ERR_IPC_DISCONNECTED', 'IPC channel is already disconnected', Error);\r\nE('ERR_IPC_ONE_PIPE', 'Child process can have only one IPC pipe', Error);\r\nE('ERR_IPC_SYNC_FORK', 'IPC cannot be used with synchronous forks', Error);\r\nE(\r\n  'ERR_LOADER_CHAIN_INCOMPLETE',\r\n  '\"%s\" did not call the next hook in its chain and did not' +\r\n  ' explicitly signal a short circuit. If this is intentional, include' +\r\n  ' `shortCircuit: true` in the hook\\'s return.',\r\n  Error,\r\n);\r\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error);\r\nE('ERR_MISSING_ARGS',\r\n  (...args) => {\r\n    assert(args.length > 0, 'At least one arg needs to be specified');\r\n    let msg = 'The ';\r\n    const len = args.length;\r\n    const wrap = (a) => `\"${a}\"`;\r\n    args = ArrayPrototypeMap(\r\n      args,\r\n      (a) => (ArrayIsArray(a) ?\r\n        ArrayPrototypeJoin(ArrayPrototypeMap(a, wrap), ' or ') :\r\n        wrap(a)),\r\n    );\r\n    msg += `${formatList(args)} argument${len > 1 ? 's' : ''}`;\r\n    return `${msg} must be specified`;\r\n  }, TypeError);\r\nE('ERR_MISSING_OPTION', '%s is required', TypeError);\r\nE('ERR_MODULE_NOT_FOUND', function(path, base, exactUrl) {\r\n  if (exactUrl) {\r\n    lazyInternalUtil().setOwnProperty(this, 'url', `${exactUrl}`);\r\n  }\r\n  return `Cannot find ${\r\n    exactUrl ? 'module' : 'package'} '${path}' imported from ${base}`;\r\n}, Error);\r\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error);\r\nE('ERR_NAPI_CONS_FUNCTION', 'Constructor must be a function', TypeError);\r\nE('ERR_NAPI_INVALID_DATAVIEW_ARGS',\r\n  'byte_offset + byte_length should be less than or equal to the size in ' +\r\n    'bytes of the array passed in',\r\n  RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT',\r\n  'start offset of %s should be a multiple of %s', RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_LENGTH',\r\n  'Invalid typed array length', RangeError);\r\nE('ERR_NETWORK_IMPORT_BAD_RESPONSE',\r\n  \"import '%s' received a bad response: %s\", Error);\r\nE('ERR_NETWORK_IMPORT_DISALLOWED',\r\n  \"import of '%s' by %s is not supported: %s\", Error);\r\nE('ERR_NOT_BUILDING_SNAPSHOT',\r\n  'Operation cannot be invoked when not building startup snapshot', Error);\r\nE('ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION',\r\n  'Operation cannot be invoked when not in a single-executable application', Error);\r\nE('ERR_NOT_SUPPORTED_IN_SNAPSHOT', '%s is not supported in startup snapshot', Error);\r\nE('ERR_NO_CRYPTO',\r\n  'Node.js is not compiled with OpenSSL crypto support', Error);\r\nE('ERR_NO_ICU',\r\n  '%s is not supported on Node.js compiled without ICU', TypeError);\r\nE('ERR_OPERATION_FAILED', 'Operation failed: %s', Error, TypeError);\r\nE('ERR_OUT_OF_RANGE',\r\n  (str, range, input, replaceDefaultBoolean = false) => {\r\n    assert(range, 'Missing \"range\" argument');\r\n    let msg = replaceDefaultBoolean ? str :\r\n      `The value of \"${str}\" is out of range.`;\r\n    let received;\r\n    if (NumberIsInteger(input) && MathAbs(input) > 2 ** 32) {\r\n      received = addNumericalSeparator(String(input));\r\n    } else if (typeof input === 'bigint') {\r\n      received = String(input);\r\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\r\n        received = addNumericalSeparator(received);\r\n      }\r\n      received += 'n';\r\n    } else {\r\n      received = lazyInternalUtilInspect().inspect(input);\r\n    }\r\n    msg += ` It must be ${range}. Received ${received}`;\r\n    return msg;\r\n  }, RangeError, HideStackFramesError);\r\nE('ERR_PACKAGE_IMPORT_NOT_DEFINED', (specifier, packagePath, base) => {\r\n  return `Package import specifier \"${specifier}\" is not defined${packagePath ?\r\n    ` in package ${packagePath}package.json` : ''} imported from ${base}`;\r\n}, TypeError);\r\nE('ERR_PACKAGE_PATH_NOT_EXPORTED', (pkgPath, subpath, base = undefined) => {\r\n  if (subpath === '.')\r\n    return `No \"exports\" main defined in ${pkgPath}package.json${base ?\r\n      ` imported from ${base}` : ''}`;\r\n  return `Package subpath '${subpath}' is not defined by \"exports\" in ${\r\n    pkgPath}package.json${base ? ` imported from ${base}` : ''}`;\r\n}, Error);\r\nE('ERR_PARSE_ARGS_INVALID_OPTION_VALUE', '%s', TypeError);\r\nE('ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL', \"Unexpected argument '%s'. This \" +\r\n  'command does not take positional arguments', TypeError);\r\nE('ERR_PARSE_ARGS_UNKNOWN_OPTION', (option, allowPositionals) => {\r\n  const suggestDashDash = allowPositionals ? '. To specify a positional ' +\r\n    \"argument starting with a '-', place it at the end of the command after \" +\r\n    `'--', as in '-- ${JSONStringify(option)}` : '';\r\n  return `Unknown option '${option}'${suggestDashDash}`;\r\n}, TypeError);\r\nE('ERR_PERFORMANCE_INVALID_TIMESTAMP',\r\n  '%d is not a valid timestamp', TypeError);\r\nE('ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS', '%s', TypeError);\r\nE('ERR_REQUIRE_CYCLE_MODULE', '%s', Error);\r\nE('ERR_REQUIRE_ESM',\r\n  function(filename, hasEsmSyntax, parentPath = null, packageJsonPath = null) {\r\n    hideInternalStackFrames(this);\r\n    let msg = `require() of ES Module ${filename}${parentPath ? ` from ${\r\n      parentPath}` : ''} not supported.`;\r\n    if (!packageJsonPath) {\r\n      if (StringPrototypeEndsWith(filename, '.mjs'))\r\n        msg += `\\nInstead change the require of ${filename} to a dynamic ` +\r\n            'import() which is available in all CommonJS modules.';\r\n      return msg;\r\n    }\r\n    const path = require('path');\r\n    const basename = parentPath && path.basename(filename) ===\r\n      path.basename(parentPath) ? filename : path.basename(filename);\r\n    if (hasEsmSyntax) {\r\n      msg += `\\nInstead change the require of ${basename} in ${parentPath} to` +\r\n        ' a dynamic import() which is available in all CommonJS modules.';\r\n      return msg;\r\n    }\r\n    msg += `\\n${basename} is treated as an ES module file as it is a .js ` +\r\n      'file whose nearest parent package.json contains \"type\": \"module\" ' +\r\n      'which declares all .js files in that package scope as ES modules.' +\r\n      `\\nInstead either rename ${basename} to end in .cjs, change the requiring ` +\r\n      'code to use dynamic import() which is available in all CommonJS ' +\r\n      'modules, or change \"type\": \"module\" to \"type\": \"commonjs\" in ' +\r\n      `${packageJsonPath} to treat all .js files as CommonJS (using .mjs for ` +\r\n      'all ES modules instead).\\n';\r\n    return msg;\r\n  }, Error);\r\nE('ERR_SCRIPT_EXECUTION_INTERRUPTED',\r\n  'Script execution was interrupted by `SIGINT`', Error);\r\nE('ERR_SERVER_ALREADY_LISTEN',\r\n  'Listen method has been called more than once without closing.', Error);\r\nE('ERR_SERVER_NOT_RUNNING', 'Server is not running.', Error);\r\nE('ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND',\r\n  'Cannot find asset %s for the single executable application', Error);\r\nE('ERR_SOCKET_ALREADY_BOUND', 'Socket is already bound', Error);\r\nE('ERR_SOCKET_BAD_BUFFER_SIZE',\r\n  'Buffer size must be a positive integer', TypeError);\r\nE('ERR_SOCKET_BAD_PORT', (name, port, allowZero = true) => {\r\n  assert(typeof allowZero === 'boolean',\r\n         \"The 'allowZero' argument must be of type boolean.\");\r\n  const operator = allowZero ? '>=' : '>';\r\n  return `${name} should be ${operator} 0 and < 65536. Received ${determineSpecificType(port)}.`;\r\n}, RangeError, HideStackFramesError);\r\nE('ERR_SOCKET_BAD_TYPE',\r\n  'Bad socket type specified. Valid types are: udp4, udp6', TypeError);\r\nE('ERR_SOCKET_BUFFER_SIZE',\r\n  'Could not get or set buffer size',\r\n  SystemError);\r\nE('ERR_SOCKET_CLOSED', 'Socket is closed', Error);\r\nE('ERR_SOCKET_CLOSED_BEFORE_CONNECTION',\r\n  'Socket closed before the connection was established',\r\n  Error);\r\nE('ERR_SOCKET_CONNECTION_TIMEOUT',\r\n  'Socket connection timeout', Error);\r\nE('ERR_SOCKET_DGRAM_IS_CONNECTED', 'Already connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_CONNECTED', 'Not connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_RUNNING', 'Not running', Error);\r\nE('ERR_SRI_PARSE',\r\n  'Subresource Integrity string %j had an unexpected %j at position %d',\r\n  SyntaxError);\r\nE('ERR_STREAM_ALREADY_FINISHED',\r\n  'Cannot call %s after a stream was finished',\r\n  Error);\r\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error);\r\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error);\r\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\r\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error);\r\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error);\r\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT',\r\n  'stream.unshift() after end event', Error);\r\nE('ERR_STREAM_WRAP', 'Stream has StringDecoder set or is in objectMode', Error);\r\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error);\r\nE('ERR_SYNTHETIC', 'JavaScript Callstack', Error);\r\nE('ERR_SYSTEM_ERROR', 'A system error occurred', SystemError, HideStackFramesError);\r\nE('ERR_TAP_LEXER_ERROR', function(errorMsg) {\r\n  hideInternalStackFrames(this);\r\n  return errorMsg;\r\n}, Error);\r\nE('ERR_TAP_PARSER_ERROR', function(errorMsg, details, tokenCausedError, source) {\r\n  hideInternalStackFrames(this);\r\n  this.cause = tokenCausedError;\r\n  const { column, line, start, end } = tokenCausedError.location;\r\n  const errorDetails = `${details} at line ${line}, column ${column} (start ${start}, end ${end})`;\r\n  return errorMsg + errorDetails;\r\n}, SyntaxError);\r\nE('ERR_TAP_VALIDATION_ERROR', function(errorMsg) {\r\n  hideInternalStackFrames(this);\r\n  return errorMsg;\r\n}, Error);\r\nE('ERR_TEST_FAILURE', function(error, failureType) {\r\n  hideInternalStackFrames(this);\r\n  assert(typeof failureType === 'string' || typeof failureType === 'symbol',\r\n         \"The 'failureType' argument must be of type string or symbol.\");\r\n\r\n  let msg = error?.message ?? error;\r\n\r\n  if (typeof msg !== 'string') {\r\n    msg = inspectWithNoCustomRetry(msg);\r\n  }\r\n\r\n  this.failureType = failureType;\r\n  this.cause = error;\r\n  return msg;\r\n}, Error);\r\nE('ERR_TLS_ALPN_CALLBACK_INVALID_RESULT', (value, protocols) => {\r\n  return `ALPN callback returned a value (${\r\n    value\r\n  }) that did not match any of the client's offered protocols (${\r\n    protocols.join(', ')\r\n  })`;\r\n}, TypeError);\r\nE('ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS',\r\n  'The ALPNCallback and ALPNProtocols TLS options are mutually exclusive',\r\n  TypeError);\r\nE('ERR_TLS_CERT_ALTNAME_FORMAT', 'Invalid subject alternative name string',\r\n  SyntaxError);\r\nE('ERR_TLS_CERT_ALTNAME_INVALID', function(reason, host, cert) {\r\n  this.reason = reason;\r\n  this.host = host;\r\n  this.cert = cert;\r\n  return `Hostname/IP does not match certificate's altnames: ${reason}`;\r\n}, Error);\r\nE('ERR_TLS_DH_PARAM_SIZE', 'DH parameter size %s is less than 2048', Error);\r\nE('ERR_TLS_HANDSHAKE_TIMEOUT', 'TLS handshake timeout', Error);\r\nE('ERR_TLS_INVALID_CONTEXT', '%s must be a SecureContext', TypeError);\r\nE('ERR_TLS_INVALID_PROTOCOL_VERSION',\r\n  '%j is not a valid %s TLS protocol version', TypeError);\r\nE('ERR_TLS_INVALID_STATE', 'TLS socket connection must be securely established',\r\n  Error);\r\nE('ERR_TLS_PROTOCOL_VERSION_CONFLICT',\r\n  'TLS protocol version %j conflicts with secureProtocol %j', TypeError);\r\nE('ERR_TLS_RENEGOTIATION_DISABLED',\r\n  'TLS session renegotiation disabled for this socket', Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_TLS_REQUIRED_SERVER_NAME',\r\n  '\"servername\" is required parameter for Server.addContext', Error);\r\nE('ERR_TLS_SESSION_ATTACK', 'TLS session renegotiation attack detected', Error);\r\nE('ERR_TLS_SNI_FROM_SERVER',\r\n  'Cannot issue SNI from a TLS server-side socket', Error);\r\nE('ERR_TRACE_EVENTS_CATEGORY_REQUIRED',\r\n  'At least one category is required', TypeError);\r\nE('ERR_TRACE_EVENTS_UNAVAILABLE', 'Trace events are unavailable', Error);\r\n\r\n// This should probably be a `RangeError`.\r\nE('ERR_TTY_INIT_FAILED', 'TTY initialization failed', SystemError);\r\nE('ERR_UNAVAILABLE_DURING_EXIT', 'Cannot call function in process exit ' +\r\n  'handler', Error);\r\nE('ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET',\r\n  '`process.setupUncaughtExceptionCapture()` was called while a capture ' +\r\n    'callback was already active',\r\n  Error);\r\nE('ERR_UNESCAPED_CHARACTERS', '%s contains unescaped characters', TypeError);\r\nE('ERR_UNHANDLED_ERROR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (err = undefined) => {\r\n    const msg = 'Unhandled error.';\r\n    if (err === undefined) return msg;\r\n    return `${msg} (${err})`;\r\n  }, Error);\r\nE('ERR_UNKNOWN_BUILTIN_MODULE', 'No such built-in module: %s', Error);\r\nE('ERR_UNKNOWN_CREDENTIAL', '%s identifier does not exist: %s', Error);\r\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError);\r\nE('ERR_UNKNOWN_FILE_EXTENSION', 'Unknown file extension \"%s\" for %s', TypeError);\r\nE('ERR_UNKNOWN_MODULE_FORMAT', 'Unknown module format: %s for URL %s',\r\n  RangeError);\r\nE('ERR_UNKNOWN_SIGNAL', 'Unknown signal: %s', TypeError, HideStackFramesError);\r\nE('ERR_UNSUPPORTED_DIR_IMPORT', function(path, base, exactUrl) {\r\n  lazyInternalUtil().setOwnProperty(this, 'url', exactUrl);\r\n  return `Directory import '${path}' is not supported ` +\r\n    `resolving ES modules imported from ${base}`;\r\n}, Error);\r\nE('ERR_UNSUPPORTED_ESM_URL_SCHEME', (url, supported) => {\r\n  let msg = `Only URLs with a scheme in: ${formatList(supported)} are supported by the default ESM loader`;\r\n  if (isWindows && url.protocol.length === 2) {\r\n    msg +=\r\n      '. On Windows, absolute paths must be valid file:// URLs';\r\n  }\r\n  msg += `. Received protocol '${url.protocol}'`;\r\n  return msg;\r\n}, Error);\r\nE('ERR_UNSUPPORTED_RESOLVE_REQUEST',\r\n  'Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.',\r\n  TypeError);\r\nE('ERR_USE_AFTER_CLOSE', '%s was closed', Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_VALID_PERFORMANCE_ENTRY_TYPE',\r\n  'At least one valid performance entry type is required', Error);\r\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING',\r\n  'A dynamic import callback was not specified.', TypeError);\r\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG',\r\n  'A dynamic import callback was invoked without --experimental-vm-modules',\r\n  TypeError);\r\nE('ERR_VM_MODULE_ALREADY_LINKED', 'Module has already been linked', Error);\r\nE('ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA',\r\n  'Cached data cannot be created for a module which has been evaluated', Error);\r\nE('ERR_VM_MODULE_DIFFERENT_CONTEXT',\r\n  'Linked modules must use the same context', Error);\r\nE('ERR_VM_MODULE_LINK_FAILURE', function(message, cause) {\r\n  this.cause = cause;\r\n  return message;\r\n}, Error);\r\nE('ERR_VM_MODULE_NOT_MODULE',\r\n  'Provided module is not an instance of Module', Error);\r\nE('ERR_VM_MODULE_STATUS', 'Module status %s', Error);\r\nE('ERR_WASI_ALREADY_STARTED', 'WASI instance has already started', Error);\r\nE('ERR_WEBASSEMBLY_RESPONSE', 'WebAssembly response %s', TypeError);\r\nE('ERR_WORKER_INIT_FAILED', 'Worker initialization failure: %s', Error);\r\nE('ERR_WORKER_INVALID_EXEC_ARGV', (errors, msg = 'invalid execArgv flags') =>\r\n  `Initiated Worker with ${msg}: ${ArrayPrototypeJoin(errors, ', ')}`,\r\n  Error);\r\nE('ERR_WORKER_NOT_RUNNING', 'Worker instance not running', Error);\r\nE('ERR_WORKER_OUT_OF_MEMORY',\r\n  'Worker terminated due to reaching memory limit: %s', Error);\r\nE('ERR_WORKER_PATH', (filename) =>\r\n  'The worker script or module filename must be an absolute path or a ' +\r\n  'relative path starting with \\'./\\' or \\'../\\'.' +\r\n  (StringPrototypeStartsWith(filename, 'file://') ?\r\n    ' Wrap file:// URLs with `new URL`.' : ''\r\n  ) +\r\n  (StringPrototypeStartsWith(filename, 'data:text/javascript') ?\r\n    ' Wrap data: URLs with `new URL`.' : ''\r\n  ) +\r\n  ` Received \"${filename}\"`,\r\n  TypeError);\r\nE('ERR_WORKER_UNSERIALIZABLE_ERROR',\r\n  'Serializing an uncaught exception failed', Error);\r\nE('ERR_WORKER_UNSUPPORTED_OPERATION',\r\n  '%s is not supported in workers', TypeError);\r\nE('ERR_ZLIB_INITIALIZATION_FAILED', 'Initialization failed', Error);\r\n"
  },
  "8": {
    "metadata": {
      "scriptId": "8",
      "url": "node:internal/assert",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 25,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "18d756c23d35317895b40556f266bcd162b8d17b7701f9ab2dc3bd1307d3b71c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 499,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/assert"
    },
    "source": "'use strict';\r\n\r\nlet error;\r\nfunction lazyError() {\r\n  if (!error) {\r\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\r\n  }\r\n  return error;\r\n}\r\n\r\nfunction assert(value, message) {\r\n  if (!value) {\r\n    const ERR_INTERNAL_ASSERTION = lazyError();\r\n    throw new ERR_INTERNAL_ASSERTION(message);\r\n  }\r\n}\r\n\r\nfunction fail(message) {\r\n  const ERR_INTERNAL_ASSERTION = lazyError();\r\n  throw new ERR_INTERNAL_ASSERTION(message);\r\n}\r\n\r\nassert.fail = fail;\r\n\r\nmodule.exports = assert;\r\n"
  },
  "9": {
    "metadata": {
      "scriptId": "9",
      "url": "node:internal/bootstrap/node",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 426,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8e3b07d1764ddafd1cbe981e9fd86f19140136306f0bc2a7b0b10ac13bb53b64",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 14553,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/node"
    },
    "source": "// Hello, and welcome to hacking node.js!\r\n//\r\n// This file is invoked by `Realm::BootstrapRealm()` in `src/node_realm.cc`,\r\n// and is responsible for setting up Node.js core before main scripts\r\n// under `lib/internal/main/` are executed.\r\n//\r\n// By default, Node.js binaries come with an embedded V8 startup snapshot\r\n// that is generated at build-time with a `node_mksnapshot` executable.\r\n// The snapshot generation code can be found in `SnapshotBuilder::Generate()`\r\n// from `src/node_snapshotable.cc`.\r\n// This snapshot captures the V8 heap initialized by scripts under\r\n// `lib/internal/bootstrap/`, including this file. When initializing the main\r\n// thread, Node.js deserializes the heap from the snapshot, instead of actually\r\n// running this script and others in `lib/internal/bootstrap/`. To disable this\r\n// behavior, pass `--no-node-snapshot` when starting the process so that\r\n// Node.js actually runs this script to initialize the heap.\r\n//\r\n// This script is expected not to perform any asynchronous operations itself\r\n// when being executed - those should be done in either\r\n// `lib/internal/process/pre_execution.js` or in main scripts. It should not\r\n// query any run-time states (e.g. command line arguments, environment\r\n// variables) when being executed - functions in this script that are invoked\r\n// at a later time can, however, query those states lazily.\r\n// The majority of the code here focuses on setting up the global object and\r\n// the process object in a synchronous, environment-independent manner.\r\n//\r\n// Scripts run before this file:\r\n// - `lib/internal/per_context/primordials.js`: this saves copies of JavaScript\r\n//   builtins that won't be affected by user land monkey-patching for internal\r\n//   modules to use.\r\n// - `lib/internal/per_context/domexception.js`: implementation of the\r\n//   `DOMException` class.\r\n// - `lib/internal/per_context/messageport.js`: JS-side components of the\r\n//   `MessagePort` implementation.\r\n// - `lib/internal/bootstrap/realm.js`: this sets up internal binding and\r\n//   module loaders, including `process.binding()`, `process._linkedBinding()`,\r\n//   `internalBinding()` and `BuiltinModule`, and per-realm internal states\r\n//   and bindings, including `prepare_stack_trace_callback`.\r\n//\r\n// The initialization done in this script is included in both the main thread\r\n// and the worker threads. After this, further initialization is done based\r\n// on the configuration of the Node.js instance by executing the scripts in\r\n// `lib/internal/bootstrap/switches/`.\r\n//\r\n// Then, depending on how the Node.js instance is launched, one of the main\r\n// scripts in `lib/internal/main` will be selected by C++ to start the actual\r\n// execution. They may run additional setups exported by\r\n// `lib/internal/process/pre_execution.js` depending on the run-time states.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by `BuiltinLoader::CompileAndCall()`.\r\n/* global process, require, internalBinding, primordials */\r\n\r\nconst {\r\n  FunctionPrototypeCall,\r\n  JSONParse,\r\n  Number,\r\n  NumberIsNaN,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  SymbolToStringTag,\r\n  globalThis,\r\n} = primordials;\r\nconst config = internalBinding('config');\r\nconst internalTimers = require('internal/timers');\r\nconst {\r\n  defineOperation,\r\n  deprecate,\r\n} = require('internal/util');\r\nconst {\r\n  validateInteger,\r\n} = require('internal/validators');\r\nconst {\r\n  constants: {\r\n    kExitCode,\r\n    kExiting,\r\n    kHasExitCode,\r\n  },\r\n  privateSymbols: {\r\n    exit_info_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\nsetupProcessObject();\r\n\r\nsetupGlobalProxy();\r\nsetupBuffer();\r\n\r\nprocess.domain = null;\r\n\r\n// process._exiting and process.exitCode\r\n{\r\n  const fields = process[exit_info_private_symbol];\r\n  ObjectDefineProperty(process, '_exiting', {\r\n    __proto__: null,\r\n    get() {\r\n      return fields[kExiting] === 1;\r\n    },\r\n    set(value) {\r\n      fields[kExiting] = value ? 1 : 0;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n\r\n  let exitCode;\r\n  ObjectDefineProperty(process, 'exitCode', {\r\n    __proto__: null,\r\n    get() {\r\n      return exitCode;\r\n    },\r\n    set(code) {\r\n      if (code !== null && code !== undefined) {\r\n        let value = code;\r\n        if (typeof code === 'string' && code !== '' &&\r\n          NumberIsNaN((value = Number(code)))) {\r\n          value = code;\r\n        }\r\n        validateInteger(value, 'code');\r\n        fields[kExitCode] = value;\r\n        fields[kHasExitCode] = 1;\r\n      } else {\r\n        fields[kHasExitCode] = 0;\r\n      }\r\n      exitCode = code;\r\n    },\r\n    enumerable: true,\r\n    configurable: false,\r\n  });\r\n}\r\nprocess._exiting = false;\r\n\r\n// process.config is serialized config.gypi\r\nconst binding = internalBinding('builtins');\r\n\r\nconst processConfig = JSONParse(binding.config, (_key, value) => {\r\n  // The `reviver` argument of the JSONParse method will visit all the values of\r\n  // the parsed config, including the \"root\" object, so there is no need to\r\n  // explicitly freeze the config outside of this method\r\n  return ObjectFreeze(value);\r\n});\r\n\r\nObjectDefineProperty(process, 'config', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  configurable: true,\r\n  value: processConfig,\r\n});\r\n\r\nrequire('internal/worker/js_transferable').setup();\r\n\r\n// Bootstrappers for all threads, including worker threads and main thread\r\nconst perThreadSetup = require('internal/process/per_thread');\r\nconst rawMethods = internalBinding('process_methods');\r\n\r\n// Set up methods on the process object for all threads\r\n{\r\n  process.dlopen = rawMethods.dlopen;\r\n  process.uptime = rawMethods.uptime;\r\n\r\n  // TODO(joyeecheung): either remove them or make them public\r\n  process._getActiveRequests = rawMethods._getActiveRequests;\r\n  process._getActiveHandles = rawMethods._getActiveHandles;\r\n  process.getActiveResourcesInfo = rawMethods.getActiveResourcesInfo;\r\n\r\n  // TODO(joyeecheung): remove these\r\n  process.reallyExit = rawMethods.reallyExit;\r\n  process._kill = rawMethods._kill;\r\n\r\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\r\n  process.loadEnvFile = wrapped.loadEnvFile;\r\n  process._rawDebug = wrapped._rawDebug;\r\n  process.cpuUsage = wrapped.cpuUsage;\r\n  process.resourceUsage = wrapped.resourceUsage;\r\n  process.memoryUsage = wrapped.memoryUsage;\r\n  process.constrainedMemory = rawMethods.constrainedMemory;\r\n  process.availableMemory = rawMethods.availableMemory;\r\n  process.kill = wrapped.kill;\r\n  process.exit = wrapped.exit;\r\n\r\n  process.hrtime = perThreadSetup.hrtime;\r\n  process.hrtime.bigint = perThreadSetup.hrtimeBigInt;\r\n\r\n  process.openStdin = function() {\r\n    process.stdin.resume();\r\n    return process.stdin;\r\n  };\r\n}\r\n\r\nconst credentials = internalBinding('credentials');\r\nif (credentials.implementsPosixCredentials) {\r\n  process.getuid = credentials.getuid;\r\n  process.geteuid = credentials.geteuid;\r\n  process.getgid = credentials.getgid;\r\n  process.getegid = credentials.getegid;\r\n  process.getgroups = credentials.getgroups;\r\n}\r\n\r\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\r\n// process. They use the same functions as the JS embedder API. These callbacks\r\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\r\n// and the cost of doing so is negligible.\r\nconst { nativeHooks } = require('internal/async_hooks');\r\ninternalBinding('async_wrap').setupHooks(nativeHooks);\r\n\r\nconst {\r\n  setupTaskQueue,\r\n} = require('internal/process/task_queues');\r\nconst timers = require('timers');\r\n// Non-standard extensions:\r\ndefineOperation(globalThis, 'clearImmediate', timers.clearImmediate);\r\ndefineOperation(globalThis, 'setImmediate', timers.setImmediate);\r\n\r\n// Set the per-Environment callback that will be called\r\n// when the TrackingTraceStateObserver updates trace state.\r\n// Note that when NODE_USE_V8_PLATFORM is true, the observer is\r\n// attached to the per-process TracingController.\r\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\r\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\r\n\r\n// process.allowedNodeEnvironmentFlags\r\nObjectDefineProperty(process, 'allowedNodeEnvironmentFlags', {\r\n  __proto__: null,\r\n  get() {\r\n    const flags = perThreadSetup.buildAllowedFlags();\r\n    process.allowedNodeEnvironmentFlags = flags;\r\n    return process.allowedNodeEnvironmentFlags;\r\n  },\r\n  // If the user tries to set this to another value, override\r\n  // this completely to that value.\r\n  set(value) {\r\n    ObjectDefineProperty(this, 'allowedNodeEnvironmentFlags', {\r\n      __proto__: null,\r\n      value,\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n    });\r\n  },\r\n  enumerable: true,\r\n  configurable: true,\r\n});\r\n\r\n// process.assert\r\nprocess.assert = deprecate(\r\n  perThreadSetup.assert,\r\n  'process.assert() is deprecated. Please use the `assert` module instead.',\r\n  'DEP0100');\r\n\r\n// TODO(joyeecheung): this property has not been well-maintained, should we\r\n// deprecate it in favor of a better API?\r\nconst { isDebugBuild, hasOpenSSL, hasInspector } = config;\r\nconst features = {\r\n  inspector: hasInspector,\r\n  debug: isDebugBuild,\r\n  uv: true,\r\n  ipv6: true,  // TODO(bnoordhuis) ping libuv\r\n  tls_alpn: hasOpenSSL,\r\n  tls_sni: hasOpenSSL,\r\n  tls_ocsp: hasOpenSSL,\r\n  tls: hasOpenSSL,\r\n  // This needs to be dynamic because --no-node-snapshot disables the\r\n  // code cache even if the binary is built with embedded code cache.\r\n  get cached_builtins() {\r\n    return binding.hasCachedBuiltins();\r\n  },\r\n};\r\n\r\nObjectDefineProperty(process, 'features', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  writable: false,\r\n  configurable: false,\r\n  value: features,\r\n});\r\n\r\n{\r\n  const {\r\n    onGlobalUncaughtException,\r\n    setUncaughtExceptionCaptureCallback,\r\n    hasUncaughtExceptionCaptureCallback,\r\n  } = require('internal/process/execution');\r\n\r\n  // For legacy reasons this is still called `_fatalException`, even\r\n  // though it is now a global uncaught exception handler.\r\n  // The C++ land node::errors::TriggerUncaughtException grabs it\r\n  // from the process object because it has been monkey-patchable.\r\n  // TODO(joyeecheung): investigate whether process._fatalException\r\n  // can be deprecated.\r\n  process._fatalException = onGlobalUncaughtException;\r\n  process.setUncaughtExceptionCaptureCallback =\r\n    setUncaughtExceptionCaptureCallback;\r\n  process.hasUncaughtExceptionCaptureCallback =\r\n    hasUncaughtExceptionCaptureCallback;\r\n}\r\n\r\nconst { emitWarning, emitWarningSync } = require('internal/process/warning');\r\nprocess.emitWarning = emitWarning;\r\ninternalBinding('process_methods').setEmitWarningSync(emitWarningSync);\r\n\r\n// We initialize the tick callbacks and the timer callbacks last during\r\n// bootstrap to make sure that any operation done before this are synchronous.\r\n// If any ticks or timers are scheduled before this they are unlikely to work.\r\n{\r\n  const { nextTick, runNextTicks } = setupTaskQueue();\r\n  process.nextTick = nextTick;\r\n  // Used to emulate a tick manually in the JS land.\r\n  // A better name for this function would be `runNextTicks` but\r\n  // it has been exposed to the process object so we keep this legacy name\r\n  // TODO(joyeecheung): either remove it or make it public\r\n  process._tickCallback = runNextTicks;\r\n\r\n  const { setupTimers } = internalBinding('timers');\r\n  const {\r\n    processImmediate,\r\n    processTimers,\r\n  } = internalTimers.getTimerCallbacks(runNextTicks);\r\n  // Sets two per-Environment callbacks that will be run from libuv:\r\n  // - processImmediate will be run in the callback of the per-Environment\r\n  //   check handle.\r\n  // - processTimers will be run in the callback of the per-Environment timer.\r\n  setupTimers(processImmediate, processTimers);\r\n  // Note: only after this point are the timers effective\r\n}\r\n\r\n{\r\n  const {\r\n    getSourceMapsEnabled,\r\n    setSourceMapsEnabled,\r\n    maybeCacheGeneratedSourceMap,\r\n  } = require('internal/source_map/source_map_cache');\r\n  const {\r\n    setMaybeCacheGeneratedSourceMap,\r\n  } = internalBinding('errors');\r\n\r\n  ObjectDefineProperty(process, 'sourceMapsEnabled', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return getSourceMapsEnabled();\r\n    },\r\n  });\r\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\r\n  // The C++ land calls back to maybeCacheGeneratedSourceMap()\r\n  // when code is generated by user with eval() or new Function()\r\n  // to cache the source maps from the evaluated code, if any.\r\n  setMaybeCacheGeneratedSourceMap(maybeCacheGeneratedSourceMap);\r\n}\r\n\r\n{\r\n  const { getBuiltinModule } = require('internal/modules/helpers');\r\n  process.getBuiltinModule = getBuiltinModule;\r\n}\r\n\r\nfunction setupProcessObject() {\r\n  const EventEmitter = require('events');\r\n  const origProcProto = ObjectGetPrototypeOf(process);\r\n  ObjectSetPrototypeOf(origProcProto, EventEmitter.prototype);\r\n  FunctionPrototypeCall(EventEmitter, process);\r\n  ObjectDefineProperty(process, SymbolToStringTag, {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: false,\r\n    value: 'process',\r\n  });\r\n\r\n  // Create global.process as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _process = process;\r\n  ObjectDefineProperty(globalThis, 'process', {\r\n    __proto__: null,\r\n    get() {\r\n      return _process;\r\n    },\r\n    set(value) {\r\n      _process = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction setupGlobalProxy() {\r\n  ObjectDefineProperty(globalThis, SymbolToStringTag, {\r\n    __proto__: null,\r\n    value: 'global',\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n  globalThis.global = globalThis;\r\n}\r\n\r\nfunction setupBuffer() {\r\n  const {\r\n    Buffer,\r\n  } = require('buffer');\r\n  const bufferBinding = internalBinding('buffer');\r\n\r\n  // Only after this point can C++ use Buffer::New()\r\n  bufferBinding.setBufferPrototype(Buffer.prototype);\r\n  delete bufferBinding.setBufferPrototype;\r\n\r\n  // Create global.Buffer as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _Buffer = Buffer;\r\n  ObjectDefineProperty(globalThis, 'Buffer', {\r\n    __proto__: null,\r\n    get() {\r\n      return _Buffer;\r\n    },\r\n    set(value) {\r\n      _Buffer = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n"
  },
  "10": {
    "metadata": {
      "scriptId": "10",
      "url": "node:internal/timers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 686,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "2599c983592bef607785893de9e41974d30238f2bb88e08a0d2ca43b7b61b082",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 20246,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/timers"
    },
    "source": "'use strict';\r\n\r\n// HOW and WHY the timers implementation works the way it does.\r\n//\r\n// Timers are crucial to Node.js. Internally, any TCP I/O connection creates a\r\n// timer so that we can time out of connections. Additionally, many user\r\n// libraries and applications also use timers. As such there may be a\r\n// significantly large amount of timeouts scheduled at any given time.\r\n// Therefore, it is very important that the timers implementation is performant\r\n// and efficient.\r\n//\r\n// Note: It is suggested you first read through the lib/internal/linkedlist.js\r\n// linked list implementation, since timers depend on it extensively. It can be\r\n// somewhat counter-intuitive at first, as it is not actually a class. Instead,\r\n// it is a set of helpers that operate on an existing object.\r\n//\r\n// In order to be as performant as possible, the architecture and data\r\n// structures are designed so that they are optimized to handle the following\r\n// use cases as efficiently as possible:\r\n\r\n// - Adding a new timer. (insert)\r\n// - Removing an existing timer. (remove)\r\n// - Handling a timer timing out. (timeout)\r\n//\r\n// Whenever possible, the implementation tries to make the complexity of these\r\n// operations as close to constant-time as possible.\r\n// (So that performance is not impacted by the number of scheduled timers.)\r\n//\r\n// Object maps are kept which contain linked lists keyed by their duration in\r\n// milliseconds.\r\n//\r\n/* eslint-disable node-core/non-ascii-character */\r\n//\r\n// ╔════ > Object Map\r\n// ║\r\n// ╠══\r\n// ║ lists: { '40': { }, '320': { etc } } (keys of millisecond duration)\r\n// ╚══          ┌────┘\r\n//              │\r\n// ╔══          │\r\n// ║ TimersList { _idleNext: { }, _idlePrev: (self) }\r\n// ║         ┌────────────────┘\r\n// ║    ╔══  │                              ^\r\n// ║    ║    { _idleNext: { },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ║    ║      ┌───────────┘\r\n// ║    ║      │                                  ^\r\n// ║    ║      { _idleNext: { etc },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ╠══  ╠══\r\n// ║    ║\r\n// ║    ╚════ >  Actual JavaScript timeouts\r\n// ║\r\n// ╚════ > Linked List\r\n//\r\n/* eslint-enable node-core/non-ascii-character */\r\n//\r\n// With this, virtually constant-time insertion (append), removal, and timeout\r\n// is possible in the JavaScript layer. Any one list of timers is able to be\r\n// sorted by just appending to it because all timers within share the same\r\n// duration. Therefore, any timer added later will always have been scheduled to\r\n// timeout later, thus only needing to be appended.\r\n// Removal from an object-property linked list is also virtually constant-time\r\n// as can be seen in the lib/internal/linkedlist.js implementation.\r\n// Timeouts only need to process any timers currently due to expire, which will\r\n// always be at the beginning of the list for reasons stated above. Any timers\r\n// after the first one encountered that does not yet need to timeout will also\r\n// always be due to timeout at a later time.\r\n//\r\n// Less-than constant time operations are thus contained in two places:\r\n// The PriorityQueue — an efficient binary heap implementation that does all\r\n// operations in worst-case O(log n) time — which manages the order of expiring\r\n// Timeout lists and the object map lookup of a specific list by the duration of\r\n// timers within (or creation of a new list). However, these operations combined\r\n// have shown to be trivial in comparison to other timers architectures.\r\n\r\nconst {\r\n  MathMax,\r\n  MathTrunc,\r\n  NumberIsFinite,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst binding = internalBinding('timers');\r\nconst {\r\n  immediateInfo,\r\n  timeoutInfo,\r\n} = binding;\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n} = require('internal/async_hooks');\r\n\r\n// Symbols for storing async id state.\r\nconst async_id_symbol = Symbol('asyncId');\r\nconst trigger_async_id_symbol = Symbol('triggerId');\r\n\r\nconst kHasPrimitive = Symbol('kHasPrimitive');\r\n\r\nconst {\r\n  ERR_OUT_OF_RANGE,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  validateFunction,\r\n  validateNumber,\r\n} = require('internal/validators');\r\n\r\nconst L = require('internal/linkedlist');\r\nconst PriorityQueue = require('internal/priority_queue');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nlet debug = require('internal/util/debuglog').debuglog('timer', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\n// *Must* match Environment::ImmediateInfo::Fields in src/env.h.\r\nconst kCount = 0;\r\nconst kRefCount = 1;\r\nconst kHasOutstanding = 2;\r\n\r\n// Timeout values > TIMEOUT_MAX are set to 1.\r\nconst TIMEOUT_MAX = 2 ** 31 - 1;\r\n\r\nlet timerListId = NumberMIN_SAFE_INTEGER;\r\n\r\nconst kRefed = Symbol('refed');\r\n\r\nlet nextExpiry = Infinity;\r\n// timeoutInfo is an Int32Array that contains the reference count of Timeout\r\n// objects at index 0. This is a TypedArray so that GetActiveResourcesInfo() in\r\n// `src/node_process_methods.cc` is able to access this value without crossing\r\n// the JS-C++ boundary, which is slow at the time of writing.\r\ntimeoutInfo[0] = 0;\r\n\r\n// This is a priority queue with a custom sorting function that first compares\r\n// the expiry times of two lists and if they're the same then compares their\r\n// individual IDs to determine which list was created first.\r\nconst timerListQueue = new PriorityQueue(compareTimersLists, setPosition);\r\n\r\n// Object map containing linked lists of timers, keyed and sorted by their\r\n// duration in milliseconds.\r\n//\r\n// - key = time in milliseconds\r\n// - value = linked list\r\nconst timerListMap = { __proto__: null };\r\n\r\nfunction initAsyncResource(resource, type) {\r\n  const asyncId = resource[async_id_symbol] = newAsyncId();\r\n  const triggerAsyncId =\r\n    resource[trigger_async_id_symbol] = getDefaultTriggerAsyncId();\r\n  if (initHooksExist())\r\n    emitInit(asyncId, type, triggerAsyncId, resource);\r\n}\r\nclass Timeout {\r\n  // Timer constructor function.\r\n  // The entire prototype is defined in lib/timers.js\r\n  constructor(callback, after, args, isRepeat, isRefed) {\r\n    after *= 1; // Coalesce to number or NaN\r\n    if (!(after >= 1 && after <= TIMEOUT_MAX)) {\r\n      if (after > TIMEOUT_MAX) {\r\n        process.emitWarning(`${after} does not fit into` +\r\n                            ' a 32-bit signed integer.' +\r\n                            '\\nTimeout duration was set to 1.',\r\n                            'TimeoutOverflowWarning');\r\n      }\r\n      after = 1; // Schedule on next tick, follows browser behavior\r\n    }\r\n\r\n    this._idleTimeout = after;\r\n    this._idlePrev = this;\r\n    this._idleNext = this;\r\n    this._idleStart = null;\r\n    // This must be set to null first to avoid function tracking\r\n    // on the hidden class, revisit in V8 versions after 6.2\r\n    this._onTimeout = null;\r\n    this._onTimeout = callback;\r\n    this._timerArgs = args;\r\n    this._repeat = isRepeat ? after : null;\r\n    this._destroyed = false;\r\n\r\n    if (isRefed)\r\n      incRefCount();\r\n    this[kRefed] = isRefed;\r\n    this[kHasPrimitive] = false;\r\n\r\n    initAsyncResource(this, 'Timeout');\r\n  }\r\n\r\n  // Make sure the linked list only shows the minimal necessary information.\r\n  [inspect.custom](_, options) {\r\n    return inspect(this, {\r\n      ...options,\r\n      // Only inspect one level.\r\n      depth: 0,\r\n      // It should not recurse.\r\n      customInspect: false,\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    if (this[kRefed])\r\n      active(this);\r\n    else\r\n      unrefActive(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    if (this[kRefed]) {\r\n      this[kRefed] = false;\r\n      if (!this._destroyed)\r\n        decRefCount();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  ref() {\r\n    if (!this[kRefed]) {\r\n      this[kRefed] = true;\r\n      if (!this._destroyed)\r\n        incRefCount();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  hasRef() {\r\n    return this[kRefed];\r\n  }\r\n}\r\n\r\nclass TimersList {\r\n  constructor(expiry, msecs) {\r\n    this._idleNext = this; // Create the list with the linkedlist properties to\r\n    this._idlePrev = this; // Prevent any unnecessary hidden class changes.\r\n    this.expiry = expiry;\r\n    this.id = timerListId++;\r\n    this.msecs = msecs;\r\n    this.priorityQueuePosition = null;\r\n  }\r\n\r\n  // Make sure the linked list only shows the minimal necessary information.\r\n  [inspect.custom](_, options) {\r\n    return inspect(this, {\r\n      ...options,\r\n      // Only inspect one level.\r\n      depth: 0,\r\n      // It should not recurse.\r\n      customInspect: false,\r\n    });\r\n  }\r\n}\r\n\r\n// A linked list for storing `setImmediate()` requests\r\nclass ImmediateList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  // Appends an item to the end of the linked list, adjusting the current tail's\r\n  // next pointer and the item's previous pointer where applicable\r\n  append(item) {\r\n    if (this.tail !== null) {\r\n      this.tail._idleNext = item;\r\n      item._idlePrev = this.tail;\r\n    } else {\r\n      this.head = item;\r\n    }\r\n    this.tail = item;\r\n  }\r\n\r\n  // Removes an item from the linked list, adjusting the pointers of adjacent\r\n  // items and the linked list's head or tail pointers as necessary\r\n  remove(item) {\r\n    if (item._idleNext) {\r\n      item._idleNext._idlePrev = item._idlePrev;\r\n    }\r\n\r\n    if (item._idlePrev) {\r\n      item._idlePrev._idleNext = item._idleNext;\r\n    }\r\n\r\n    if (item === this.head)\r\n      this.head = item._idleNext;\r\n    if (item === this.tail)\r\n      this.tail = item._idlePrev;\r\n\r\n    item._idleNext = null;\r\n    item._idlePrev = null;\r\n  }\r\n}\r\n\r\n// Create a single linked list instance only once at startup\r\nconst immediateQueue = new ImmediateList();\r\n\r\nfunction incRefCount() {\r\n  if (timeoutInfo[0]++ === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleTimerRef(true);\r\n  }\r\n}\r\n\r\nfunction decRefCount() {\r\n  if (--timeoutInfo[0] === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleTimerRef(false);\r\n  }\r\n}\r\n\r\n// Schedule or re-schedule a timer.\r\n// The item must have been enroll()'d first.\r\nfunction active(item) {\r\n  insertGuarded(item, true);\r\n}\r\n\r\n// Internal APIs that need timeouts should use `unrefActive()` instead of\r\n// `active()` so that they do not unnecessarily keep the process open.\r\nfunction unrefActive(item) {\r\n  insertGuarded(item, false);\r\n}\r\n\r\n// The underlying logic for scheduling or re-scheduling a timer.\r\n//\r\n// Appends a timer onto the end of an existing timers list, or creates a new\r\n// list if one does not already exist for the specified timeout duration.\r\nfunction insertGuarded(item, refed, start) {\r\n  const msecs = item._idleTimeout;\r\n  if (msecs < 0 || msecs === undefined)\r\n    return;\r\n\r\n  insert(item, msecs, start);\r\n\r\n  const isDestroyed = item._destroyed;\r\n  if (isDestroyed || !item[async_id_symbol]) {\r\n    item._destroyed = false;\r\n    initAsyncResource(item, 'Timeout');\r\n  }\r\n\r\n  if (isDestroyed) {\r\n    if (refed)\r\n      incRefCount();\r\n  } else if (refed === !item[kRefed]) {\r\n    if (refed)\r\n      incRefCount();\r\n    else\r\n      decRefCount();\r\n  }\r\n  item[kRefed] = refed;\r\n}\r\n\r\n// We need to use the binding as the receiver for fast API calls.\r\nfunction insert(item, msecs, start = binding.getLibuvNow()) {\r\n  // Truncate so that accuracy of sub-millisecond timers is not assumed.\r\n  msecs = MathTrunc(msecs);\r\n  item._idleStart = start;\r\n\r\n  // Use an existing list if there is one, otherwise we need to make a new one.\r\n  let list = timerListMap[msecs];\r\n  if (list === undefined) {\r\n    debug('no %d list was found in insert, creating a new one', msecs);\r\n    const expiry = start + msecs;\r\n    timerListMap[msecs] = list = new TimersList(expiry, msecs);\r\n    timerListQueue.insert(list);\r\n\r\n    if (nextExpiry > expiry) {\r\n      // We need to use the binding as the receiver for fast API calls.\r\n      binding.scheduleTimer(msecs);\r\n      nextExpiry = expiry;\r\n    }\r\n  }\r\n\r\n  L.append(list, item);\r\n}\r\n\r\nfunction setUnrefTimeout(callback, after) {\r\n  // Type checking identical to setTimeout()\r\n  validateFunction(callback, 'callback');\r\n\r\n  const timer = new Timeout(callback, after, undefined, false, false);\r\n  insert(timer, timer._idleTimeout);\r\n\r\n  return timer;\r\n}\r\n\r\n// Type checking used by timers.enroll() and Socket#setTimeout()\r\nfunction getTimerDuration(msecs, name) {\r\n  validateNumber(msecs, name);\r\n  if (msecs < 0 || !NumberIsFinite(msecs)) {\r\n    throw new ERR_OUT_OF_RANGE(name, 'a non-negative finite number', msecs);\r\n  }\r\n\r\n  // Ensure that msecs fits into signed int32\r\n  if (msecs > TIMEOUT_MAX) {\r\n    process.emitWarning(`${msecs} does not fit into a 32-bit signed integer.` +\r\n                        `\\nTimer duration was truncated to ${TIMEOUT_MAX}.`,\r\n                        'TimeoutOverflowWarning');\r\n    return TIMEOUT_MAX;\r\n  }\r\n\r\n  return msecs;\r\n}\r\n\r\nfunction compareTimersLists(a, b) {\r\n  const expiryDiff = a.expiry - b.expiry;\r\n  if (expiryDiff === 0) {\r\n    if (a.id < b.id)\r\n      return -1;\r\n    if (a.id > b.id)\r\n      return 1;\r\n  }\r\n  return expiryDiff;\r\n}\r\n\r\nfunction setPosition(node, pos) {\r\n  node.priorityQueuePosition = pos;\r\n}\r\n\r\nfunction getTimerCallbacks(runNextTicks) {\r\n  // If an uncaught exception was thrown during execution of immediateQueue,\r\n  // this queue will store all remaining Immediates that need to run upon\r\n  // resolution of all error handling (if process is still alive).\r\n  const outstandingQueue = new ImmediateList();\r\n\r\n  function processImmediate() {\r\n    const queue = outstandingQueue.head !== null ?\r\n      outstandingQueue : immediateQueue;\r\n    let immediate = queue.head;\r\n\r\n    // Clear the linked list early in case new `setImmediate()`\r\n    // calls occur while immediate callbacks are executed\r\n    if (queue !== outstandingQueue) {\r\n      queue.head = queue.tail = null;\r\n      immediateInfo[kHasOutstanding] = 1;\r\n    }\r\n\r\n    let prevImmediate;\r\n    let ranAtLeastOneImmediate = false;\r\n    while (immediate !== null) {\r\n      if (ranAtLeastOneImmediate)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneImmediate = true;\r\n\r\n      // It's possible for this current Immediate to be cleared while executing\r\n      // the next tick queue above, which means we need to use the previous\r\n      // Immediate's _idleNext which is guaranteed to not have been cleared.\r\n      if (immediate._destroyed) {\r\n        outstandingQueue.head = immediate = prevImmediate._idleNext;\r\n        continue;\r\n      }\r\n\r\n      // TODO(RaisinTen): Destroy and unref the Immediate after _onImmediate()\r\n      // gets executed, just like how Timeouts work.\r\n      immediate._destroyed = true;\r\n\r\n      immediateInfo[kCount]--;\r\n      if (immediate[kRefed])\r\n        immediateInfo[kRefCount]--;\r\n      immediate[kRefed] = null;\r\n\r\n      prevImmediate = immediate;\r\n\r\n      const asyncId = immediate[async_id_symbol];\r\n      emitBefore(asyncId, immediate[trigger_async_id_symbol], immediate);\r\n\r\n      try {\r\n        const argv = immediate._argv;\r\n        if (!argv)\r\n          immediate._onImmediate();\r\n        else\r\n          immediate._onImmediate(...argv);\r\n      } finally {\r\n        immediate._onImmediate = null;\r\n\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n\r\n        outstandingQueue.head = immediate = immediate._idleNext;\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    if (queue === outstandingQueue)\r\n      outstandingQueue.head = null;\r\n    immediateInfo[kHasOutstanding] = 0;\r\n  }\r\n\r\n\r\n  function processTimers(now) {\r\n    debug('process timer lists %d', now);\r\n    nextExpiry = Infinity;\r\n\r\n    let list;\r\n    let ranAtLeastOneList = false;\r\n    while ((list = timerListQueue.peek()) != null) {\r\n      if (list.expiry > now) {\r\n        nextExpiry = list.expiry;\r\n        return timeoutInfo[0] > 0 ? nextExpiry : -nextExpiry;\r\n      }\r\n      if (ranAtLeastOneList)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneList = true;\r\n      listOnTimeout(list, now);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function listOnTimeout(list, now) {\r\n    const msecs = list.msecs;\r\n\r\n    debug('timeout callback %d', msecs);\r\n\r\n    let ranAtLeastOneTimer = false;\r\n    let timer;\r\n    while ((timer = L.peek(list)) != null) {\r\n      const diff = now - timer._idleStart;\r\n\r\n      // Check if this loop iteration is too early for the next timer.\r\n      // This happens if there are more timers scheduled for later in the list.\r\n      if (diff < msecs) {\r\n        list.expiry = MathMax(timer._idleStart + msecs, now + 1);\r\n        list.id = timerListId++;\r\n        timerListQueue.percolateDown(1);\r\n        debug('%d list wait because diff is %d', msecs, diff);\r\n        return;\r\n      }\r\n\r\n      if (ranAtLeastOneTimer)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneTimer = true;\r\n\r\n      // The actual logic for when a timeout happens.\r\n      L.remove(timer);\r\n\r\n      const asyncId = timer[async_id_symbol];\r\n\r\n      if (!timer._onTimeout) {\r\n        if (!timer._destroyed) {\r\n          timer._destroyed = true;\r\n\r\n          if (timer[kRefed])\r\n            timeoutInfo[0]--;\r\n\r\n          if (destroyHooksExist())\r\n            emitDestroy(asyncId);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      emitBefore(asyncId, timer[trigger_async_id_symbol], timer);\r\n\r\n      let start;\r\n      if (timer._repeat) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        start = binding.getLibuvNow();\r\n      }\r\n\r\n      try {\r\n        const args = timer._timerArgs;\r\n        if (args === undefined)\r\n          timer._onTimeout();\r\n        else\r\n          ReflectApply(timer._onTimeout, timer, args);\r\n      } finally {\r\n        if (timer._repeat && timer._idleTimeout !== -1) {\r\n          timer._idleTimeout = timer._repeat;\r\n          insert(timer, timer._idleTimeout, start);\r\n        } else if (!timer._idleNext && !timer._idlePrev && !timer._destroyed) {\r\n          timer._destroyed = true;\r\n\r\n          if (timer[kRefed])\r\n            timeoutInfo[0]--;\r\n\r\n          if (destroyHooksExist())\r\n            emitDestroy(asyncId);\r\n        }\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    // If `L.peek(list)` returned nothing, the list was either empty or we have\r\n    // called all of the timer timeouts.\r\n    // As such, we can remove the list from the object map and\r\n    // the PriorityQueue.\r\n    debug('%d list empty', msecs);\r\n\r\n    // The current list may have been removed and recreated since the reference\r\n    // to `list` was created. Make sure they're the same instance of the list\r\n    // before destroying.\r\n    if (list === timerListMap[msecs]) {\r\n      delete timerListMap[msecs];\r\n      timerListQueue.shift();\r\n    }\r\n  }\r\n\r\n  return {\r\n    processImmediate,\r\n    processTimers,\r\n  };\r\n}\r\n\r\nclass Immediate {\r\n  constructor(callback, args) {\r\n    this._idleNext = null;\r\n    this._idlePrev = null;\r\n    this._onImmediate = callback;\r\n    this._argv = args;\r\n    this._destroyed = false;\r\n    this[kRefed] = false;\r\n\r\n    initAsyncResource(this, 'Immediate');\r\n\r\n    this.ref();\r\n    immediateInfo[kCount]++;\r\n\r\n    immediateQueue.append(this);\r\n  }\r\n\r\n  ref() {\r\n    if (this[kRefed] === false) {\r\n      this[kRefed] = true;\r\n\r\n      if (immediateInfo[kRefCount]++ === 0) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        binding.toggleImmediateRef(true);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    if (this[kRefed] === true) {\r\n      this[kRefed] = false;\r\n      if (--immediateInfo[kRefCount] === 0) {\r\n        // We need to use the binding as the receiver for fast API calls.\r\n        binding.toggleImmediateRef(false);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  hasRef() {\r\n    return !!this[kRefed];\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  TIMEOUT_MAX,\r\n  kTimeout: Symbol('timeout'), // For hiding Timeouts on other internals.\r\n  async_id_symbol,\r\n  trigger_async_id_symbol,\r\n  Timeout,\r\n  Immediate,\r\n  kRefed,\r\n  kHasPrimitive,\r\n  initAsyncResource,\r\n  setUnrefTimeout,\r\n  getTimerDuration,\r\n  immediateQueue,\r\n  getTimerCallbacks,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount,\r\n    kHasOutstanding,\r\n  },\r\n  active,\r\n  unrefActive,\r\n  insert,\r\n  timerListMap,\r\n  timerListQueue,\r\n  decRefCount,\r\n  incRefCount,\r\n};\r\n"
  },
  "11": {
    "metadata": {
      "scriptId": "11",
      "url": "node:internal/async_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 627,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ebf0f39bbafb218cf9a70d235d020a12891c3c4ef43866f98714a2b80eaf0c95",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 20709,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/async_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeSlice,\r\n  ErrorCaptureStackTrace,\r\n  ObjectDefineProperty,\r\n  ObjectPrototypeHasOwnProperty,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst { exitCodes: { kGenericUserError } } = internalBinding('errors');\r\n\r\nconst async_wrap = internalBinding('async_wrap');\r\nconst { setCallbackTrampoline } = async_wrap;\r\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\r\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\r\n * hooks for each type.\r\n *\r\n * async_id_fields is a Float64Array wrapping the double array of\r\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\r\n * the various asynchronous states of the application. These are:\r\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\r\n *    current execution stack.\r\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\r\n *    the resource corresponding to the current execution stack.\r\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\r\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\r\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\r\n *    of retrieving the triggerAsyncId value is:\r\n *    1. the value passed directly to the constructor\r\n *    2. value set in kDefaultTriggerAsyncId\r\n *    3. executionAsyncId of the current resource.\r\n *\r\n * async_ids_stack is a Float64Array that contains part of the async ID\r\n * stack. Each pushAsyncContext() call adds two doubles to it, and each\r\n * popAsyncContext() call removes two doubles from it.\r\n * It has a fixed size, so if that is exceeded, calls to the native\r\n * side are used instead in pushAsyncContext() and popAsyncContext().\r\n */\r\nconst {\r\n  async_hook_fields,\r\n  async_id_fields,\r\n  execution_async_resources,\r\n} = async_wrap;\r\n// Store the pair executionAsyncId and triggerAsyncId in a AliasedFloat64Array\r\n// in Environment::AsyncHooks::async_ids_stack_ which tracks the resource\r\n// responsible for the current execution stack. This is unwound as each resource\r\n// exits. In the case of a fatal exception this stack is emptied after calling\r\n// each hook's after() callback.\r\nconst {\r\n  pushAsyncContext: pushAsyncContext_,\r\n  popAsyncContext: popAsyncContext_,\r\n  executionAsyncResource: executionAsyncResource_,\r\n  clearAsyncIdStack,\r\n} = async_wrap;\r\n// Properties in active_hooks are used to keep track of the set of hooks being\r\n// executed in case another hook is enabled/disabled. The new set of hooks is\r\n// then restored once the active set of hooks is finished executing.\r\nconst active_hooks = {\r\n  // Array of all AsyncHooks that will be iterated whenever an async event\r\n  // fires. Using var instead of (preferably const) in order to assign\r\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\r\n  // execution.\r\n  array: [],\r\n  // Use a counter to track nested calls of async hook callbacks and make sure\r\n  // the active_hooks.array isn't altered mid execution.\r\n  call_depth: 0,\r\n  // Use to temporarily store and updated active_hooks.array if the user\r\n  // enables or disables a hook while hooks are being processed. If a hook is\r\n  // enabled() or disabled() during hook execution then the current set of\r\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\r\n  // subsequent changes are on the duplicated array. When all hooks have\r\n  // completed executing active_hooks.tmp_array is assigned to\r\n  // active_hooks.array.\r\n  tmp_array: null,\r\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\r\n  // async_hook_fields can't be reassigned, store each uint32 in an array that\r\n  // is written back to async_hook_fields when active_hooks.array is restored.\r\n  tmp_fields: null,\r\n};\r\n\r\nconst { registerDestroyHook } = async_wrap;\r\nconst { enqueueMicrotask } = internalBinding('task_queue');\r\nconst { resource_symbol, owner_symbol } = internalBinding('symbols');\r\n\r\n// Each constant tracks how many callbacks there are for any given step of\r\n// async execution. These are tracked so if the user didn't include callbacks\r\n// for a given step, that step can bail out early.\r\nconst {\r\n  kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n  kCheck, kExecutionAsyncId, kAsyncIdCounter, kTriggerAsyncId,\r\n  kDefaultTriggerAsyncId, kStackLength, kUsesExecutionAsyncResource,\r\n} = async_wrap.constants;\r\n\r\nconst { async_id_symbol,\r\n        trigger_async_id_symbol } = internalBinding('symbols');\r\n\r\n// Lazy load of internal/util/inspect;\r\nlet inspect;\r\n\r\n// Used in AsyncHook and AsyncResource.\r\nconst init_symbol = Symbol('init');\r\nconst before_symbol = Symbol('before');\r\nconst after_symbol = Symbol('after');\r\nconst destroy_symbol = Symbol('destroy');\r\nconst promise_resolve_symbol = Symbol('promiseResolve');\r\nconst emitBeforeNative = emitHookFactory(before_symbol, 'emitBeforeNative');\r\nconst emitAfterNative = emitHookFactory(after_symbol, 'emitAfterNative');\r\nconst emitDestroyNative = emitHookFactory(destroy_symbol, 'emitDestroyNative');\r\nconst emitPromiseResolveNative =\r\n    emitHookFactory(promise_resolve_symbol, 'emitPromiseResolveNative');\r\n\r\nlet domain_cb;\r\nfunction useDomainTrampoline(fn) {\r\n  domain_cb = fn;\r\n}\r\n\r\nfunction callbackTrampoline(asyncId, resource, cb, ...args) {\r\n  const index = async_hook_fields[kStackLength] - 1;\r\n  execution_async_resources[index] = resource;\r\n\r\n  if (asyncId !== 0 && hasHooks(kBefore))\r\n    emitBeforeNative(asyncId);\r\n\r\n  let result;\r\n  if (asyncId === 0 && typeof domain_cb === 'function') {\r\n    args.unshift(cb);\r\n    result = domain_cb.apply(this, args);\r\n  } else {\r\n    result = cb.apply(this, args);\r\n  }\r\n\r\n  if (asyncId !== 0 && hasHooks(kAfter))\r\n    emitAfterNative(asyncId);\r\n\r\n  execution_async_resources.pop();\r\n  return result;\r\n}\r\n\r\nconst topLevelResource = {};\r\n\r\nfunction executionAsyncResource() {\r\n  // Indicate to the native layer that this function is likely to be used,\r\n  // in which case it will inform JS about the current async resource via\r\n  // the trampoline above.\r\n  async_hook_fields[kUsesExecutionAsyncResource] = 1;\r\n\r\n  const index = async_hook_fields[kStackLength] - 1;\r\n  if (index === -1) return topLevelResource;\r\n  const resource = execution_async_resources[index] ||\r\n    executionAsyncResource_(index);\r\n  return lookupPublicResource(resource);\r\n}\r\n\r\nfunction inspectExceptionValue(e) {\r\n  inspect ??= require('internal/util/inspect').inspect;\r\n  return { message: inspect(e) };\r\n}\r\n\r\n// Used to fatally abort the process if a callback throws.\r\nfunction fatalError(e) {\r\n  if (typeof e?.stack === 'string') {\r\n    process._rawDebug(e.stack);\r\n  } else {\r\n    const o = inspectExceptionValue(e);\r\n    ErrorCaptureStackTrace(o, fatalError);\r\n    process._rawDebug(o.stack);\r\n  }\r\n\r\n  const { getOptionValue } = require('internal/options');\r\n  if (getOptionValue('--abort-on-uncaught-exception')) {\r\n    process.abort();\r\n  }\r\n  process.exit(kGenericUserError);\r\n}\r\n\r\nfunction lookupPublicResource(resource) {\r\n  if (typeof resource !== 'object' || resource === null) return resource;\r\n  // TODO(addaleax): Merge this with owner_symbol and use it across all\r\n  // AsyncWrap instances.\r\n  const publicResource = resource[resource_symbol];\r\n  if (publicResource !== undefined)\r\n    return publicResource;\r\n  return resource;\r\n}\r\n\r\n// Emit From Native //\r\n\r\n// Used by C++ to call all init() callbacks. Because some state can be setup\r\n// from C++ there's no need to perform all the same operations as in\r\n// emitInitScript.\r\nfunction emitInitNative(asyncId, type, triggerAsyncId, resource) {\r\n  active_hooks.call_depth += 1;\r\n  resource = lookupPublicResource(resource);\r\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\r\n  try {\r\n    // Using var here instead of let because \"for (var ...)\" is faster than let.\r\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\r\n    // eslint-disable-next-line no-var\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\r\n        active_hooks.array[i][init_symbol](\r\n          asyncId, type, triggerAsyncId,\r\n          resource,\r\n        );\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case active_hooks.tmp_array\r\n  // will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\n// Called from native. The asyncId stack handling is taken care of there\r\n// before this is called.\r\nfunction emitHook(symbol, asyncId) {\r\n  active_hooks.call_depth += 1;\r\n  // Use a single try/catch for all hook to avoid setting up one per\r\n  // iteration.\r\n  try {\r\n    // Using var here instead of let because \"for (var ...)\" is faster than let.\r\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\r\n    // eslint-disable-next-line no-var\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][symbol] === 'function') {\r\n        active_hooks.array[i][symbol](asyncId);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case\r\n  // active_hooks.tmp_array will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\nfunction emitHookFactory(symbol, name) {\r\n  const fn = emitHook.bind(undefined, symbol);\r\n\r\n  // Set the name property of the function as it looks good in the stack trace.\r\n  ObjectDefineProperty(fn, 'name', {\r\n    __proto__: null,\r\n    value: name,\r\n  });\r\n  return fn;\r\n}\r\n\r\n// Manage Active Hooks //\r\n\r\nfunction getHookArrays() {\r\n  if (active_hooks.call_depth === 0)\r\n    return [active_hooks.array, async_hook_fields];\r\n  // If this hook is being enabled while in the middle of processing the array\r\n  // of currently active hooks then duplicate the current set of active hooks\r\n  // and store this there. This shouldn't fire until the next time hooks are\r\n  // processed.\r\n  if (active_hooks.tmp_array === null)\r\n    storeActiveHooks();\r\n  return [active_hooks.tmp_array, active_hooks.tmp_fields];\r\n}\r\n\r\n\r\nfunction storeActiveHooks() {\r\n  active_hooks.tmp_array = ArrayPrototypeSlice(active_hooks.array);\r\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\r\n  // 4. So do this the long way.\r\n  active_hooks.tmp_fields = [];\r\n  copyHooks(active_hooks.tmp_fields, async_hook_fields);\r\n}\r\n\r\nfunction copyHooks(destination, source) {\r\n  destination[kInit] = source[kInit];\r\n  destination[kBefore] = source[kBefore];\r\n  destination[kAfter] = source[kAfter];\r\n  destination[kDestroy] = source[kDestroy];\r\n  destination[kPromiseResolve] = source[kPromiseResolve];\r\n}\r\n\r\n\r\n// Then restore the correct hooks array in case any hooks were added/removed\r\n// during hook callback execution.\r\nfunction restoreActiveHooks() {\r\n  active_hooks.array = active_hooks.tmp_array;\r\n  copyHooks(async_hook_fields, active_hooks.tmp_fields);\r\n\r\n  active_hooks.tmp_array = null;\r\n  active_hooks.tmp_fields = null;\r\n}\r\n\r\nfunction trackPromise(promise, parent) {\r\n  if (promise[async_id_symbol]) {\r\n    return;\r\n  }\r\n\r\n  // Get trigger id from parent async id before making the async id of the\r\n  // child so if a new one must be made it will be lower than the child.\r\n  const triggerAsyncId = parent ? getOrSetAsyncId(parent) :\r\n    getDefaultTriggerAsyncId();\r\n\r\n  promise[async_id_symbol] = newAsyncId();\r\n  promise[trigger_async_id_symbol] = triggerAsyncId;\r\n}\r\n\r\nfunction promiseInitHook(promise, parent) {\r\n  trackPromise(promise, parent);\r\n  const asyncId = promise[async_id_symbol];\r\n  const triggerAsyncId = promise[trigger_async_id_symbol];\r\n  emitInitScript(asyncId, 'PROMISE', triggerAsyncId, promise);\r\n}\r\n\r\nfunction promiseInitHookWithDestroyTracking(promise, parent) {\r\n  promiseInitHook(promise, parent);\r\n  destroyTracking(promise, parent);\r\n}\r\n\r\nfunction destroyTracking(promise, parent) {\r\n  trackPromise(promise, parent);\r\n  const asyncId = promise[async_id_symbol];\r\n  registerDestroyHook(promise, asyncId);\r\n}\r\n\r\nfunction promiseBeforeHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  const triggerId = promise[trigger_async_id_symbol];\r\n  emitBeforeScript(asyncId, triggerId, promise);\r\n}\r\n\r\nfunction promiseAfterHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  if (hasHooks(kAfter)) {\r\n    emitAfterNative(asyncId);\r\n  }\r\n  if (asyncId === executionAsyncId()) {\r\n    // This condition might not be true if async_hooks was enabled during\r\n    // the promise callback execution.\r\n    // Popping it off the stack can be skipped in that case, because it is\r\n    // known that it would correspond to exactly one call with\r\n    // PromiseHookType::kBefore that was not witnessed by the PromiseHook.\r\n    popAsyncContext(asyncId);\r\n  }\r\n}\r\n\r\nfunction promiseResolveHook(promise) {\r\n  trackPromise(promise);\r\n  const asyncId = promise[async_id_symbol];\r\n  emitPromiseResolveNative(asyncId);\r\n}\r\n\r\nlet wantPromiseHook = false;\r\nfunction enableHooks() {\r\n  async_hook_fields[kCheck] += 1;\r\n\r\n  setCallbackTrampoline(callbackTrampoline);\r\n}\r\n\r\nlet stopPromiseHook;\r\nfunction updatePromiseHookMode() {\r\n  wantPromiseHook = true;\r\n  let initHook;\r\n  if (initHooksExist()) {\r\n    initHook = destroyHooksExist() ? promiseInitHookWithDestroyTracking :\r\n      promiseInitHook;\r\n  } else if (destroyHooksExist()) {\r\n    initHook = destroyTracking;\r\n  }\r\n  if (stopPromiseHook) stopPromiseHook();\r\n  const promiseHooks = require('internal/promise_hooks');\r\n  stopPromiseHook = promiseHooks.createHook({\r\n    init: initHook,\r\n    before: promiseBeforeHook,\r\n    after: promiseAfterHook,\r\n    settled: promiseResolveHooksExist() ? promiseResolveHook : undefined,\r\n  });\r\n}\r\n\r\nfunction disableHooks() {\r\n  async_hook_fields[kCheck] -= 1;\r\n\r\n  wantPromiseHook = false;\r\n\r\n  setCallbackTrampoline();\r\n\r\n  // Delay the call to `disablePromiseHook()` because we might currently be\r\n  // between the `before` and `after` calls of a Promise.\r\n  enqueueMicrotask(disablePromiseHookIfNecessary);\r\n}\r\n\r\nfunction disablePromiseHookIfNecessary() {\r\n  if (!wantPromiseHook && stopPromiseHook) {\r\n    stopPromiseHook();\r\n  }\r\n}\r\n\r\n// Internal Embedder API //\r\n\r\n// Increment the internal id counter and return the value. Important that the\r\n// counter increment first. Since it's done the same way in\r\n// Environment::new_async_uid()\r\nfunction newAsyncId() {\r\n  return ++async_id_fields[kAsyncIdCounter];\r\n}\r\n\r\nfunction getOrSetAsyncId(object) {\r\n  if (ObjectPrototypeHasOwnProperty(object, async_id_symbol)) {\r\n    return object[async_id_symbol];\r\n  }\r\n\r\n  return object[async_id_symbol] = newAsyncId();\r\n}\r\n\r\n\r\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\r\n// the user to safeguard this call and make sure it's zero'd out when the\r\n// constructor is complete.\r\nfunction getDefaultTriggerAsyncId() {\r\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  // If defaultTriggerAsyncId isn't set, use the executionAsyncId\r\n  if (defaultTriggerAsyncId < 0)\r\n    return async_id_fields[kExecutionAsyncId];\r\n  return defaultTriggerAsyncId;\r\n}\r\n\r\n\r\nfunction clearDefaultTriggerAsyncId() {\r\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\r\n}\r\n\r\n/**\r\n * Sets a default top level trigger ID to be used\r\n * @template {Array<unknown>} T\r\n * @template {unknown} R\r\n * @param {number} triggerAsyncId\r\n * @param { (...T: args) => R } block\r\n * @param  {T} args\r\n * @returns {R}\r\n */\r\nfunction defaultTriggerAsyncIdScope(triggerAsyncId, block, ...args) {\r\n  if (triggerAsyncId === undefined)\r\n    return block.apply(null, args);\r\n  // CHECK(NumberIsSafeInteger(triggerAsyncId))\r\n  // CHECK(triggerAsyncId > 0)\r\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\r\n\r\n  try {\r\n    return block.apply(null, args);\r\n  } finally {\r\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\r\n  }\r\n}\r\n\r\nfunction hasHooks(key) {\r\n  return async_hook_fields[key] > 0;\r\n}\r\n\r\nfunction enabledHooksExist() {\r\n  return hasHooks(kCheck);\r\n}\r\n\r\nfunction initHooksExist() {\r\n  return hasHooks(kInit);\r\n}\r\n\r\nfunction afterHooksExist() {\r\n  return hasHooks(kAfter);\r\n}\r\n\r\nfunction destroyHooksExist() {\r\n  return hasHooks(kDestroy);\r\n}\r\n\r\nfunction promiseResolveHooksExist() {\r\n  return hasHooks(kPromiseResolve);\r\n}\r\n\r\n\r\nfunction emitInitScript(asyncId, type, triggerAsyncId, resource) {\r\n  // Short circuit all checks for the common case. Which is that no hooks have\r\n  // been set. Do this to remove performance impact for embedders (and core).\r\n  if (!hasHooks(kInit))\r\n    return;\r\n\r\n  if (triggerAsyncId === null) {\r\n    triggerAsyncId = getDefaultTriggerAsyncId();\r\n  }\r\n\r\n  emitInitNative(asyncId, type, triggerAsyncId, resource);\r\n}\r\n\r\n\r\nfunction emitBeforeScript(asyncId, triggerAsyncId, resource) {\r\n  pushAsyncContext(asyncId, triggerAsyncId, resource);\r\n\r\n  if (hasHooks(kBefore))\r\n    emitBeforeNative(asyncId);\r\n}\r\n\r\n\r\nfunction emitAfterScript(asyncId) {\r\n  if (hasHooks(kAfter))\r\n    emitAfterNative(asyncId);\r\n\r\n  popAsyncContext(asyncId);\r\n}\r\n\r\n\r\nfunction emitDestroyScript(asyncId) {\r\n  // Return early if there are no destroy callbacks, or invalid asyncId.\r\n  if (!hasHooks(kDestroy) || asyncId <= 0)\r\n    return;\r\n  async_wrap.queueDestroyAsyncId(asyncId);\r\n}\r\n\r\n\r\nfunction hasAsyncIdStack() {\r\n  return hasHooks(kStackLength);\r\n}\r\n\r\n\r\n// This is the equivalent of the native push_async_ids() call.\r\nfunction pushAsyncContext(asyncId, triggerAsyncId, resource) {\r\n  const offset = async_hook_fields[kStackLength];\r\n  execution_async_resources[offset] = resource;\r\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\r\n    return pushAsyncContext_(asyncId, triggerAsyncId);\r\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\r\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\r\n  async_hook_fields[kStackLength]++;\r\n  async_id_fields[kExecutionAsyncId] = asyncId;\r\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\r\n}\r\n\r\n\r\n// This is the equivalent of the native pop_async_ids() call.\r\nfunction popAsyncContext(asyncId) {\r\n  const stackLength = async_hook_fields[kStackLength];\r\n  if (stackLength === 0) return false;\r\n\r\n  if (enabledHooksExist() && async_id_fields[kExecutionAsyncId] !== asyncId) {\r\n    // Do the same thing as the native code (i.e. crash hard).\r\n    return popAsyncContext_(asyncId);\r\n  }\r\n\r\n  const offset = stackLength - 1;\r\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\r\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\r\n  execution_async_resources.pop();\r\n  async_hook_fields[kStackLength] = offset;\r\n  return offset > 0;\r\n}\r\n\r\n\r\nfunction executionAsyncId() {\r\n  return async_id_fields[kExecutionAsyncId];\r\n}\r\n\r\nfunction triggerAsyncId() {\r\n  return async_id_fields[kTriggerAsyncId];\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  // Private API\r\n  getHookArrays,\r\n  symbols: {\r\n    async_id_symbol, trigger_async_id_symbol,\r\n    init_symbol, before_symbol, after_symbol, destroy_symbol,\r\n    promise_resolve_symbol, owner_symbol,\r\n  },\r\n  constants: {\r\n    kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n  },\r\n  enableHooks,\r\n  disableHooks,\r\n  updatePromiseHookMode,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  executionAsyncResource,\r\n  // Internal Embedder API\r\n  newAsyncId,\r\n  getOrSetAsyncId,\r\n  getDefaultTriggerAsyncId,\r\n  defaultTriggerAsyncIdScope,\r\n  enabledHooksExist,\r\n  initHooksExist,\r\n  afterHooksExist,\r\n  destroyHooksExist,\r\n  emitInit: emitInitScript,\r\n  emitBefore: emitBeforeScript,\r\n  emitAfter: emitAfterScript,\r\n  emitDestroy: emitDestroyScript,\r\n  pushAsyncContext,\r\n  popAsyncContext,\r\n  registerDestroyHook,\r\n  useDomainTrampoline,\r\n  nativeHooks: {\r\n    init: emitInitNative,\r\n    before: emitBeforeNative,\r\n    after: emitAfterNative,\r\n    destroy: emitDestroyNative,\r\n    promise_resolve: emitPromiseResolveNative,\r\n  },\r\n  asyncWrap: {\r\n    Providers: async_wrap.Providers,\r\n  },\r\n};\r\n"
  },
  "12": {
    "metadata": {
      "scriptId": "12",
      "url": "node:internal/validators",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 604,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b023b303abf6b875748aeb9fea798906327655d8bc112453b6e45bcea71206c6",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17309,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/validators"
    },
    "source": "/* eslint jsdoc/require-jsdoc: \"error\" */\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  NumberIsInteger,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  NumberParseInt,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RegExpPrototypeExec,\r\n  String,\r\n  StringPrototypeToUpperCase,\r\n  StringPrototypeTrim,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE: { HideStackFramesError: ERR_INVALID_ARG_TYPE },\r\n    ERR_INVALID_ARG_VALUE: { HideStackFramesError: ERR_INVALID_ARG_VALUE },\r\n    ERR_OUT_OF_RANGE: { HideStackFramesError: ERR_OUT_OF_RANGE },\r\n    ERR_SOCKET_BAD_PORT: { HideStackFramesError: ERR_SOCKET_BAD_PORT },\r\n    ERR_UNKNOWN_SIGNAL: { HideStackFramesError: ERR_UNKNOWN_SIGNAL },\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst { normalizeEncoding } = require('internal/util');\r\nconst {\r\n  isAsyncFunction,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\nconst { signals } = internalBinding('constants').os;\r\n\r\n/**\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\r\nfunction isInt32(value) {\r\n  return value === (value | 0);\r\n}\r\n\r\n/**\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\r\nfunction isUint32(value) {\r\n  return value === (value >>> 0);\r\n}\r\n\r\nconst octalReg = /^[0-7]+$/;\r\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\r\n\r\n/**\r\n * Parse and validate values that will be converted into mode_t (the S_*\r\n * constants). Only valid numbers and octal strings are allowed. They could be\r\n * converted to 32-bit unsigned integers or non-negative signed integers in the\r\n * C++ land, but any value higher than 0o777 will result in platform-specific\r\n * behaviors.\r\n * @param {*} value Values to be validated\r\n * @param {string} name Name of the argument\r\n * @param {number} [def] If specified, will be returned for invalid values\r\n * @returns {number}\r\n */\r\nfunction parseFileMode(value, name, def) {\r\n  value ??= def;\r\n  if (typeof value === 'string') {\r\n    if (RegExpPrototypeExec(octalReg, value) === null) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);\r\n    }\r\n    value = NumberParseInt(value, 8);\r\n  }\r\n\r\n  validateUint32(value, name);\r\n  return value;\r\n}\r\n\r\n/**\r\n * @callback validateInteger\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateInteger} */\r\nconst validateInteger = hideStackFrames(\r\n  (value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {\r\n    if (typeof value !== 'number')\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    if (!NumberIsInteger(value))\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    if (value < min || value > max)\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n  },\r\n);\r\n\r\n/**\r\n * @callback validateInt32\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateInt32} */\r\nconst validateInt32 = hideStackFrames(\r\n  (value, name, min = -2147483648, max = 2147483647) => {\r\n    // The defaults for min and max correspond to the limits of 32-bit integers.\r\n    if (typeof value !== 'number') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    }\r\n    if (!NumberIsInteger(value)) {\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    }\r\n    if (value < min || value > max) {\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n  },\r\n);\r\n\r\n/**\r\n * @callback validateUint32\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {boolean} [positive=false]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateUint32} */\r\nconst validateUint32 = hideStackFrames((value, name, positive = false) => {\r\n  if (typeof value !== 'number') {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n  }\r\n  if (!NumberIsInteger(value)) {\r\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n  }\r\n  const min = positive ? 1 : 0;\r\n  // 2 ** 32 === 4294967296\r\n  const max = 4_294_967_295;\r\n  if (value < min || value > max) {\r\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateString\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is string}\r\n */\r\n\r\n/** @type {validateString} */\r\nconst validateString = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'string')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n});\r\n\r\n/**\r\n * @callback validateNumber\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [min]\r\n * @param {number} [max]\r\n * @returns {asserts value is number}\r\n */\r\n\r\n/** @type {validateNumber} */\r\nconst validateNumber = hideStackFrames((value, name, min = undefined, max) => {\r\n  if (typeof value !== 'number')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n\r\n  if ((min != null && value < min) || (max != null && value > max) ||\r\n    ((min != null || max != null) && NumberIsNaN(value))) {\r\n    throw new ERR_OUT_OF_RANGE(\r\n      name,\r\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`,\r\n      value);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateOneOf\r\n * @template T\r\n * @param {T} value\r\n * @param {string} name\r\n * @param {T[]} oneOf\r\n */\r\n\r\n/** @type {validateOneOf} */\r\nconst validateOneOf = hideStackFrames((value, name, oneOf) => {\r\n  if (!ArrayPrototypeIncludes(oneOf, value)) {\r\n    const allowed = ArrayPrototypeJoin(\r\n      ArrayPrototypeMap(oneOf, (v) =>\r\n        (typeof v === 'string' ? `'${v}'` : String(v))),\r\n      ', ');\r\n    const reason = 'must be one of: ' + allowed;\r\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBoolean\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is boolean}\r\n */\r\n\r\n/** @type {validateBoolean} */\r\nconst validateBoolean = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value);\r\n});\r\n\r\nconst kValidateObjectNone = 0;\r\nconst kValidateObjectAllowNullable = 1 << 0;\r\nconst kValidateObjectAllowArray = 1 << 1;\r\nconst kValidateObjectAllowFunction = 1 << 2;\r\nconst kValidateObjectAllowObjects = kValidateObjectAllowArray |\r\n  kValidateObjectAllowFunction;\r\nconst kValidateObjectAllowObjectsAndNull = kValidateObjectAllowNullable |\r\n  kValidateObjectAllowArray |\r\n  kValidateObjectAllowFunction;\r\n\r\n/**\r\n * @callback validateObject\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [options]\r\n */\r\n\r\n/** @type {validateObject} */\r\nconst validateObject = hideStackFrames(\r\n  (value, name, options = kValidateObjectNone) => {\r\n    if (options === kValidateObjectNone) {\r\n      if (value === null || ArrayIsArray(value)) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      if (typeof value !== 'object') {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n    } else {\r\n      const throwOnNullable = (kValidateObjectAllowNullable & options) === 0;\r\n\r\n      if (throwOnNullable && value === null) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      const throwOnArray = (kValidateObjectAllowArray & options) === 0;\r\n\r\n      if (throwOnArray && ArrayIsArray(value)) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n\r\n      const throwOnFunction = (kValidateObjectAllowFunction & options) === 0;\r\n      const typeofValue = typeof value;\r\n\r\n      if (typeofValue !== 'object' && (throwOnFunction || typeofValue !== 'function')) {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\r\n      }\r\n    }\r\n  });\r\n\r\n/**\r\n * @callback validateDictionary - We are using the Web IDL Standard definition\r\n *                                of \"dictionary\" here, which means any value\r\n *                                whose Type is either Undefined, Null, or\r\n *                                Object (which includes functions).\r\n * @param {*} value\r\n * @param {string} name\r\n * @see https://webidl.spec.whatwg.org/#es-dictionary\r\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\r\n */\r\n\r\n/** @type {validateDictionary} */\r\nconst validateDictionary = hideStackFrames(\r\n  (value, name) => {\r\n    if (value != null && typeof value !== 'object' && typeof value !== 'function') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'a dictionary', value);\r\n    }\r\n  });\r\n\r\n/**\r\n * @callback validateArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @param {number} [minLength]\r\n * @returns {asserts value is any[]}\r\n */\r\n\r\n/** @type {validateArray} */\r\nconst validateArray = hideStackFrames((value, name, minLength = 0) => {\r\n  if (!ArrayIsArray(value)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Array', value);\r\n  }\r\n  if (value.length < minLength) {\r\n    const reason = `must be longer than ${minLength}`;\r\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateStringArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is string[]}\r\n */\r\n\r\n/** @type {validateStringArray} */\r\nconst validateStringArray = hideStackFrames((value, name) => {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; ++i) {\r\n    // Don't use validateString here for performance reasons, as\r\n    // we would generate intermediate strings for the name.\r\n    if (typeof value[i] !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}[${i}]`, 'string', value[i]);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBooleanArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is boolean[]}\r\n */\r\n\r\n/** @type {validateBooleanArray} */\r\nconst validateBooleanArray = hideStackFrames((value, name) => {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; ++i) {\r\n    // Don't use validateBoolean here for performance reasons, as\r\n    // we would generate intermediate strings for the name.\r\n    if (value[i] !== true && value[i] !== false) {\r\n      throw new ERR_INVALID_ARG_TYPE(`${name}[${i}]`, 'boolean', value[i]);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateAbortSignalArray\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is AbortSignal[]}\r\n */\r\n\r\n/** @type {validateAbortSignalArray} */\r\nfunction validateAbortSignalArray(value, name) {\r\n  validateArray(value, name);\r\n  for (let i = 0; i < value.length; i++) {\r\n    const signal = value[i];\r\n    const indexedName = `${name}[${i}]`;\r\n    if (signal == null) {\r\n      throw new ERR_INVALID_ARG_TYPE(indexedName, 'AbortSignal', signal);\r\n    }\r\n    validateAbortSignal(signal, indexedName);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} signal\r\n * @param {string} [name='signal']\r\n * @returns {asserts signal is keyof signals}\r\n */\r\nconst validateSignalName = hideStackFrames((signal, name = 'signal') => {\r\n  validateString(signal, name);\r\n\r\n  if (signals[signal] === undefined) {\r\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\r\n      throw new ERR_UNKNOWN_SIGNAL(signal +\r\n                                   ' (signals must use all capital letters)');\r\n    }\r\n\r\n    throw new ERR_UNKNOWN_SIGNAL(signal);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateBuffer\r\n * @param {*} buffer\r\n * @param {string} [name='buffer']\r\n * @returns {asserts buffer is ArrayBufferView}\r\n */\r\n\r\n/** @type {validateBuffer} */\r\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\r\n  if (!isArrayBufferView(buffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name,\r\n                                   ['Buffer', 'TypedArray', 'DataView'],\r\n                                   buffer);\r\n  }\r\n});\r\n\r\n/**\r\n * @param {string} data\r\n * @param {string} encoding\r\n */\r\nconst validateEncoding = hideStackFrames((data, encoding) => {\r\n  const normalizedEncoding = normalizeEncoding(encoding);\r\n  const length = data.length;\r\n\r\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('encoding', encoding,\r\n                                    `is invalid for data of length ${length}`);\r\n  }\r\n});\r\n\r\n/**\r\n * Check that the port number is not NaN when coerced to a number,\r\n * is an integer and that it falls within the legal range of port numbers.\r\n * @param {*} port\r\n * @param {string} [name='Port']\r\n * @param {boolean} [allowZero=true]\r\n * @returns {number}\r\n */\r\nconst validatePort = hideStackFrames((port, name = 'Port', allowZero = true) => {\r\n  if ((typeof port !== 'number' && typeof port !== 'string') ||\r\n      (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\r\n      +port !== (+port >>> 0) ||\r\n      port > 0xFFFF ||\r\n      (port === 0 && !allowZero)) {\r\n    throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);\r\n  }\r\n  return port | 0;\r\n});\r\n\r\n/**\r\n * @callback validateAbortSignal\r\n * @param {*} signal\r\n * @param {string} name\r\n */\r\n\r\n/** @type {validateAbortSignal} */\r\nconst validateAbortSignal = hideStackFrames((signal, name) => {\r\n  if (signal !== undefined &&\r\n      (signal === null ||\r\n       typeof signal !== 'object' ||\r\n       !('aborted' in signal))) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal);\r\n  }\r\n});\r\n\r\n/**\r\n * @callback validateFunction\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is Function}\r\n */\r\n\r\n/** @type {validateFunction} */\r\nconst validateFunction = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'function')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Function', value);\r\n});\r\n\r\n/**\r\n * @callback validatePlainFunction\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is Function}\r\n */\r\n\r\n/** @type {validatePlainFunction} */\r\nconst validatePlainFunction = hideStackFrames((value, name) => {\r\n  if (typeof value !== 'function' || isAsyncFunction(value))\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'Function', value);\r\n});\r\n\r\n/**\r\n * @callback validateUndefined\r\n * @param {*} value\r\n * @param {string} name\r\n * @returns {asserts value is undefined}\r\n */\r\n\r\n/** @type {validateUndefined} */\r\nconst validateUndefined = hideStackFrames((value, name) => {\r\n  if (value !== undefined)\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'undefined', value);\r\n});\r\n\r\n/**\r\n * @template T\r\n * @param {T} value\r\n * @param {string} name\r\n * @param {T[]} union\r\n */\r\nfunction validateUnion(value, name, union) {\r\n  if (!ArrayPrototypeIncludes(union, value)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, '|')}')`, value);\r\n  }\r\n}\r\n\r\n/*\r\n  The rules for the Link header field are described here:\r\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\r\n\r\n  This regex validates any string surrounded by angle brackets\r\n  (not necessarily a valid URI reference) followed by zero or more\r\n  link-params separated by semicolons.\r\n*/\r\nconst linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/;\r\n\r\n/**\r\n * @param {any} value\r\n * @param {string} name\r\n */\r\nconst validateLinkHeaderFormat = hideStackFrames((value, name) => {\r\n  if (\r\n    typeof value === 'undefined' ||\r\n    !RegExpPrototypeExec(linkValueRegExp, value)\r\n  ) {\r\n    throw new ERR_INVALID_ARG_VALUE(\r\n      name,\r\n      value,\r\n      'must be an array or string of format \"</styles.css>; rel=preload; as=style\"',\r\n    );\r\n  }\r\n});\r\n\r\nconst validateInternalField = hideStackFrames((object, fieldKey, className) => {\r\n  if (typeof object !== 'object' || object === null || !ObjectPrototypeHasOwnProperty(object, fieldKey)) {\r\n    throw new ERR_INVALID_ARG_TYPE('this', className, object);\r\n  }\r\n});\r\n\r\n/**\r\n * @param {any} hints\r\n * @return {string}\r\n */\r\nconst validateLinkHeaderValue = hideStackFrames((hints) => {\r\n  if (typeof hints === 'string') {\r\n    validateLinkHeaderFormat.withoutStackTrace(hints, 'hints');\r\n    return hints;\r\n  } else if (ArrayIsArray(hints)) {\r\n    const hintsLength = hints.length;\r\n    let result = '';\r\n\r\n    if (hintsLength === 0) {\r\n      return result;\r\n    }\r\n\r\n    for (let i = 0; i < hintsLength; i++) {\r\n      const link = hints[i];\r\n      validateLinkHeaderFormat.withoutStackTrace(link, 'hints');\r\n      result += link;\r\n\r\n      if (i !== hintsLength - 1) {\r\n        result += ', ';\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE(\r\n    'hints',\r\n    hints,\r\n    'must be an array or string of format \"</styles.css>; rel=preload; as=style\"',\r\n  );\r\n});\r\n\r\nmodule.exports = {\r\n  isInt32,\r\n  isUint32,\r\n  parseFileMode,\r\n  validateArray,\r\n  validateStringArray,\r\n  validateBooleanArray,\r\n  validateAbortSignalArray,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateDictionary,\r\n  validateEncoding,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateInteger,\r\n  validateNumber,\r\n  validateObject,\r\n  kValidateObjectNone,\r\n  kValidateObjectAllowNullable,\r\n  kValidateObjectAllowArray,\r\n  kValidateObjectAllowFunction,\r\n  kValidateObjectAllowObjects,\r\n  kValidateObjectAllowObjectsAndNull,\r\n  validateOneOf,\r\n  validatePlainFunction,\r\n  validatePort,\r\n  validateSignalName,\r\n  validateString,\r\n  validateUint32,\r\n  validateUndefined,\r\n  validateUnion,\r\n  validateAbortSignal,\r\n  validateLinkHeaderValue,\r\n  validateInternalField,\r\n};\r\n"
  },
  "13": {
    "metadata": {
      "scriptId": "13",
      "url": "node:internal/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 947,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "98e9729a8b5b37936a218bc59c3ff148746e11cbbc434d389936106aeeec1f0e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 26804,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeCall,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectGetPrototypeOf,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  Promise,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeGetDotAll,\r\n  RegExpPrototypeGetGlobal,\r\n  RegExpPrototypeGetHasIndices,\r\n  RegExpPrototypeGetIgnoreCase,\r\n  RegExpPrototypeGetMultiline,\r\n  RegExpPrototypeGetSource,\r\n  RegExpPrototypeGetSticky,\r\n  RegExpPrototypeGetUnicode,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  SafeWeakRef,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeReplace,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeToUpperCase,\r\n  Symbol,\r\n  SymbolFor,\r\n  SymbolReplace,\r\n  SymbolSplit,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_NO_CRYPTO,\r\n    ERR_UNKNOWN_SIGNAL,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n  overrideStackTrace,\r\n  uvErrmapGet,\r\n} = require('internal/errors');\r\nconst { signals } = internalBinding('constants').os;\r\nconst {\r\n  isArrayBufferDetached: _isArrayBufferDetached,\r\n  guessHandleType: _guessHandleType,\r\n  privateSymbols: {\r\n    arrow_message_private_symbol,\r\n    decorated_private_symbol,\r\n  },\r\n  sleep: _sleep,\r\n} = internalBinding('util');\r\nconst { isNativeError, isPromise } = internalBinding('types');\r\nconst { getOptionValue } = require('internal/options');\r\nconst { encodings } = internalBinding('string_decoder');\r\n\r\nconst noCrypto = !process.versions.openssl;\r\n\r\nconst experimentalWarnings = new SafeSet();\r\n\r\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\r\n\r\nlet uvBinding;\r\n\r\nfunction lazyUv() {\r\n  uvBinding ??= internalBinding('uv');\r\n  return uvBinding;\r\n}\r\n\r\nfunction removeColors(str) {\r\n  return StringPrototypeReplace(str, colorRegExp, '');\r\n}\r\n\r\nfunction isError(e) {\r\n  // An error could be an instance of Error while not being a native error\r\n  // or could be from a different realm and not be instance of Error but still\r\n  // be a native error.\r\n  return isNativeError(e) || e instanceof Error;\r\n}\r\n\r\n// Keep a list of deprecation codes that have been warned on so we only warn on\r\n// each one once.\r\nconst codesWarned = new SafeSet();\r\n\r\nlet validateString;\r\n\r\nfunction getDeprecationWarningEmitter(\r\n  code, msg, deprecated, useEmitSync,\r\n  shouldEmitWarning = () => true,\r\n) {\r\n  let warned = false;\r\n  return function() {\r\n    if (!warned && shouldEmitWarning()) {\r\n      warned = true;\r\n      if (code !== undefined) {\r\n        if (!codesWarned.has(code)) {\r\n          const emitWarning = useEmitSync ?\r\n            require('internal/process/warning').emitWarningSync :\r\n            process.emitWarning;\r\n          emitWarning(msg, 'DeprecationWarning', code, deprecated);\r\n          codesWarned.add(code);\r\n        }\r\n      } else {\r\n        process.emitWarning(msg, 'DeprecationWarning', deprecated);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction isPendingDeprecation() {\r\n  return getOptionValue('--pending-deprecation') &&\r\n    !getOptionValue('--no-deprecation');\r\n}\r\n\r\n// Internal deprecator for pending --pending-deprecation. This can be invoked\r\n// at snapshot building time as the warning permission is only queried at\r\n// run time.\r\nfunction pendingDeprecate(fn, msg, code) {\r\n  const emitDeprecationWarning = getDeprecationWarningEmitter(\r\n    code, msg, deprecated, false, isPendingDeprecation,\r\n  );\r\n  function deprecated(...args) {\r\n    emitDeprecationWarning();\r\n    return ReflectApply(fn, this, args);\r\n  }\r\n  return deprecated;\r\n}\r\n\r\n// Mark that a method should not be used.\r\n// Returns a modified function which warns once by default.\r\n// If --no-deprecation is set, then it is a no-op.\r\nfunction deprecate(fn, msg, code, useEmitSync) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateString === undefined)\r\n    ({ validateString } = require('internal/validators'));\r\n\r\n  if (code !== undefined)\r\n    validateString(code, 'code');\r\n\r\n  const emitDeprecationWarning = getDeprecationWarningEmitter(\r\n    code, msg, deprecated, useEmitSync,\r\n  );\r\n\r\n  function deprecated(...args) {\r\n    // TODO(joyeecheung): use getOptionValue('--no-deprecation') instead.\r\n    if (!process.noDeprecation) {\r\n      emitDeprecationWarning();\r\n    }\r\n    if (new.target) {\r\n      return ReflectConstruct(fn, args, new.target);\r\n    }\r\n    return ReflectApply(fn, this, args);\r\n  }\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  ObjectSetPrototypeOf(deprecated, fn);\r\n  if (fn.prototype) {\r\n    // Setting this (rather than using Object.setPrototype, as above) ensures\r\n    // that calling the unwrapped constructor gives an instanceof the wrapped\r\n    // constructor.\r\n    deprecated.prototype = fn.prototype;\r\n  }\r\n\r\n  return deprecated;\r\n}\r\n\r\nfunction decorateErrorStack(err) {\r\n  if (!(isError(err) && err.stack) || err[decorated_private_symbol])\r\n    return;\r\n\r\n  const arrow = err[arrow_message_private_symbol];\r\n\r\n  if (arrow) {\r\n    err.stack = arrow + err.stack;\r\n    err[decorated_private_symbol] = true;\r\n  }\r\n}\r\n\r\nfunction assertCrypto() {\r\n  if (noCrypto)\r\n    throw new ERR_NO_CRYPTO();\r\n}\r\n\r\n// Return undefined if there is no match.\r\n// Move the \"slow cases\" to a separate function to make sure this function gets\r\n// inlined properly. That prioritizes the common case.\r\nfunction normalizeEncoding(enc) {\r\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\r\n  return slowCases(enc);\r\n}\r\n\r\nfunction slowCases(enc) {\r\n  switch (enc.length) {\r\n    case 4:\r\n      if (enc === 'UTF8') return 'utf8';\r\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'utf8') return 'utf8';\r\n      if (enc === 'ucs2') return 'utf16le';\r\n      break;\r\n    case 3:\r\n      if (enc === 'hex' || enc === 'HEX' ||\r\n      StringPrototypeToLowerCase(enc) === 'hex')\r\n        return 'hex';\r\n      break;\r\n    case 5:\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      if (enc === 'UTF-8') return 'utf8';\r\n      if (enc === 'ASCII') return 'ascii';\r\n      if (enc === 'UCS-2') return 'utf16le';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'utf-8') return 'utf8';\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      break;\r\n    case 6:\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      if (enc === 'BASE64') return 'base64';\r\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\r\n      enc = StringPrototypeToLowerCase(enc);\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      break;\r\n    case 7:\r\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\r\n      StringPrototypeToLowerCase(enc) === 'utf16le')\r\n        return 'utf16le';\r\n      break;\r\n    case 8:\r\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\r\n      StringPrototypeToLowerCase(enc) === 'utf-16le')\r\n        return 'utf16le';\r\n      break;\r\n    case 9:\r\n      if (enc === 'base64url' || enc === 'BASE64URL' ||\r\n      StringPrototypeToLowerCase(enc) === 'base64url')\r\n        return 'base64url';\r\n      break;\r\n    default:\r\n      if (enc === '') return 'utf8';\r\n  }\r\n}\r\n\r\nfunction emitExperimentalWarning(feature) {\r\n  if (experimentalWarnings.has(feature)) return;\r\n  const msg = `${feature} is an experimental feature and might change at any time`;\r\n  experimentalWarnings.add(feature);\r\n  process.emitWarning(msg, 'ExperimentalWarning');\r\n}\r\n\r\nfunction filterDuplicateStrings(items, low) {\r\n  const map = new SafeMap();\r\n  for (let i = 0; i < items.length; i++) {\r\n    const item = items[i];\r\n    const key = StringPrototypeToLowerCase(item);\r\n    if (low) {\r\n      map.set(key, key);\r\n    } else {\r\n      map.set(key, item);\r\n    }\r\n  }\r\n  return ArrayPrototypeSort(ArrayFrom(map.values()));\r\n}\r\n\r\nfunction cachedResult(fn) {\r\n  let result;\r\n  return () => {\r\n    if (result === undefined)\r\n      result = fn();\r\n    return ArrayPrototypeSlice(result);\r\n  };\r\n}\r\n\r\n// Useful for Wrapping an ES6 Class with a constructor Function that\r\n// does not require the new keyword. For instance:\r\n//   class A { constructor(x) {this.x = x;}}\r\n//   const B = createClassWrapper(A);\r\n//   B() instanceof A // true\r\n//   B() instanceof B // true\r\nfunction createClassWrapper(type) {\r\n  function fn(...args) {\r\n    return ReflectConstruct(type, args, new.target || type);\r\n  }\r\n  // Mask the wrapper function name and length values\r\n  ObjectDefineProperties(fn, {\r\n    name: { __proto__: null, value: type.name },\r\n    length: { __proto__: null, value: type.length },\r\n  });\r\n  ObjectSetPrototypeOf(fn, type);\r\n  fn.prototype = type.prototype;\r\n  return fn;\r\n}\r\n\r\nlet signalsToNamesMapping;\r\nfunction getSignalsToNamesMapping() {\r\n  if (signalsToNamesMapping !== undefined)\r\n    return signalsToNamesMapping;\r\n\r\n  signalsToNamesMapping = { __proto__: null };\r\n  for (const key in signals) {\r\n    signalsToNamesMapping[signals[key]] = key;\r\n  }\r\n\r\n  return signalsToNamesMapping;\r\n}\r\n\r\nfunction convertToValidSignal(signal) {\r\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\r\n    return signal;\r\n\r\n  if (typeof signal === 'string') {\r\n    const signalName = signals[StringPrototypeToUpperCase(signal)];\r\n    if (signalName) return signalName;\r\n  }\r\n\r\n  throw new ERR_UNKNOWN_SIGNAL(signal);\r\n}\r\n\r\nfunction getConstructorOf(obj) {\r\n  while (obj) {\r\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '') {\r\n      return descriptor.value;\r\n    }\r\n\r\n    obj = ObjectGetPrototypeOf(obj);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nlet cachedURL;\r\nlet cachedCWD;\r\n\r\n/**\r\n * Get the current working directory while accounting for the possibility that it has been deleted.\r\n * `process.cwd()` can fail if the parent directory is deleted while the process runs.\r\n * @returns {URL} The current working directory or the volume root if it cannot be determined.\r\n */\r\nfunction getCWDURL() {\r\n  const { sep } = require('path');\r\n  const { pathToFileURL } = require('internal/url');\r\n\r\n  let cwd;\r\n\r\n  try {\r\n    // The implementation of `process.cwd()` already uses proper cache when it can.\r\n    // It's a relatively cheap call performance-wise for the most common use case.\r\n    cwd = process.cwd();\r\n  } catch {\r\n    cachedURL ??= pathToFileURL(sep);\r\n  }\r\n\r\n  if (cwd != null && cwd !== cachedCWD) {\r\n    cachedURL = pathToFileURL(cwd + sep);\r\n    cachedCWD = cwd;\r\n  }\r\n\r\n  return cachedURL;\r\n}\r\n\r\nfunction getSystemErrorName(err) {\r\n  const entry = uvErrmapGet(err);\r\n  return entry ? entry[0] : `Unknown system error ${err}`;\r\n}\r\n\r\nfunction getSystemErrorMap() {\r\n  return lazyUv().getErrorMap();\r\n}\r\n\r\nconst kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\r\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\r\n\r\nlet validateFunction;\r\n\r\nfunction promisify(original) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateFunction === undefined)\r\n    ({ validateFunction } = require('internal/validators'));\r\n\r\n  validateFunction(original, 'original');\r\n\r\n  if (original[kCustomPromisifiedSymbol]) {\r\n    const fn = original[kCustomPromisifiedSymbol];\r\n\r\n    validateFunction(fn, 'util.promisify.custom');\r\n\r\n    return ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\r\n      __proto__: null,\r\n      value: fn, enumerable: false, writable: false, configurable: true,\r\n    });\r\n  }\r\n\r\n  // Names to create an object from in case the callback receives multiple\r\n  // arguments, e.g. ['bytesRead', 'buffer'] for fs.read.\r\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\r\n\r\n  function fn(...args) {\r\n    return new Promise((resolve, reject) => {\r\n      ArrayPrototypePush(args, (err, ...values) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        if (argumentNames !== undefined && values.length > 1) {\r\n          const obj = {};\r\n          for (let i = 0; i < argumentNames.length; i++)\r\n            obj[argumentNames[i]] = values[i];\r\n          resolve(obj);\r\n        } else {\r\n          resolve(values[0]);\r\n        }\r\n      });\r\n      if (isPromise(ReflectApply(original, this, args))) {\r\n        process.emitWarning('Calling promisify on a function that returns a Promise is likely a mistake.',\r\n                            'DeprecationWarning', 'DEP0174');\r\n      }\r\n    });\r\n  }\r\n\r\n  ObjectSetPrototypeOf(fn, ObjectGetPrototypeOf(original));\r\n\r\n  ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\r\n    __proto__: null,\r\n    value: fn, enumerable: false, writable: false, configurable: true,\r\n  });\r\n\r\n  const descriptors = ObjectGetOwnPropertyDescriptors(original);\r\n  const propertiesValues = ObjectValues(descriptors);\r\n  for (let i = 0; i < propertiesValues.length; i++) {\r\n    // We want to use null-prototype objects to not rely on globally mutable\r\n    // %Object.prototype%.\r\n    ObjectSetPrototypeOf(propertiesValues[i], null);\r\n  }\r\n  return ObjectDefineProperties(fn, descriptors);\r\n}\r\n\r\npromisify.custom = kCustomPromisifiedSymbol;\r\n\r\n// The built-in Array#join is slower in v8 6.0\r\nfunction join(output, separator) {\r\n  let str = '';\r\n  if (output.length !== 0) {\r\n    const lastIndex = output.length - 1;\r\n    for (let i = 0; i < lastIndex; i++) {\r\n      // It is faster not to use a template string here\r\n      str += output[i];\r\n      str += separator;\r\n    }\r\n    str += output[lastIndex];\r\n  }\r\n  return str;\r\n}\r\n\r\n// As of V8 6.6, depending on the size of the array, this is anywhere\r\n// between 1.5-10x faster than the two-arg version of Array#splice()\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nconst kNodeModulesRE = /^(?:.*)[\\\\/]node_modules[\\\\/]/;\r\n\r\nlet getStructuredStackImpl;\r\n\r\nfunction lazyGetStructuredStack() {\r\n  if (getStructuredStackImpl === undefined) {\r\n    // Lazy-load to avoid a circular dependency.\r\n    const { runInNewContext } = require('vm');\r\n    // Use `runInNewContext()` to get something tamper-proof and\r\n    // side-effect-free. Since this is currently only used for a deprecated API\r\n    // and module mocking, the perf implications should be okay.\r\n    getStructuredStackImpl = runInNewContext(`(function() {\r\n      try { Error.stackTraceLimit = Infinity; } catch {}\r\n      return function structuredStack() {\r\n        const e = new Error();\r\n        overrideStackTrace.set(e, (err, trace) => trace);\r\n        return e.stack;\r\n      };\r\n    })()`, { overrideStackTrace }, { filename: 'structured-stack' });\r\n  }\r\n\r\n  return getStructuredStackImpl;\r\n}\r\n\r\nfunction getStructuredStack() {\r\n  const getStructuredStackImpl = lazyGetStructuredStack();\r\n\r\n  return getStructuredStackImpl();\r\n}\r\n\r\nfunction isInsideNodeModules() {\r\n  const stack = getStructuredStack();\r\n\r\n  // Iterate over all stack frames and look for the first one not coming\r\n  // from inside Node.js itself:\r\n  if (ArrayIsArray(stack)) {\r\n    for (const frame of stack) {\r\n      const filename = frame.getFileName();\r\n      // If a filename does not start with / or contain \\,\r\n      // it's likely from Node.js core.\r\n      if (\r\n        filename[0] !== '/' &&\r\n        StringPrototypeIncludes(filename, '\\\\') === false\r\n      ) {\r\n        continue;\r\n      }\r\n      return RegExpPrototypeExec(kNodeModulesRE, filename) !== null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction once(callback, { preserveReturnValue = false } = kEmptyObject) {\r\n  let called = false;\r\n  let returnValue;\r\n  return function(...args) {\r\n    if (called) return returnValue;\r\n    called = true;\r\n    const result = ReflectApply(callback, this, args);\r\n    returnValue = preserveReturnValue ? result : undefined;\r\n    return result;\r\n  };\r\n}\r\n\r\nlet validateUint32;\r\n\r\nfunction sleep(msec) {\r\n  // Lazy-load to avoid a circular dependency.\r\n  if (validateUint32 === undefined)\r\n    ({ validateUint32 } = require('internal/validators'));\r\n\r\n  validateUint32(msec, 'msec');\r\n  _sleep(msec);\r\n}\r\n\r\nfunction createDeferredPromise() {\r\n  let resolve;\r\n  let reject;\r\n  const promise = new Promise((res, rej) => {\r\n    resolve = res;\r\n    reject = rej;\r\n  });\r\n\r\n  return { promise, resolve, reject };\r\n}\r\n\r\n// https://heycam.github.io/webidl/#define-the-operations\r\nfunction defineOperation(target, name, method) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: true,\r\n    configurable: true,\r\n    value: method,\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-interfaces\r\nfunction exposeInterface(target, name, interfaceObject) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: interfaceObject,\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-namespaces\r\nfunction exposeNamespace(target, name, namespaceObject) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: namespaceObject,\r\n  });\r\n}\r\n\r\nfunction exposeGetterAndSetter(target, name, getter, setter = undefined) {\r\n  ObjectDefineProperty(target, name, {\r\n    __proto__: null,\r\n    enumerable: false,\r\n    configurable: true,\r\n    get: getter,\r\n    set: setter,\r\n  });\r\n}\r\n\r\nfunction defineLazyProperties(target, id, keys, enumerable = true) {\r\n  const descriptors = { __proto__: null };\r\n  let mod;\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    let lazyLoadedValue;\r\n    function set(value) {\r\n      ObjectDefineProperty(target, key, {\r\n        __proto__: null,\r\n        writable: true,\r\n        value,\r\n      });\r\n    }\r\n    ObjectDefineProperty(set, 'name', {\r\n      __proto__: null,\r\n      value: `set ${key}`,\r\n    });\r\n    function get() {\r\n      mod ??= require(id);\r\n      if (lazyLoadedValue === undefined) {\r\n        lazyLoadedValue = mod[key];\r\n        set(lazyLoadedValue);\r\n      }\r\n      return lazyLoadedValue;\r\n    }\r\n    ObjectDefineProperty(get, 'name', {\r\n      __proto__: null,\r\n      value: `get ${key}`,\r\n    });\r\n    descriptors[key] = {\r\n      __proto__: null,\r\n      configurable: true,\r\n      enumerable,\r\n      get,\r\n      set,\r\n    };\r\n  }\r\n  ObjectDefineProperties(target, descriptors);\r\n}\r\n\r\nfunction defineReplaceableLazyAttribute(target, id, keys, writable = true, check) {\r\n  let mod;\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    let value;\r\n    let setterCalled = false;\r\n\r\n    function get() {\r\n      if (check !== undefined) {\r\n        FunctionPrototypeCall(check, this);\r\n      }\r\n      if (setterCalled) {\r\n        return value;\r\n      }\r\n      mod ??= require(id);\r\n      value ??= mod[key];\r\n      return value;\r\n    }\r\n\r\n    ObjectDefineProperty(get, 'name', {\r\n      __proto__: null,\r\n      value: `get ${key}`,\r\n    });\r\n\r\n    function set(val) {\r\n      setterCalled = true;\r\n      value = val;\r\n    }\r\n    ObjectDefineProperty(set, 'name', {\r\n      __proto__: null,\r\n      value: `set ${key}`,\r\n    });\r\n\r\n    ObjectDefineProperty(target, key, {\r\n      __proto__: null,\r\n      enumerable: true,\r\n      configurable: true,\r\n      get,\r\n      set: writable ? set : undefined,\r\n    });\r\n  }\r\n}\r\n\r\nfunction exposeLazyInterfaces(target, id, keys) {\r\n  defineLazyProperties(target, id, keys, false);\r\n}\r\n\r\nlet _DOMException;\r\nconst lazyDOMExceptionClass = () => {\r\n  _DOMException ??= internalBinding('messaging').DOMException;\r\n  return _DOMException;\r\n};\r\n\r\nconst lazyDOMException = (message, name) => {\r\n  _DOMException ??= internalBinding('messaging').DOMException;\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const ex = new _DOMException(message, name);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(ex, lazyDOMException);\r\n    return ex;\r\n  }\r\n  return new _DOMException(message, name);\r\n\r\n};\r\n\r\nconst kEnumerableProperty = { __proto__: null };\r\nkEnumerableProperty.enumerable = true;\r\nObjectFreeze(kEnumerableProperty);\r\n\r\nconst kEmptyObject = ObjectFreeze({ __proto__: null });\r\n\r\nfunction filterOwnProperties(source, keys) {\r\n  const filtered = { __proto__: null };\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    if (ObjectPrototypeHasOwnProperty(source, key)) {\r\n      filtered[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return filtered;\r\n}\r\n\r\n/**\r\n * Mimics `obj[key] = value` but ignoring potential prototype inheritance.\r\n * @param {any} obj\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns {any}\r\n */\r\nfunction setOwnProperty(obj, key, value) {\r\n  return ObjectDefineProperty(obj, key, {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    value,\r\n    writable: true,\r\n  });\r\n}\r\n\r\nlet internalGlobal;\r\nfunction getInternalGlobal() {\r\n  if (internalGlobal == null) {\r\n    // Lazy-load to avoid a circular dependency.\r\n    const { runInNewContext } = require('vm');\r\n    internalGlobal = runInNewContext('this', undefined, { contextName: 'internal' });\r\n  }\r\n  return internalGlobal;\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeExec(regex, string) {\r\n  const { RegExp: RegExpFromAnotherRealm } = getInternalGlobal();\r\n  return FunctionPrototypeCall(RegExpFromAnotherRealm.prototype.exec, regex, string);\r\n}\r\n\r\nconst crossRelmRegexes = new SafeWeakMap();\r\nfunction getCrossRelmRegex(regex) {\r\n  const cached = crossRelmRegexes.get(regex);\r\n  if (cached) return cached;\r\n\r\n  let flagString = '';\r\n  if (RegExpPrototypeGetHasIndices(regex)) flagString += 'd';\r\n  if (RegExpPrototypeGetGlobal(regex)) flagString += 'g';\r\n  if (RegExpPrototypeGetIgnoreCase(regex)) flagString += 'i';\r\n  if (RegExpPrototypeGetMultiline(regex)) flagString += 'm';\r\n  if (RegExpPrototypeGetDotAll(regex)) flagString += 's';\r\n  if (RegExpPrototypeGetUnicode(regex)) flagString += 'u';\r\n  if (RegExpPrototypeGetSticky(regex)) flagString += 'y';\r\n\r\n  const { RegExp: RegExpFromAnotherRealm } = getInternalGlobal();\r\n  const crossRelmRegex = new RegExpFromAnotherRealm(RegExpPrototypeGetSource(regex), flagString);\r\n  crossRelmRegexes.set(regex, crossRelmRegex);\r\n  return crossRelmRegex;\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeSymbolReplace(regex, string, replacement) {\r\n  return getCrossRelmRegex(regex)[SymbolReplace](string, replacement);\r\n}\r\n\r\nfunction SideEffectFreeRegExpPrototypeSymbolSplit(regex, string, limit = undefined) {\r\n  return getCrossRelmRegex(regex)[SymbolSplit](string, limit);\r\n}\r\n\r\n\r\nfunction isArrayBufferDetached(value) {\r\n  if (ArrayBufferPrototypeGetByteLength(value) === 0) {\r\n    return _isArrayBufferDetached(value);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Helper function to lazy-load an initialize-once value.\r\n * @template T Return value of initializer\r\n * @param {()=>T} initializer Initializer of the lazily loaded value.\r\n * @returns {()=>T}\r\n */\r\nfunction getLazy(initializer) {\r\n  let value;\r\n  let initialized = false;\r\n  return function() {\r\n    if (initialized === false) {\r\n      value = initializer();\r\n      initialized = true;\r\n    }\r\n    return value;\r\n  };\r\n}\r\n\r\n// Setup user-facing NODE_V8_COVERAGE environment variable that writes\r\n// ScriptCoverage objects to a specified directory.\r\nfunction setupCoverageHooks(dir) {\r\n  const cwd = require('internal/process/execution').tryGetCwd();\r\n  const { resolve } = require('path');\r\n  const coverageDirectory = resolve(cwd, dir);\r\n  const { sourceMapCacheToObject } =\r\n    require('internal/source_map/source_map_cache');\r\n\r\n  if (process.features.inspector) {\r\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\r\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\r\n  } else {\r\n    process.emitWarning('The inspector is disabled, ' +\r\n                        'coverage could not be collected',\r\n                        'Warning');\r\n    return '';\r\n  }\r\n  return coverageDirectory;\r\n}\r\n\r\n\r\nconst handleTypes = ['TCP', 'TTY', 'UDP', 'FILE', 'PIPE', 'UNKNOWN'];\r\nfunction guessHandleType(fd) {\r\n  const type = _guessHandleType(fd);\r\n  return handleTypes[type];\r\n}\r\n\r\nclass WeakReference {\r\n  #weak = null;\r\n  // eslint-disable-next-line no-unused-private-class-members\r\n  #strong = null;\r\n  #refCount = 0;\r\n  constructor(object) {\r\n    this.#weak = new SafeWeakRef(object);\r\n  }\r\n\r\n  incRef() {\r\n    this.#refCount++;\r\n    if (this.#refCount === 1) {\r\n      const derefed = this.#weak.deref();\r\n      if (derefed !== undefined) {\r\n        this.#strong = derefed;\r\n      }\r\n    }\r\n    return this.#refCount;\r\n  }\r\n\r\n  decRef() {\r\n    this.#refCount--;\r\n    if (this.#refCount === 0) {\r\n      this.#strong = null;\r\n    }\r\n    return this.#refCount;\r\n  }\r\n\r\n  get() {\r\n    return this.#weak.deref();\r\n  }\r\n}\r\n\r\nconst encodingsMap = { __proto__: null };\r\nfor (let i = 0; i < encodings.length; ++i)\r\n  encodingsMap[encodings[i]] = i;\r\n\r\nmodule.exports = {\r\n  getLazy,\r\n  assertCrypto,\r\n  cachedResult,\r\n  convertToValidSignal,\r\n  createClassWrapper,\r\n  createDeferredPromise,\r\n  decorateErrorStack,\r\n  defineOperation,\r\n  defineLazyProperties,\r\n  defineReplaceableLazyAttribute,\r\n  deprecate,\r\n  emitExperimentalWarning,\r\n  encodingsMap,\r\n  exposeInterface,\r\n  exposeLazyInterfaces,\r\n  exposeNamespace,\r\n  exposeGetterAndSetter,\r\n  filterDuplicateStrings,\r\n  filterOwnProperties,\r\n  getConstructorOf,\r\n  getCWDURL,\r\n  getInternalGlobal,\r\n  getStructuredStack,\r\n  getSystemErrorMap,\r\n  getSystemErrorName,\r\n  guessHandleType,\r\n  isArrayBufferDetached,\r\n  isError,\r\n  isInsideNodeModules,\r\n  join,\r\n  lazyDOMException,\r\n  lazyDOMExceptionClass,\r\n  normalizeEncoding,\r\n  once,\r\n  promisify,\r\n  SideEffectFreeRegExpPrototypeExec,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n  SideEffectFreeRegExpPrototypeSymbolSplit,\r\n  sleep,\r\n  spliceOne,\r\n  setupCoverageHooks,\r\n  removeColors,\r\n\r\n  // Symbol used to customize promisify conversion\r\n  customPromisifyArgs: kCustomPromisifyArgsSymbol,\r\n\r\n  // Symbol used to provide a custom inspect function for an object as an\r\n  // alternative to using 'inspect'\r\n  customInspectSymbol: SymbolFor('nodejs.util.inspect.custom'),\r\n\r\n  // Used by the buffer module to capture an internal reference to the\r\n  // default isEncoding implementation, just in case userland overrides it.\r\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol'),\r\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol'),\r\n\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  setOwnProperty,\r\n  pendingDeprecate,\r\n  WeakReference,\r\n};\r\n"
  },
  "14": {
    "metadata": {
      "scriptId": "14",
      "url": "node:internal/options",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 69,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "80cbc13728362c61dfb57f2e9629e6530a808c76175afb90b8cc12182df091fa",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1765,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/options"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  getCLIOptionsValues,\r\n  getCLIOptionsInfo,\r\n  getEmbedderOptions: getEmbedderOptionsFromBinding,\r\n} = internalBinding('options');\r\n\r\nlet warnOnAllowUnauthorized = true;\r\n\r\nlet optionsDict;\r\nlet cliInfo;\r\nlet embedderOptions;\r\n\r\n// getCLIOptionsValues() would serialize the option values from C++ land.\r\n// It would error if the values are queried before bootstrap is\r\n// complete so that we don't accidentally include runtime-dependent\r\n// states into a runtime-independent snapshot.\r\nfunction getCLIOptionsFromBinding() {\r\n  if (!optionsDict) {\r\n    optionsDict = getCLIOptionsValues();\r\n  }\r\n  return optionsDict;\r\n}\r\n\r\nfunction getCLIOptionsInfoFromBinding() {\r\n  if (!cliInfo) {\r\n    cliInfo = getCLIOptionsInfo();\r\n  }\r\n  return cliInfo;\r\n}\r\n\r\nfunction getEmbedderOptions() {\r\n  if (!embedderOptions) {\r\n    embedderOptions = getEmbedderOptionsFromBinding();\r\n  }\r\n  return embedderOptions;\r\n}\r\n\r\nfunction refreshOptions() {\r\n  optionsDict = undefined;\r\n}\r\n\r\nfunction getOptionValue(optionName) {\r\n  const optionsDict = getCLIOptionsFromBinding();\r\n  return optionsDict[optionName];\r\n}\r\n\r\nfunction getAllowUnauthorized() {\r\n  const allowUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0';\r\n\r\n  if (allowUnauthorized && warnOnAllowUnauthorized) {\r\n    warnOnAllowUnauthorized = false;\r\n    process.emitWarning(\r\n      'Setting the NODE_TLS_REJECT_UNAUTHORIZED ' +\r\n      'environment variable to \\'0\\' makes TLS connections ' +\r\n      'and HTTPS requests insecure by disabling ' +\r\n      'certificate verification.');\r\n  }\r\n  return allowUnauthorized;\r\n}\r\n\r\nmodule.exports = {\r\n  getCLIOptionsInfo: getCLIOptionsInfoFromBinding,\r\n  getOptionValue,\r\n  getAllowUnauthorized,\r\n  getEmbedderOptions,\r\n  refreshOptions,\r\n};\r\n"
  },
  "15": {
    "metadata": {
      "scriptId": "15",
      "url": "node:internal/util/types",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 110,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "fbda408393f56a143c747832fa2c23406374d1c2c54a0a5ecc3ba2be1035a340",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2579,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/types"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferIsView,\r\n  ObjectDefineProperties,\r\n  TypedArrayPrototypeGetSymbolToStringTag,\r\n} = primordials;\r\n\r\nfunction isTypedArray(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\r\n}\r\n\r\nfunction isUint8Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\r\n}\r\n\r\nfunction isUint8ClampedArray(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8ClampedArray';\r\n}\r\n\r\nfunction isUint16Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint16Array';\r\n}\r\n\r\nfunction isUint32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint32Array';\r\n}\r\n\r\nfunction isInt8Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int8Array';\r\n}\r\n\r\nfunction isInt16Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int16Array';\r\n}\r\n\r\nfunction isInt32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int32Array';\r\n}\r\n\r\nfunction isFloat32Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float32Array';\r\n}\r\n\r\nfunction isFloat64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float64Array';\r\n}\r\n\r\nfunction isBigInt64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigInt64Array';\r\n}\r\n\r\nfunction isBigUint64Array(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigUint64Array';\r\n}\r\n\r\nmodule.exports = {\r\n  ...internalBinding('types'),\r\n  isArrayBufferView: ArrayBufferIsView,\r\n  isTypedArray,\r\n  isUint8Array,\r\n  isUint8ClampedArray,\r\n  isUint16Array,\r\n  isUint32Array,\r\n  isInt8Array,\r\n  isInt16Array,\r\n  isInt32Array,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n  isBigInt64Array,\r\n  isBigUint64Array,\r\n};\r\n\r\nlet isCryptoKey;\r\nlet isKeyObject;\r\n\r\nObjectDefineProperties(module.exports, {\r\n  isKeyObject: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value(obj) {\r\n      if (!process.versions.openssl) {\r\n        return false;\r\n      }\r\n\r\n      if (!isKeyObject) {\r\n        ({ isKeyObject } = require('internal/crypto/keys'));\r\n      }\r\n\r\n      return isKeyObject(obj);\r\n    },\r\n  },\r\n  isCryptoKey: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value(obj) {\r\n      if (!process.versions.openssl) {\r\n        return false;\r\n      }\r\n\r\n      if (!isCryptoKey) {\r\n        ({ isCryptoKey } = require('internal/crypto/keys'));\r\n      }\r\n\r\n      return isCryptoKey(obj);\r\n    },\r\n  },\r\n});\r\n"
  },
  "16": {
    "metadata": {
      "scriptId": "16",
      "url": "node:internal/linkedlist",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 55,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "7723d7ccf96478c3d83f80fb31c85220ee88cd133574dd9f7e89119e506a3968",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1183,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/linkedlist"
    },
    "source": "'use strict';\r\n\r\nfunction init(list) {\r\n  list._idleNext = list;\r\n  list._idlePrev = list;\r\n  return list;\r\n}\r\n\r\n// Show the most idle item.\r\nfunction peek(list) {\r\n  if (list._idlePrev === list) return null;\r\n  return list._idlePrev;\r\n}\r\n\r\n// Remove an item from its list.\r\nfunction remove(item) {\r\n  if (item._idleNext) {\r\n    item._idleNext._idlePrev = item._idlePrev;\r\n  }\r\n\r\n  if (item._idlePrev) {\r\n    item._idlePrev._idleNext = item._idleNext;\r\n  }\r\n\r\n  item._idleNext = null;\r\n  item._idlePrev = null;\r\n}\r\n\r\n// Remove an item from its list and place at the end.\r\nfunction append(list, item) {\r\n  if (item._idleNext || item._idlePrev) {\r\n    remove(item);\r\n  }\r\n\r\n  // Items are linked  with _idleNext -> (older) and _idlePrev -> (newer).\r\n  // Note: This linkage (next being older) may seem counter-intuitive at first.\r\n  item._idleNext = list._idleNext;\r\n  item._idlePrev = list;\r\n\r\n  // The list _idleNext points to tail (newest) and _idlePrev to head (oldest).\r\n  list._idleNext._idlePrev = item;\r\n  list._idleNext = item;\r\n}\r\n\r\nfunction isEmpty(list) {\r\n  return list._idleNext === list;\r\n}\r\n\r\nmodule.exports = {\r\n  init,\r\n  peek,\r\n  remove,\r\n  append,\r\n  isEmpty,\r\n};\r\n"
  },
  "17": {
    "metadata": {
      "scriptId": "17",
      "url": "node:internal/priority_queue",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 113,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "da7f11d14fccbaa1863685cae72f4388784ab23eb0549e112c3e7510407c78b3",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2743,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/priority_queue"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n} = primordials;\r\n\r\n// The PriorityQueue is a basic implementation of a binary heap that accepts\r\n// a custom sorting function via its constructor. This function is passed\r\n// the two nodes to compare, similar to the native Array#sort. Crucially\r\n// this enables priority queues that are based on a comparison of more than\r\n// just a single criteria.\r\n\r\nmodule.exports = class PriorityQueue {\r\n  #compare = (a, b) => a - b;\r\n  #heap = new Array(64);\r\n  #setPosition;\r\n  #size = 0;\r\n\r\n  constructor(comparator, setPosition) {\r\n    if (comparator !== undefined)\r\n      this.#compare = comparator;\r\n    if (setPosition !== undefined)\r\n      this.#setPosition = setPosition;\r\n  }\r\n\r\n  insert(value) {\r\n    const heap = this.#heap;\r\n    const pos = ++this.#size;\r\n    heap[pos] = value;\r\n\r\n    if (heap.length === pos)\r\n      heap.length *= 2;\r\n\r\n    this.percolateUp(pos);\r\n  }\r\n\r\n  peek() {\r\n    return this.#heap[1];\r\n  }\r\n\r\n  peekBottom() {\r\n    return this.#heap[this.#size];\r\n  }\r\n\r\n  percolateDown(pos) {\r\n    const compare = this.#compare;\r\n    const setPosition = this.#setPosition;\r\n    const heap = this.#heap;\r\n    const size = this.#size;\r\n    const item = heap[pos];\r\n\r\n    while (pos * 2 <= size) {\r\n      let childIndex = pos * 2 + 1;\r\n      if (childIndex > size || compare(heap[pos * 2], heap[childIndex]) < 0)\r\n        childIndex = pos * 2;\r\n      const child = heap[childIndex];\r\n      if (compare(item, child) <= 0)\r\n        break;\r\n      if (setPosition !== undefined)\r\n        setPosition(child, pos);\r\n      heap[pos] = child;\r\n      pos = childIndex;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  percolateUp(pos) {\r\n    const heap = this.#heap;\r\n    const compare = this.#compare;\r\n    const setPosition = this.#setPosition;\r\n    const item = heap[pos];\r\n\r\n    while (pos > 1) {\r\n      const parent = heap[pos / 2 | 0];\r\n      if (compare(parent, item) <= 0)\r\n        break;\r\n      heap[pos] = parent;\r\n      if (setPosition !== undefined)\r\n        setPosition(parent, pos);\r\n      pos = pos / 2 | 0;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  removeAt(pos) {\r\n    const heap = this.#heap;\r\n    const size = --this.#size;\r\n    heap[pos] = heap[size + 1];\r\n    heap[size + 1] = undefined;\r\n\r\n    if (size > 0 && pos <= size) {\r\n      if (pos > 1 && this.#compare(heap[pos / 2 | 0], heap[pos]) > 0)\r\n        this.percolateUp(pos);\r\n      else\r\n        this.percolateDown(pos);\r\n    }\r\n  }\r\n\r\n  shift() {\r\n    const heap = this.#heap;\r\n    const value = heap[1];\r\n    if (value === undefined)\r\n      return;\r\n\r\n    this.removeAt(1);\r\n\r\n    return value;\r\n  }\r\n};\r\n"
  },
  "18": {
    "metadata": {
      "scriptId": "18",
      "url": "node:internal/util/inspect",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 2432,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "dc67c4a9d2a269ec1bc2a9e6186222f470f6892667182a8a25f67c91f7e80174",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 84159,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/inspect"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSort,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  BigIntPrototypeValueOf,\r\n  BooleanPrototypeValueOf,\r\n  DatePrototypeGetTime,\r\n  DatePrototypeToISOString,\r\n  DatePrototypeToString,\r\n  ErrorPrototypeToString,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  FunctionPrototypeToString,\r\n  JSONStringify,\r\n  MapPrototypeEntries,\r\n  MapPrototypeGetSize,\r\n  MathFloor,\r\n  MathMax,\r\n  MathMin,\r\n  MathRound,\r\n  MathSqrt,\r\n  MathTrunc,\r\n  Number,\r\n  NumberIsFinite,\r\n  NumberIsNaN,\r\n  NumberParseFloat,\r\n  NumberParseInt,\r\n  NumberPrototypeToString,\r\n  NumberPrototypeValueOf,\r\n  Object,\r\n  ObjectAssign,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetOwnPropertyNames,\r\n  ObjectGetOwnPropertySymbols,\r\n  ObjectGetPrototypeOf,\r\n  ObjectIs,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectPrototypePropertyIsEnumerable,\r\n  ObjectSeal,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  RegExpPrototypeSymbolSplit,\r\n  RegExpPrototypeToString,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeStringIterator,\r\n  SetPrototypeGetSize,\r\n  SetPrototypeValues,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeNormalize,\r\n  StringPrototypePadEnd,\r\n  StringPrototypePadStart,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeReplaceAll,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  StringPrototypeValueOf,\r\n  SymbolIterator,\r\n  SymbolPrototypeToString,\r\n  SymbolPrototypeValueOf,\r\n  SymbolToPrimitive,\r\n  SymbolToStringTag,\r\n  TypedArrayPrototypeGetLength,\r\n  TypedArrayPrototypeGetSymbolToStringTag,\r\n  Uint8Array,\r\n  globalThis,\r\n  uncurryThis,\r\n} = primordials;\r\n\r\nconst {\r\n  constants: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE,\r\n    kPending,\r\n    kRejected,\r\n  },\r\n  getOwnNonIndexProperties,\r\n  getPromiseDetails,\r\n  getProxyDetails,\r\n  previewEntries,\r\n  getConstructorName: internalGetConstructorName,\r\n  getExternalValue,\r\n} = internalBinding('util');\r\n\r\nconst {\r\n  customInspectSymbol,\r\n  isError,\r\n  join,\r\n  removeColors,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isStackOverflowError,\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  isAsyncFunction,\r\n  isGeneratorFunction,\r\n  isAnyArrayBuffer,\r\n  isArrayBuffer,\r\n  isArgumentsObject,\r\n  isBoxedPrimitive,\r\n  isDataView,\r\n  isExternal,\r\n  isMap,\r\n  isMapIterator,\r\n  isModuleNamespaceObject,\r\n  isNativeError,\r\n  isPromise,\r\n  isSet,\r\n  isSetIterator,\r\n  isWeakMap,\r\n  isWeakSet,\r\n  isRegExp,\r\n  isDate,\r\n  isTypedArray,\r\n  isStringObject,\r\n  isNumberObject,\r\n  isBooleanObject,\r\n  isBigIntObject,\r\n} = require('internal/util/types');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst {\r\n  validateObject,\r\n  validateString,\r\n  kValidateObjectAllowArray,\r\n} = require('internal/validators');\r\n\r\nlet hexSlice;\r\nlet internalUrl;\r\n\r\nfunction pathToFileUrlHref(filepath) {\r\n  internalUrl ??= require('internal/url');\r\n  return internalUrl.pathToFileURL(filepath).href;\r\n}\r\n\r\nconst builtInObjects = new SafeSet(\r\n  ArrayPrototypeFilter(\r\n    ObjectGetOwnPropertyNames(globalThis),\r\n    (e) => RegExpPrototypeExec(/^[A-Z][a-zA-Z0-9]+$/, e) !== null,\r\n  ),\r\n);\r\n\r\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\r\nconst isUndetectableObject = (v) => typeof v === 'undefined' && v !== undefined;\r\n\r\n// These options must stay in sync with `getUserOptions`. So if any option will\r\n// be added or removed, `getUserOptions` must also be updated accordingly.\r\nconst inspectDefaultOptions = ObjectSeal({\r\n  showHidden: false,\r\n  depth: 2,\r\n  colors: false,\r\n  customInspect: true,\r\n  showProxy: false,\r\n  maxArrayLength: 100,\r\n  maxStringLength: 10000,\r\n  breakLength: 80,\r\n  compact: 3,\r\n  sorted: false,\r\n  getters: false,\r\n  numericSeparator: false,\r\n});\r\n\r\nconst kObjectType = 0;\r\nconst kArrayType = 1;\r\nconst kArrayExtrasType = 2;\r\n\r\n/* eslint-disable no-control-regex */\r\nconst strEscapeSequencesRegExp = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\r\nconst strEscapeSequencesReplacer = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\r\nconst strEscapeSequencesRegExpSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\r\nconst strEscapeSequencesReplacerSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\r\n/* eslint-enable no-control-regex */\r\n\r\nconst keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;\r\nconst numberRegExp = /^(0|[1-9][0-9]*)$/;\r\n\r\nconst coreModuleRegExp = /^ {4}at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$/;\r\nconst nodeModulesRegExp = /[/\\\\]node_modules[/\\\\](.+?)(?=[/\\\\])/g;\r\n\r\nconst classRegExp = /^(\\s+[^(]*?)\\s*{/;\r\n// eslint-disable-next-line node-core/no-unescaped-regexp-dot\r\nconst stripCommentsRegExp = /(\\/\\/.*?\\n)|(\\/\\*(.|\\n)*?\\*\\/)/g;\r\n\r\nconst kMinLineLength = 16;\r\n\r\n// Constants to map the iterator state.\r\nconst kWeak = 0;\r\nconst kIterator = 1;\r\nconst kMapEntries = 2;\r\n\r\n// Escaped control characters (plus the single quote and the backslash). Use\r\n// empty strings to fill up unused entries.\r\nconst meta = [\r\n  '\\\\x00', '\\\\x01', '\\\\x02', '\\\\x03', '\\\\x04', '\\\\x05', '\\\\x06', '\\\\x07', // x07\r\n  '\\\\b', '\\\\t', '\\\\n', '\\\\x0B', '\\\\f', '\\\\r', '\\\\x0E', '\\\\x0F',           // x0F\r\n  '\\\\x10', '\\\\x11', '\\\\x12', '\\\\x13', '\\\\x14', '\\\\x15', '\\\\x16', '\\\\x17', // x17\r\n  '\\\\x18', '\\\\x19', '\\\\x1A', '\\\\x1B', '\\\\x1C', '\\\\x1D', '\\\\x1E', '\\\\x1F', // x1F\r\n  '', '', '', '', '', '', '', \"\\\\'\", '', '', '', '', '', '', '', '',      // x2F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x3F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x4F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '\\\\\\\\', '', '', '',     // x5F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x6F\r\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '\\\\x7F',    // x7F\r\n  '\\\\x80', '\\\\x81', '\\\\x82', '\\\\x83', '\\\\x84', '\\\\x85', '\\\\x86', '\\\\x87', // x87\r\n  '\\\\x88', '\\\\x89', '\\\\x8A', '\\\\x8B', '\\\\x8C', '\\\\x8D', '\\\\x8E', '\\\\x8F', // x8F\r\n  '\\\\x90', '\\\\x91', '\\\\x92', '\\\\x93', '\\\\x94', '\\\\x95', '\\\\x96', '\\\\x97', // x97\r\n  '\\\\x98', '\\\\x99', '\\\\x9A', '\\\\x9B', '\\\\x9C', '\\\\x9D', '\\\\x9E', '\\\\x9F', // x9F\r\n];\r\n\r\n// Regex used for ansi escape code splitting\r\n// Adopted from https://github.com/chalk/ansi-regex/blob/HEAD/index.js\r\n// License: MIT, authors: @sindresorhus, Qix-, arjunmehta and LitoMore\r\n// Matches all ansi escape code sequences in a string\r\nconst ansiPattern = '[\\\\u001B\\\\u009B][[\\\\]()#;?]*' +\r\n  '(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*' +\r\n  '|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)' +\r\n  '|(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))';\r\nconst ansi = new RegExp(ansiPattern, 'g');\r\n\r\nlet getStringWidth;\r\n\r\nfunction getUserOptions(ctx, isCrossContext) {\r\n  const ret = {\r\n    stylize: ctx.stylize,\r\n    showHidden: ctx.showHidden,\r\n    depth: ctx.depth,\r\n    colors: ctx.colors,\r\n    customInspect: ctx.customInspect,\r\n    showProxy: ctx.showProxy,\r\n    maxArrayLength: ctx.maxArrayLength,\r\n    maxStringLength: ctx.maxStringLength,\r\n    breakLength: ctx.breakLength,\r\n    compact: ctx.compact,\r\n    sorted: ctx.sorted,\r\n    getters: ctx.getters,\r\n    numericSeparator: ctx.numericSeparator,\r\n    ...ctx.userOptions,\r\n  };\r\n\r\n  // Typically, the target value will be an instance of `Object`. If that is\r\n  // *not* the case, the object may come from another vm.Context, and we want\r\n  // to avoid passing it objects from this Context in that case, so we remove\r\n  // the prototype from the returned object itself + the `stylize()` function,\r\n  // and remove all other non-primitives, including non-primitive user options.\r\n  if (isCrossContext) {\r\n    ObjectSetPrototypeOf(ret, null);\r\n    for (const key of ObjectKeys(ret)) {\r\n      if ((typeof ret[key] === 'object' || typeof ret[key] === 'function') &&\r\n          ret[key] !== null) {\r\n        delete ret[key];\r\n      }\r\n    }\r\n    ret.stylize = ObjectSetPrototypeOf((value, flavour) => {\r\n      let stylized;\r\n      try {\r\n        stylized = `${ctx.stylize(value, flavour)}`;\r\n      } catch {\r\n        // Continue regardless of error.\r\n      }\r\n\r\n      if (typeof stylized !== 'string') return value;\r\n      // `stylized` is a string as it should be, which is safe to pass along.\r\n      return stylized;\r\n    }, null);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Echos the value of any input. Tries to print the value out\r\n * in the best way possible given the different types.\r\n * @param {any} value The value to print out.\r\n * @param {object} opts Optional options object that alters the output.\r\n */\r\n/* Legacy: value, showHidden, depth, colors */\r\nfunction inspect(value, opts) {\r\n  // Default options\r\n  const ctx = {\r\n    budget: {},\r\n    indentationLvl: 0,\r\n    seen: [],\r\n    currentDepth: 0,\r\n    stylize: stylizeNoColor,\r\n    showHidden: inspectDefaultOptions.showHidden,\r\n    depth: inspectDefaultOptions.depth,\r\n    colors: inspectDefaultOptions.colors,\r\n    customInspect: inspectDefaultOptions.customInspect,\r\n    showProxy: inspectDefaultOptions.showProxy,\r\n    maxArrayLength: inspectDefaultOptions.maxArrayLength,\r\n    maxStringLength: inspectDefaultOptions.maxStringLength,\r\n    breakLength: inspectDefaultOptions.breakLength,\r\n    compact: inspectDefaultOptions.compact,\r\n    sorted: inspectDefaultOptions.sorted,\r\n    getters: inspectDefaultOptions.getters,\r\n    numericSeparator: inspectDefaultOptions.numericSeparator,\r\n  };\r\n  if (arguments.length > 1) {\r\n    // Legacy...\r\n    if (arguments.length > 2) {\r\n      if (arguments[2] !== undefined) {\r\n        ctx.depth = arguments[2];\r\n      }\r\n      if (arguments.length > 3 && arguments[3] !== undefined) {\r\n        ctx.colors = arguments[3];\r\n      }\r\n    }\r\n    // Set user-specified options\r\n    if (typeof opts === 'boolean') {\r\n      ctx.showHidden = opts;\r\n    } else if (opts) {\r\n      const optKeys = ObjectKeys(opts);\r\n      for (let i = 0; i < optKeys.length; ++i) {\r\n        const key = optKeys[i];\r\n        // TODO(BridgeAR): Find a solution what to do about stylize. Either make\r\n        // this function public or add a new API with a similar or better\r\n        // functionality.\r\n        if (\r\n          ObjectPrototypeHasOwnProperty(inspectDefaultOptions, key) ||\r\n          key === 'stylize') {\r\n          ctx[key] = opts[key];\r\n        } else if (ctx.userOptions === undefined) {\r\n          // This is required to pass through the actual user input.\r\n          ctx.userOptions = opts;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\r\n  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;\r\n  if (ctx.maxStringLength === null) ctx.maxStringLength = Infinity;\r\n  return formatValue(ctx, value, 0);\r\n}\r\ninspect.custom = customInspectSymbol;\r\n\r\nObjectDefineProperty(inspect, 'defaultOptions', {\r\n  __proto__: null,\r\n  get() {\r\n    return inspectDefaultOptions;\r\n  },\r\n  set(options) {\r\n    validateObject(options, 'options');\r\n    return ObjectAssign(inspectDefaultOptions, options);\r\n  },\r\n});\r\n\r\n// Set Graphics Rendition https://en.wikipedia.org/wiki/ANSI_escape_code#graphics\r\n// Each color consists of an array with the color code as first entry and the\r\n// reset code as second entry.\r\nconst defaultFG = 39;\r\nconst defaultBG = 49;\r\ninspect.colors = {\r\n  __proto__: null,\r\n  reset: [0, 0],\r\n  bold: [1, 22],\r\n  dim: [2, 22], // Alias: faint\r\n  italic: [3, 23],\r\n  underline: [4, 24],\r\n  blink: [5, 25],\r\n  // Swap foreground and background colors\r\n  inverse: [7, 27], // Alias: swapcolors, swapColors\r\n  hidden: [8, 28], // Alias: conceal\r\n  strikethrough: [9, 29], // Alias: strikeThrough, crossedout, crossedOut\r\n  doubleunderline: [21, 24], // Alias: doubleUnderline\r\n  black: [30, defaultFG],\r\n  red: [31, defaultFG],\r\n  green: [32, defaultFG],\r\n  yellow: [33, defaultFG],\r\n  blue: [34, defaultFG],\r\n  magenta: [35, defaultFG],\r\n  cyan: [36, defaultFG],\r\n  white: [37, defaultFG],\r\n  bgBlack: [40, defaultBG],\r\n  bgRed: [41, defaultBG],\r\n  bgGreen: [42, defaultBG],\r\n  bgYellow: [43, defaultBG],\r\n  bgBlue: [44, defaultBG],\r\n  bgMagenta: [45, defaultBG],\r\n  bgCyan: [46, defaultBG],\r\n  bgWhite: [47, defaultBG],\r\n  framed: [51, 54],\r\n  overlined: [53, 55],\r\n  gray: [90, defaultFG], // Alias: grey, blackBright\r\n  redBright: [91, defaultFG],\r\n  greenBright: [92, defaultFG],\r\n  yellowBright: [93, defaultFG],\r\n  blueBright: [94, defaultFG],\r\n  magentaBright: [95, defaultFG],\r\n  cyanBright: [96, defaultFG],\r\n  whiteBright: [97, defaultFG],\r\n  bgGray: [100, defaultBG], // Alias: bgGrey, bgBlackBright\r\n  bgRedBright: [101, defaultBG],\r\n  bgGreenBright: [102, defaultBG],\r\n  bgYellowBright: [103, defaultBG],\r\n  bgBlueBright: [104, defaultBG],\r\n  bgMagentaBright: [105, defaultBG],\r\n  bgCyanBright: [106, defaultBG],\r\n  bgWhiteBright: [107, defaultBG],\r\n};\r\n\r\nfunction defineColorAlias(target, alias) {\r\n  ObjectDefineProperty(inspect.colors, alias, {\r\n    __proto__: null,\r\n    get() {\r\n      return this[target];\r\n    },\r\n    set(value) {\r\n      this[target] = value;\r\n    },\r\n    configurable: true,\r\n    enumerable: false,\r\n  });\r\n}\r\n\r\ndefineColorAlias('gray', 'grey');\r\ndefineColorAlias('gray', 'blackBright');\r\ndefineColorAlias('bgGray', 'bgGrey');\r\ndefineColorAlias('bgGray', 'bgBlackBright');\r\ndefineColorAlias('dim', 'faint');\r\ndefineColorAlias('strikethrough', 'crossedout');\r\ndefineColorAlias('strikethrough', 'strikeThrough');\r\ndefineColorAlias('strikethrough', 'crossedOut');\r\ndefineColorAlias('hidden', 'conceal');\r\ndefineColorAlias('inverse', 'swapColors');\r\ndefineColorAlias('inverse', 'swapcolors');\r\ndefineColorAlias('doubleunderline', 'doubleUnderline');\r\n\r\n// TODO(BridgeAR): Add function style support for more complex styles.\r\n// Don't use 'blue' not visible on cmd.exe\r\ninspect.styles = ObjectAssign({ __proto__: null }, {\r\n  special: 'cyan',\r\n  number: 'yellow',\r\n  bigint: 'yellow',\r\n  boolean: 'yellow',\r\n  undefined: 'grey',\r\n  null: 'bold',\r\n  string: 'green',\r\n  symbol: 'green',\r\n  date: 'magenta',\r\n  // \"name\": intentionally not styling\r\n  // TODO(BridgeAR): Highlight regular expressions properly.\r\n  regexp: 'red',\r\n  module: 'underline',\r\n});\r\n\r\nfunction addQuotes(str, quotes) {\r\n  if (quotes === -1) {\r\n    return `\"${str}\"`;\r\n  }\r\n  if (quotes === -2) {\r\n    return `\\`${str}\\``;\r\n  }\r\n  return `'${str}'`;\r\n}\r\n\r\nfunction escapeFn(str) {\r\n  const charCode = StringPrototypeCharCodeAt(str);\r\n  return meta.length > charCode ? meta[charCode] : `\\\\u${NumberPrototypeToString(charCode, 16)}`;\r\n}\r\n\r\n// Escape control characters, single quotes and the backslash.\r\n// This is similar to JSON stringify escaping.\r\nfunction strEscape(str) {\r\n  let escapeTest = strEscapeSequencesRegExp;\r\n  let escapeReplace = strEscapeSequencesReplacer;\r\n  let singleQuote = 39;\r\n\r\n  // Check for double quotes. If not present, do not escape single quotes and\r\n  // instead wrap the text in double quotes. If double quotes exist, check for\r\n  // backticks. If they do not exist, use those as fallback instead of the\r\n  // double quotes.\r\n  if (StringPrototypeIncludes(str, \"'\")) {\r\n    // This invalidates the charCode and therefore can not be matched for\r\n    // anymore.\r\n    if (!StringPrototypeIncludes(str, '\"')) {\r\n      singleQuote = -1;\r\n    } else if (!StringPrototypeIncludes(str, '`') &&\r\n               !StringPrototypeIncludes(str, '${')) {\r\n      singleQuote = -2;\r\n    }\r\n    if (singleQuote !== 39) {\r\n      escapeTest = strEscapeSequencesRegExpSingle;\r\n      escapeReplace = strEscapeSequencesReplacerSingle;\r\n    }\r\n  }\r\n\r\n  // Some magic numbers that worked out fine while benchmarking with v8 6.0\r\n  if (str.length < 5000 && RegExpPrototypeExec(escapeTest, str) === null)\r\n    return addQuotes(str, singleQuote);\r\n  if (str.length > 100) {\r\n    str = RegExpPrototypeSymbolReplace(escapeReplace, str, escapeFn);\r\n    return addQuotes(str, singleQuote);\r\n  }\r\n\r\n  let result = '';\r\n  let last = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const point = StringPrototypeCharCodeAt(str, i);\r\n    if (point === singleQuote ||\r\n        point === 92 ||\r\n        point < 32 ||\r\n        (point > 126 && point < 160)) {\r\n      if (last === i) {\r\n        result += meta[point];\r\n      } else {\r\n        result += `${StringPrototypeSlice(str, last, i)}${meta[point]}`;\r\n      }\r\n      last = i + 1;\r\n    } else if (point >= 0xd800 && point <= 0xdfff) {\r\n      if (point <= 0xdbff && i + 1 < str.length) {\r\n        const point = StringPrototypeCharCodeAt(str, i + 1);\r\n        if (point >= 0xdc00 && point <= 0xdfff) {\r\n          i++;\r\n          continue;\r\n        }\r\n      }\r\n      result += `${StringPrototypeSlice(str, last, i)}\\\\u${NumberPrototypeToString(point, 16)}`;\r\n      last = i + 1;\r\n    }\r\n  }\r\n\r\n  if (last !== str.length) {\r\n    result += StringPrototypeSlice(str, last);\r\n  }\r\n  return addQuotes(result, singleQuote);\r\n}\r\n\r\nfunction stylizeWithColor(str, styleType) {\r\n  const style = inspect.styles[styleType];\r\n  if (style !== undefined) {\r\n    const color = inspect.colors[style];\r\n    if (color !== undefined)\r\n      return `\\u001b[${color[0]}m${str}\\u001b[${color[1]}m`;\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction stylizeNoColor(str) {\r\n  return str;\r\n}\r\n\r\n// Return a new empty array to push in the results of the default formatter.\r\nfunction getEmptyFormatArray() {\r\n  return [];\r\n}\r\n\r\nfunction isInstanceof(object, proto) {\r\n  try {\r\n    return object instanceof proto;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getConstructorName(obj, ctx, recurseTimes, protoProps) {\r\n  let firstProto;\r\n  const tmp = obj;\r\n  while (obj || isUndetectableObject(obj)) {\r\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '' &&\r\n        isInstanceof(tmp, descriptor.value)) {\r\n      if (protoProps !== undefined &&\r\n         (firstProto !== obj ||\r\n         !builtInObjects.has(descriptor.value.name))) {\r\n        addPrototypeProperties(\r\n          ctx, tmp, firstProto || tmp, recurseTimes, protoProps);\r\n      }\r\n      return String(descriptor.value.name);\r\n    }\r\n\r\n    obj = ObjectGetPrototypeOf(obj);\r\n    if (firstProto === undefined) {\r\n      firstProto = obj;\r\n    }\r\n  }\r\n\r\n  if (firstProto === null) {\r\n    return null;\r\n  }\r\n\r\n  const res = internalGetConstructorName(tmp);\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return `${res} <Complex prototype>`;\r\n  }\r\n\r\n  const protoConstr = getConstructorName(\r\n    firstProto, ctx, recurseTimes + 1, protoProps);\r\n\r\n  if (protoConstr === null) {\r\n    return `${res} <${inspect(firstProto, {\r\n      ...ctx,\r\n      customInspect: false,\r\n      depth: -1,\r\n    })}>`;\r\n  }\r\n\r\n  return `${res} <${protoConstr}>`;\r\n}\r\n\r\n// This function has the side effect of adding prototype properties to the\r\n// `output` argument (which is an array). This is intended to highlight user\r\n// defined prototype properties.\r\nfunction addPrototypeProperties(ctx, main, obj, recurseTimes, output) {\r\n  let depth = 0;\r\n  let keys;\r\n  let keySet;\r\n  do {\r\n    if (depth !== 0 || main === obj) {\r\n      obj = ObjectGetPrototypeOf(obj);\r\n      // Stop as soon as a null prototype is encountered.\r\n      if (obj === null) {\r\n        return;\r\n      }\r\n      // Stop as soon as a built-in object type is detected.\r\n      const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');\r\n      if (descriptor !== undefined &&\r\n          typeof descriptor.value === 'function' &&\r\n          builtInObjects.has(descriptor.value.name)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (depth === 0) {\r\n      keySet = new SafeSet();\r\n    } else {\r\n      ArrayPrototypeForEach(keys, (key) => keySet.add(key));\r\n    }\r\n    // Get all own property names and symbols.\r\n    keys = ReflectOwnKeys(obj);\r\n    ArrayPrototypePush(ctx.seen, main);\r\n    for (const key of keys) {\r\n      // Ignore the `constructor` property and keys that exist on layers above.\r\n      if (key === 'constructor' ||\r\n          ObjectPrototypeHasOwnProperty(main, key) ||\r\n          (depth !== 0 && keySet.has(key))) {\r\n        continue;\r\n      }\r\n      const desc = ObjectGetOwnPropertyDescriptor(obj, key);\r\n      if (typeof desc.value === 'function') {\r\n        continue;\r\n      }\r\n      const value = formatProperty(\r\n        ctx, obj, recurseTimes, key, kObjectType, desc, main);\r\n      if (ctx.colors) {\r\n        // Faint!\r\n        ArrayPrototypePush(output, `\\u001b[2m${value}\\u001b[22m`);\r\n      } else {\r\n        ArrayPrototypePush(output, value);\r\n      }\r\n    }\r\n    ArrayPrototypePop(ctx.seen);\r\n  // Limit the inspection to up to three prototype layers. Using `recurseTimes`\r\n  // is not a good choice here, because it's as if the properties are declared\r\n  // on the current object from the users perspective.\r\n  } while (++depth !== 3);\r\n}\r\n\r\nfunction getPrefix(constructor, tag, fallback, size = '') {\r\n  if (constructor === null) {\r\n    if (tag !== '' && fallback !== tag) {\r\n      return `[${fallback}${size}: null prototype] [${tag}] `;\r\n    }\r\n    return `[${fallback}${size}: null prototype] `;\r\n  }\r\n\r\n  if (tag !== '' && constructor !== tag) {\r\n    return `${constructor}${size} [${tag}] `;\r\n  }\r\n  return `${constructor}${size} `;\r\n}\r\n\r\n// Look up the keys of the object.\r\nfunction getKeys(value, showHidden) {\r\n  let keys;\r\n  const symbols = ObjectGetOwnPropertySymbols(value);\r\n  if (showHidden) {\r\n    keys = ObjectGetOwnPropertyNames(value);\r\n    if (symbols.length !== 0)\r\n      ArrayPrototypePushApply(keys, symbols);\r\n  } else {\r\n    // This might throw if `value` is a Module Namespace Object from an\r\n    // unevaluated module, but we don't want to perform the actual type\r\n    // check because it's expensive.\r\n    // TODO(devsnek): track https://github.com/tc39/ecma262/issues/1209\r\n    // and modify this logic as needed.\r\n    try {\r\n      keys = ObjectKeys(value);\r\n    } catch (err) {\r\n      assert(isNativeError(err) && err.name === 'ReferenceError' &&\r\n             isModuleNamespaceObject(value));\r\n      keys = ObjectGetOwnPropertyNames(value);\r\n    }\r\n    if (symbols.length !== 0) {\r\n      const filter = (key) => ObjectPrototypePropertyIsEnumerable(value, key);\r\n      ArrayPrototypePushApply(keys, ArrayPrototypeFilter(symbols, filter));\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction getCtxStyle(value, constructor, tag) {\r\n  let fallback = '';\r\n  if (constructor === null) {\r\n    fallback = internalGetConstructorName(value);\r\n    if (fallback === tag) {\r\n      fallback = 'Object';\r\n    }\r\n  }\r\n  return getPrefix(constructor, tag, fallback);\r\n}\r\n\r\nfunction formatProxy(ctx, proxy, recurseTimes) {\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return ctx.stylize('Proxy [Array]', 'special');\r\n  }\r\n  recurseTimes += 1;\r\n  ctx.indentationLvl += 2;\r\n  const res = [\r\n    formatValue(ctx, proxy[0], recurseTimes),\r\n    formatValue(ctx, proxy[1], recurseTimes),\r\n  ];\r\n  ctx.indentationLvl -= 2;\r\n  return reduceToSingleString(\r\n    ctx, res, '', ['Proxy [', ']'], kArrayExtrasType, recurseTimes);\r\n}\r\n\r\n// Note: using `formatValue` directly requires the indentation level to be\r\n// corrected by setting `ctx.indentationLvL += diff` and then to decrease the\r\n// value afterwards again.\r\nfunction formatValue(ctx, value, recurseTimes, typedArray) {\r\n  // Primitive types cannot have properties.\r\n  if (typeof value !== 'object' &&\r\n      typeof value !== 'function' &&\r\n      !isUndetectableObject(value)) {\r\n    return formatPrimitive(ctx.stylize, value, ctx);\r\n  }\r\n  if (value === null) {\r\n    return ctx.stylize('null', 'null');\r\n  }\r\n\r\n  // Memorize the context for custom inspection on proxies.\r\n  const context = value;\r\n  // Always check for proxies to prevent side effects and to prevent triggering\r\n  // any proxy handlers.\r\n  const proxy = getProxyDetails(value, !!ctx.showProxy);\r\n  if (proxy !== undefined) {\r\n    if (proxy === null || proxy[0] === null) {\r\n      return ctx.stylize('<Revoked Proxy>', 'special');\r\n    }\r\n    if (ctx.showProxy) {\r\n      return formatProxy(ctx, proxy, recurseTimes);\r\n    }\r\n    value = proxy;\r\n  }\r\n\r\n  // Provide a hook for user-specified inspect functions.\r\n  // Check that value is an object with an inspect function on it.\r\n  if (ctx.customInspect) {\r\n    const maybeCustom = value[customInspectSymbol];\r\n    if (typeof maybeCustom === 'function' &&\r\n        // Filter out the util module, its inspect function is special.\r\n        maybeCustom !== inspect &&\r\n        // Also filter out any prototype objects using the circular check.\r\n        !(value.constructor && value.constructor.prototype === value)) {\r\n      // This makes sure the recurseTimes are reported as before while using\r\n      // a counter internally.\r\n      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;\r\n      const isCrossContext =\r\n        proxy !== undefined || !(context instanceof Object);\r\n      const ret = FunctionPrototypeCall(\r\n        maybeCustom,\r\n        context,\r\n        depth,\r\n        getUserOptions(ctx, isCrossContext),\r\n        inspect,\r\n      );\r\n      // If the custom inspection method returned `this`, don't go into\r\n      // infinite recursion.\r\n      if (ret !== context) {\r\n        if (typeof ret !== 'string') {\r\n          return formatValue(ctx, ret, recurseTimes);\r\n        }\r\n        return StringPrototypeReplaceAll(ret, '\\n', `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Using an array here is actually better for the average case than using\r\n  // a Set. `seen` will only check for the depth and will never grow too large.\r\n  if (ctx.seen.includes(value)) {\r\n    let index = 1;\r\n    if (ctx.circular === undefined) {\r\n      ctx.circular = new SafeMap();\r\n      ctx.circular.set(value, index);\r\n    } else {\r\n      index = ctx.circular.get(value);\r\n      if (index === undefined) {\r\n        index = ctx.circular.size + 1;\r\n        ctx.circular.set(value, index);\r\n      }\r\n    }\r\n    return ctx.stylize(`[Circular *${index}]`, 'special');\r\n  }\r\n\r\n  return formatRaw(ctx, value, recurseTimes, typedArray);\r\n}\r\n\r\nfunction formatRaw(ctx, value, recurseTimes, typedArray) {\r\n  let keys;\r\n  let protoProps;\r\n  if (ctx.showHidden && (recurseTimes <= ctx.depth || ctx.depth === null)) {\r\n    protoProps = [];\r\n  }\r\n\r\n  const constructor = getConstructorName(value, ctx, recurseTimes, protoProps);\r\n  // Reset the variable to check for this later on.\r\n  if (protoProps !== undefined && protoProps.length === 0) {\r\n    protoProps = undefined;\r\n  }\r\n\r\n  let tag = value[SymbolToStringTag];\r\n  // Only list the tag in case it's non-enumerable / not an own property.\r\n  // Otherwise we'd print this twice.\r\n  if (typeof tag !== 'string' ||\r\n      (tag !== '' &&\r\n      (ctx.showHidden ?\r\n        ObjectPrototypeHasOwnProperty :\r\n        ObjectPrototypePropertyIsEnumerable)(\r\n        value, SymbolToStringTag,\r\n      ))) {\r\n    tag = '';\r\n  }\r\n  let base = '';\r\n  let formatter = getEmptyFormatArray;\r\n  let braces;\r\n  let noIterator = true;\r\n  let i = 0;\r\n  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n\r\n  let extrasType = kObjectType;\r\n\r\n  // Iterators and the rest are split to reduce checks.\r\n  // We have to check all values in case the constructor is set to null.\r\n  // Otherwise it would not possible to identify all types properly.\r\n  if (SymbolIterator in value || constructor === null) {\r\n    noIterator = false;\r\n    if (ArrayIsArray(value)) {\r\n      // Only set the constructor for non ordinary (\"Array [...]\") arrays.\r\n      const prefix = (constructor !== 'Array' || tag !== '') ?\r\n        getPrefix(constructor, tag, 'Array', `(${value.length})`) :\r\n        '';\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      braces = [`${prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${braces[0]}]`;\r\n      extrasType = kArrayExtrasType;\r\n      formatter = formatArray;\r\n    } else if (isSet(value)) {\r\n      const size = SetPrototypeGetSize(value);\r\n      const prefix = getPrefix(constructor, tag, 'Set', `(${size})`);\r\n      keys = getKeys(value, ctx.showHidden);\r\n      formatter = constructor !== null ?\r\n        FunctionPrototypeBind(formatSet, null, value) :\r\n        FunctionPrototypeBind(formatSet, null, SetPrototypeValues(value));\r\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n    } else if (isMap(value)) {\r\n      const size = MapPrototypeGetSize(value);\r\n      const prefix = getPrefix(constructor, tag, 'Map', `(${size})`);\r\n      keys = getKeys(value, ctx.showHidden);\r\n      formatter = constructor !== null ?\r\n        FunctionPrototypeBind(formatMap, null, value) :\r\n        FunctionPrototypeBind(formatMap, null, MapPrototypeEntries(value));\r\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n    } else if (isTypedArray(value)) {\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      let bound = value;\r\n      let fallback = '';\r\n      if (constructor === null) {\r\n        fallback = TypedArrayPrototypeGetSymbolToStringTag(value);\r\n        // Reconstruct the array information.\r\n        bound = new primordials[fallback](value);\r\n      }\r\n      const size = TypedArrayPrototypeGetLength(value);\r\n      const prefix = getPrefix(constructor, tag, fallback, `(${size})`);\r\n      braces = [`${prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0 && !ctx.showHidden)\r\n        return `${braces[0]}]`;\r\n      // Special handle the value. The original value is required below. The\r\n      // bound function is required to reconstruct missing information.\r\n      formatter = FunctionPrototypeBind(formatTypedArray, null, bound, size);\r\n      extrasType = kArrayExtrasType;\r\n    } else if (isMapIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Map', tag);\r\n      // Add braces to the formatter parameters.\r\n      formatter = FunctionPrototypeBind(formatIterator, null, braces);\r\n    } else if (isSetIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Set', tag);\r\n      // Add braces to the formatter parameters.\r\n      formatter = FunctionPrototypeBind(formatIterator, null, braces);\r\n    } else {\r\n      noIterator = true;\r\n    }\r\n  }\r\n  if (noIterator) {\r\n    keys = getKeys(value, ctx.showHidden);\r\n    braces = ['{', '}'];\r\n    if (constructor === 'Object') {\r\n      if (isArgumentsObject(value)) {\r\n        braces[0] = '[Arguments] {';\r\n      } else if (tag !== '') {\r\n        braces[0] = `${getPrefix(constructor, tag, 'Object')}{`;\r\n      }\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return `${braces[0]}}`;\r\n      }\r\n    } else if (typeof value === 'function') {\r\n      base = getFunctionBase(value, constructor, tag);\r\n      if (keys.length === 0 && protoProps === undefined)\r\n        return ctx.stylize(base, 'special');\r\n    } else if (isRegExp(value)) {\r\n      // Make RegExps say that they are RegExps\r\n      base = RegExpPrototypeToString(\r\n        constructor !== null ? value : new RegExp(value),\r\n      );\r\n      const prefix = getPrefix(constructor, tag, 'RegExp');\r\n      if (prefix !== 'RegExp ')\r\n        base = `${prefix}${base}`;\r\n      if ((keys.length === 0 && protoProps === undefined) ||\r\n          (recurseTimes > ctx.depth && ctx.depth !== null)) {\r\n        return ctx.stylize(base, 'regexp');\r\n      }\r\n    } else if (isDate(value)) {\r\n      // Make dates with properties first say the date\r\n      base = NumberIsNaN(DatePrototypeGetTime(value)) ?\r\n        DatePrototypeToString(value) :\r\n        DatePrototypeToISOString(value);\r\n      const prefix = getPrefix(constructor, tag, 'Date');\r\n      if (prefix !== 'Date ')\r\n        base = `${prefix}${base}`;\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return ctx.stylize(base, 'date');\r\n      }\r\n    } else if (isError(value)) {\r\n      base = formatError(value, constructor, tag, ctx, keys);\r\n      if (keys.length === 0 && protoProps === undefined)\r\n        return base;\r\n    } else if (isAnyArrayBuffer(value)) {\r\n      // Fast path for ArrayBuffer and SharedArrayBuffer.\r\n      // Can't do the same for DataView because it has a non-primitive\r\n      // .buffer property that we need to recurse for.\r\n      const arrayType = isArrayBuffer(value) ? 'ArrayBuffer' :\r\n        'SharedArrayBuffer';\r\n      const prefix = getPrefix(constructor, tag, arrayType);\r\n      if (typedArray === undefined) {\r\n        formatter = formatArrayBuffer;\r\n      } else if (keys.length === 0 && protoProps === undefined) {\r\n        return prefix +\r\n              `{ byteLength: ${formatNumber(ctx.stylize, value.byteLength, false)} }`;\r\n      }\r\n      braces[0] = `${prefix}{`;\r\n      ArrayPrototypeUnshift(keys, 'byteLength');\r\n    } else if (isDataView(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'DataView')}{`;\r\n      // .buffer goes last, it's not a primitive like the others.\r\n      ArrayPrototypeUnshift(keys, 'byteLength', 'byteOffset', 'buffer');\r\n    } else if (isPromise(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'Promise')}{`;\r\n      formatter = formatPromise;\r\n    } else if (isWeakSet(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakSet')}{`;\r\n      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;\r\n    } else if (isWeakMap(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakMap')}{`;\r\n      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;\r\n    } else if (isModuleNamespaceObject(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'Module')}{`;\r\n      // Special handle keys for namespace objects.\r\n      formatter = formatNamespaceObject.bind(null, keys);\r\n    } else if (isBoxedPrimitive(value)) {\r\n      base = getBoxedBase(value, ctx, keys, constructor, tag);\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        return base;\r\n      }\r\n    } else {\r\n      if (keys.length === 0 && protoProps === undefined) {\r\n        if (isExternal(value)) {\r\n          const address = getExternalValue(value).toString(16);\r\n          return ctx.stylize(`[External: ${address}]`, 'special');\r\n        }\r\n        return `${getCtxStyle(value, constructor, tag)}{}`;\r\n      }\r\n      braces[0] = `${getCtxStyle(value, constructor, tag)}{`;\r\n    }\r\n  }\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    let constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);\r\n    if (constructor !== null)\r\n      constructorName = `[${constructorName}]`;\r\n    return ctx.stylize(constructorName, 'special');\r\n  }\r\n  recurseTimes += 1;\r\n\r\n  ctx.seen.push(value);\r\n  ctx.currentDepth = recurseTimes;\r\n  let output;\r\n  const indentationLvl = ctx.indentationLvl;\r\n  try {\r\n    output = formatter(ctx, value, recurseTimes);\r\n    for (i = 0; i < keys.length; i++) {\r\n      ArrayPrototypePush(\r\n        output,\r\n        formatProperty(ctx, value, recurseTimes, keys[i], extrasType),\r\n      );\r\n    }\r\n    if (protoProps !== undefined) {\r\n      ArrayPrototypePushApply(output, protoProps);\r\n    }\r\n  } catch (err) {\r\n    const constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);\r\n    return handleMaxCallStackSize(ctx, err, constructorName, indentationLvl);\r\n  }\r\n  if (ctx.circular !== undefined) {\r\n    const index = ctx.circular.get(value);\r\n    if (index !== undefined) {\r\n      const reference = ctx.stylize(`<ref *${index}>`, 'special');\r\n      // Add reference always to the very beginning of the output.\r\n      if (ctx.compact !== true) {\r\n        base = base === '' ? reference : `${reference} ${base}`;\r\n      } else {\r\n        braces[0] = `${reference} ${braces[0]}`;\r\n      }\r\n    }\r\n  }\r\n  ctx.seen.pop();\r\n\r\n  if (ctx.sorted) {\r\n    const comparator = ctx.sorted === true ? undefined : ctx.sorted;\r\n    if (extrasType === kObjectType) {\r\n      ArrayPrototypeSort(output, comparator);\r\n    } else if (keys.length > 1) {\r\n      const sorted = ArrayPrototypeSort(ArrayPrototypeSlice(output, output.length - keys.length), comparator);\r\n      ArrayPrototypeUnshift(sorted, output, output.length - keys.length, keys.length);\r\n      ReflectApply(ArrayPrototypeSplice, null, sorted);\r\n    }\r\n  }\r\n\r\n  const res = reduceToSingleString(\r\n    ctx, output, base, braces, extrasType, recurseTimes, value);\r\n  const budget = ctx.budget[ctx.indentationLvl] || 0;\r\n  const newLength = budget + res.length;\r\n  ctx.budget[ctx.indentationLvl] = newLength;\r\n  // If any indentationLvl exceeds this limit, limit further inspecting to the\r\n  // minimum. Otherwise the recursive algorithm might continue inspecting the\r\n  // object even though the maximum string size (~2 ** 28 on 32 bit systems and\r\n  // ~2 ** 30 on 64 bit systems) exceeded. The actual output is not limited at\r\n  // exactly 2 ** 27 but a bit higher. This depends on the object shape.\r\n  // This limit also makes sure that huge objects don't block the event loop\r\n  // significantly.\r\n  if (newLength > 2 ** 27) {\r\n    ctx.depth = -1;\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction getIteratorBraces(type, tag) {\r\n  if (tag !== `${type} Iterator`) {\r\n    if (tag !== '')\r\n      tag += '] [';\r\n    tag += `${type} Iterator`;\r\n  }\r\n  return [`[${tag}] {`, '}'];\r\n}\r\n\r\nfunction getBoxedBase(value, ctx, keys, constructor, tag) {\r\n  let fn;\r\n  let type;\r\n  if (isNumberObject(value)) {\r\n    fn = NumberPrototypeValueOf;\r\n    type = 'Number';\r\n  } else if (isStringObject(value)) {\r\n    fn = StringPrototypeValueOf;\r\n    type = 'String';\r\n    // For boxed Strings, we have to remove the 0-n indexed entries,\r\n    // since they just noisy up the output and are redundant\r\n    // Make boxed primitive Strings look like such\r\n    keys.splice(0, value.length);\r\n  } else if (isBooleanObject(value)) {\r\n    fn = BooleanPrototypeValueOf;\r\n    type = 'Boolean';\r\n  } else if (isBigIntObject(value)) {\r\n    fn = BigIntPrototypeValueOf;\r\n    type = 'BigInt';\r\n  } else {\r\n    fn = SymbolPrototypeValueOf;\r\n    type = 'Symbol';\r\n  }\r\n  let base = `[${type}`;\r\n  if (type !== constructor) {\r\n    if (constructor === null) {\r\n      base += ' (null prototype)';\r\n    } else {\r\n      base += ` (${constructor})`;\r\n    }\r\n  }\r\n  base += `: ${formatPrimitive(stylizeNoColor, fn(value), ctx)}]`;\r\n  if (tag !== '' && tag !== constructor) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  if (keys.length !== 0 || ctx.stylize === stylizeNoColor)\r\n    return base;\r\n  return ctx.stylize(base, StringPrototypeToLowerCase(type));\r\n}\r\n\r\nfunction getClassBase(value, constructor, tag) {\r\n  const hasName = ObjectPrototypeHasOwnProperty(value, 'name');\r\n  const name = (hasName && value.name) || '(anonymous)';\r\n  let base = `class ${name}`;\r\n  if (constructor !== 'Function' && constructor !== null) {\r\n    base += ` [${constructor}]`;\r\n  }\r\n  if (tag !== '' && constructor !== tag) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  if (constructor !== null) {\r\n    const superName = ObjectGetPrototypeOf(value).name;\r\n    if (superName) {\r\n      base += ` extends ${superName}`;\r\n    }\r\n  } else {\r\n    base += ' extends [null prototype]';\r\n  }\r\n  return `[${base}]`;\r\n}\r\n\r\nfunction getFunctionBase(value, constructor, tag) {\r\n  const stringified = FunctionPrototypeToString(value);\r\n  if (StringPrototypeStartsWith(stringified, 'class') && StringPrototypeEndsWith(stringified, '}')) {\r\n    const slice = StringPrototypeSlice(stringified, 5, -1);\r\n    const bracketIndex = StringPrototypeIndexOf(slice, '{');\r\n    if (bracketIndex !== -1 &&\r\n        (!StringPrototypeIncludes(StringPrototypeSlice(slice, 0, bracketIndex), '(') ||\r\n        // Slow path to guarantee that it's indeed a class.\r\n        RegExpPrototypeExec(classRegExp, RegExpPrototypeSymbolReplace(stripCommentsRegExp, slice)) !== null)\r\n    ) {\r\n      return getClassBase(value, constructor, tag);\r\n    }\r\n  }\r\n  let type = 'Function';\r\n  if (isGeneratorFunction(value)) {\r\n    type = `Generator${type}`;\r\n  }\r\n  if (isAsyncFunction(value)) {\r\n    type = `Async${type}`;\r\n  }\r\n  let base = `[${type}`;\r\n  if (constructor === null) {\r\n    base += ' (null prototype)';\r\n  }\r\n  if (value.name === '') {\r\n    base += ' (anonymous)';\r\n  } else {\r\n    base += `: ${value.name}`;\r\n  }\r\n  base += ']';\r\n  if (constructor !== type && constructor !== null) {\r\n    base += ` ${constructor}`;\r\n  }\r\n  if (tag !== '' && constructor !== tag) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  return base;\r\n}\r\n\r\nfunction identicalSequenceRange(a, b) {\r\n  for (let i = 0; i < a.length - 3; i++) {\r\n    // Find the first entry of b that matches the current entry of a.\r\n    const pos = ArrayPrototypeIndexOf(b, a[i]);\r\n    if (pos !== -1) {\r\n      const rest = b.length - pos;\r\n      if (rest > 3) {\r\n        let len = 1;\r\n        const maxLen = MathMin(a.length - i, rest);\r\n        // Count the number of consecutive entries.\r\n        while (maxLen > len && a[i + len] === b[pos + len]) {\r\n          len++;\r\n        }\r\n        if (len > 3) {\r\n          return { len, offset: i };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { len: 0, offset: 0 };\r\n}\r\n\r\nfunction getStackString(error) {\r\n  return error.stack ? String(error.stack) : ErrorPrototypeToString(error);\r\n}\r\n\r\nfunction getStackFrames(ctx, err, stack) {\r\n  const frames = StringPrototypeSplit(stack, '\\n');\r\n\r\n  let cause;\r\n  try {\r\n    ({ cause } = err);\r\n  } catch {\r\n    // If 'cause' is a getter that throws, ignore it.\r\n  }\r\n\r\n  // Remove stack frames identical to frames in cause.\r\n  if (cause != null && isError(cause)) {\r\n    const causeStack = getStackString(cause);\r\n    const causeStackStart = StringPrototypeIndexOf(causeStack, '\\n    at');\r\n    if (causeStackStart !== -1) {\r\n      const causeFrames = StringPrototypeSplit(StringPrototypeSlice(causeStack, causeStackStart + 1), '\\n');\r\n      const { len, offset } = identicalSequenceRange(frames, causeFrames);\r\n      if (len > 0) {\r\n        const skipped = len - 2;\r\n        const msg = `    ... ${skipped} lines matching cause stack trace ...`;\r\n        frames.splice(offset + 1, skipped, ctx.stylize(msg, 'undefined'));\r\n      }\r\n    }\r\n  }\r\n  return frames;\r\n}\r\n\r\nfunction improveStack(stack, constructor, name, tag) {\r\n  // A stack trace may contain arbitrary data. Only manipulate the output\r\n  // for \"regular errors\" (errors that \"look normal\") for now.\r\n  let len = name.length;\r\n\r\n  if (constructor === null ||\r\n      (StringPrototypeEndsWith(name, 'Error') &&\r\n      StringPrototypeStartsWith(stack, name) &&\r\n      (stack.length === len || stack[len] === ':' || stack[len] === '\\n'))) {\r\n    let fallback = 'Error';\r\n    if (constructor === null) {\r\n      const start = RegExpPrototypeExec(/^([A-Z][a-z_ A-Z0-9[\\]()-]+)(?::|\\n {4}at)/, stack) ||\r\n      RegExpPrototypeExec(/^([a-z_A-Z0-9-]*Error)$/, stack);\r\n      fallback = (start && start[1]) || '';\r\n      len = fallback.length;\r\n      fallback = fallback || 'Error';\r\n    }\r\n    const prefix = StringPrototypeSlice(getPrefix(constructor, tag, fallback), 0, -1);\r\n    if (name !== prefix) {\r\n      if (StringPrototypeIncludes(prefix, name)) {\r\n        if (len === 0) {\r\n          stack = `${prefix}: ${stack}`;\r\n        } else {\r\n          stack = `${prefix}${StringPrototypeSlice(stack, len)}`;\r\n        }\r\n      } else {\r\n        stack = `${prefix} [${name}]${StringPrototypeSlice(stack, len)}`;\r\n      }\r\n    }\r\n  }\r\n  return stack;\r\n}\r\n\r\nfunction removeDuplicateErrorKeys(ctx, keys, err, stack) {\r\n  if (!ctx.showHidden && keys.length !== 0) {\r\n    for (const name of ['name', 'message', 'stack']) {\r\n      const index = ArrayPrototypeIndexOf(keys, name);\r\n      // Only hide the property in case it's part of the original stack\r\n      if (index !== -1 && StringPrototypeIncludes(stack, err[name])) {\r\n        ArrayPrototypeSplice(keys, index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction markNodeModules(ctx, line) {\r\n  let tempLine = '';\r\n  let nodeModule;\r\n  let pos = 0;\r\n  while ((nodeModule = nodeModulesRegExp.exec(line)) !== null) {\r\n    // '/node_modules/'.length === 14\r\n    tempLine += StringPrototypeSlice(line, pos, nodeModule.index + 14);\r\n    tempLine += ctx.stylize(nodeModule[1], 'module');\r\n    pos = nodeModule.index + nodeModule[0].length;\r\n  }\r\n  if (pos !== 0) {\r\n    line = tempLine + StringPrototypeSlice(line, pos);\r\n  }\r\n  return line;\r\n}\r\n\r\nfunction markCwd(ctx, line, workingDirectory) {\r\n  let cwdStartPos = StringPrototypeIndexOf(line, workingDirectory);\r\n  let tempLine = '';\r\n  let cwdLength = workingDirectory.length;\r\n  if (cwdStartPos !== -1) {\r\n    if (StringPrototypeSlice(line, cwdStartPos - 7, cwdStartPos) === 'file://') {\r\n      cwdLength += 7;\r\n      cwdStartPos -= 7;\r\n    }\r\n    const start = line[cwdStartPos - 1] === '(' ? cwdStartPos - 1 : cwdStartPos;\r\n    const end = start !== cwdStartPos && StringPrototypeEndsWith(line, ')') ? -1 : line.length;\r\n    const workingDirectoryEndPos = cwdStartPos + cwdLength + 1;\r\n    const cwdSlice = StringPrototypeSlice(line, start, workingDirectoryEndPos);\r\n\r\n    tempLine += StringPrototypeSlice(line, 0, start);\r\n    tempLine += ctx.stylize(cwdSlice, 'undefined');\r\n    tempLine += StringPrototypeSlice(line, workingDirectoryEndPos, end);\r\n    if (end === -1) {\r\n      tempLine += ctx.stylize(')', 'undefined');\r\n    }\r\n  } else {\r\n    tempLine += line;\r\n  }\r\n  return tempLine;\r\n}\r\n\r\nfunction safeGetCWD() {\r\n  let workingDirectory;\r\n  try {\r\n    workingDirectory = process.cwd();\r\n  } catch {\r\n    return;\r\n  }\r\n  return workingDirectory;\r\n}\r\n\r\nfunction formatError(err, constructor, tag, ctx, keys) {\r\n  const name = err.name != null ? String(err.name) : 'Error';\r\n  let stack = getStackString(err);\r\n\r\n  removeDuplicateErrorKeys(ctx, keys, err, stack);\r\n\r\n  if ('cause' in err &&\r\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'cause'))) {\r\n    ArrayPrototypePush(keys, 'cause');\r\n  }\r\n\r\n  // Print errors aggregated into AggregateError\r\n  if (ArrayIsArray(err.errors) &&\r\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'errors'))) {\r\n    ArrayPrototypePush(keys, 'errors');\r\n  }\r\n\r\n  stack = improveStack(stack, constructor, name, tag);\r\n\r\n  // Ignore the error message if it's contained in the stack.\r\n  let pos = (err.message && StringPrototypeIndexOf(stack, err.message)) || -1;\r\n  if (pos !== -1)\r\n    pos += err.message.length;\r\n  // Wrap the error in brackets in case it has no stack trace.\r\n  const stackStart = StringPrototypeIndexOf(stack, '\\n    at', pos);\r\n  if (stackStart === -1) {\r\n    stack = `[${stack}]`;\r\n  } else {\r\n    let newStack = StringPrototypeSlice(stack, 0, stackStart);\r\n    const stackFramePart = StringPrototypeSlice(stack, stackStart + 1);\r\n    const lines = getStackFrames(ctx, err, stackFramePart);\r\n    if (ctx.colors) {\r\n      // Highlight userland code and node modules.\r\n      const workingDirectory = safeGetCWD();\r\n      let esmWorkingDirectory;\r\n      for (let line of lines) {\r\n        const core = RegExpPrototypeExec(coreModuleRegExp, line);\r\n        if (core !== null && BuiltinModule.exists(core[1])) {\r\n          newStack += `\\n${ctx.stylize(line, 'undefined')}`;\r\n        } else {\r\n          newStack += '\\n';\r\n\r\n          line = markNodeModules(ctx, line);\r\n          if (workingDirectory !== undefined) {\r\n            let newLine = markCwd(ctx, line, workingDirectory);\r\n            if (newLine === line) {\r\n              esmWorkingDirectory ??= pathToFileUrlHref(workingDirectory);\r\n              newLine = markCwd(ctx, line, esmWorkingDirectory);\r\n            }\r\n            line = newLine;\r\n          }\r\n\r\n          newStack += line;\r\n        }\r\n      }\r\n    } else {\r\n      newStack += `\\n${ArrayPrototypeJoin(lines, '\\n')}`;\r\n    }\r\n    stack = newStack;\r\n  }\r\n  // The message and the stack have to be indented as well!\r\n  if (ctx.indentationLvl !== 0) {\r\n    const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);\r\n    stack = StringPrototypeReplaceAll(stack, '\\n', `\\n${indentation}`);\r\n  }\r\n  return stack;\r\n}\r\n\r\nfunction groupArrayElements(ctx, output, value) {\r\n  let totalLength = 0;\r\n  let maxLength = 0;\r\n  let i = 0;\r\n  let outputLength = output.length;\r\n  if (ctx.maxArrayLength < output.length) {\r\n    // This makes sure the \"... n more items\" part is not taken into account.\r\n    outputLength--;\r\n  }\r\n  const separatorSpace = 2; // Add 1 for the space and 1 for the separator.\r\n  const dataLen = new Array(outputLength);\r\n  // Calculate the total length of all output entries and the individual max\r\n  // entries length of all output entries. We have to remove colors first,\r\n  // otherwise the length would not be calculated properly.\r\n  for (; i < outputLength; i++) {\r\n    const len = getStringWidth(output[i], ctx.colors);\r\n    dataLen[i] = len;\r\n    totalLength += len + separatorSpace;\r\n    if (maxLength < len)\r\n      maxLength = len;\r\n  }\r\n  // Add two to `maxLength` as we add a single whitespace character plus a comma\r\n  // in-between two entries.\r\n  const actualMax = maxLength + separatorSpace;\r\n  // Check if at least three entries fit next to each other and prevent grouping\r\n  // of arrays that contains entries of very different length (i.e., if a single\r\n  // entry is longer than 1/5 of all other entries combined). Otherwise the\r\n  // space in-between small entries would be enormous.\r\n  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength &&\r\n      (totalLength / actualMax > 5 || maxLength <= 6)) {\r\n\r\n    const approxCharHeights = 2.5;\r\n    const averageBias = MathSqrt(actualMax - totalLength / output.length);\r\n    const biasedMax = MathMax(actualMax - 3 - averageBias, 1);\r\n    // Dynamically check how many columns seem possible.\r\n    const columns = MathMin(\r\n      // Ideally a square should be drawn. We expect a character to be about 2.5\r\n      // times as high as wide. This is the area formula to calculate a square\r\n      // which contains n rectangles of size `actualMax * approxCharHeights`.\r\n      // Divide that by `actualMax` to receive the correct number of columns.\r\n      // The added bias increases the columns for short entries.\r\n      MathRound(\r\n        MathSqrt(\r\n          approxCharHeights * biasedMax * outputLength,\r\n        ) / biasedMax,\r\n      ),\r\n      // Do not exceed the breakLength.\r\n      MathFloor((ctx.breakLength - ctx.indentationLvl) / actualMax),\r\n      // Limit array grouping for small `compact` modes as the user requested\r\n      // minimal grouping.\r\n      ctx.compact * 4,\r\n      // Limit the columns to a maximum of fifteen.\r\n      15,\r\n    );\r\n    // Return with the original output if no grouping should happen.\r\n    if (columns <= 1) {\r\n      return output;\r\n    }\r\n    const tmp = [];\r\n    const maxLineLength = [];\r\n    for (let i = 0; i < columns; i++) {\r\n      let lineMaxLength = 0;\r\n      for (let j = i; j < output.length; j += columns) {\r\n        if (dataLen[j] > lineMaxLength)\r\n          lineMaxLength = dataLen[j];\r\n      }\r\n      lineMaxLength += separatorSpace;\r\n      maxLineLength[i] = lineMaxLength;\r\n    }\r\n    let order = StringPrototypePadStart;\r\n    if (value !== undefined) {\r\n      for (let i = 0; i < output.length; i++) {\r\n        if (typeof value[i] !== 'number' && typeof value[i] !== 'bigint') {\r\n          order = StringPrototypePadEnd;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // Each iteration creates a single line of grouped entries.\r\n    for (let i = 0; i < outputLength; i += columns) {\r\n      // The last lines may contain less entries than columns.\r\n      const max = MathMin(i + columns, outputLength);\r\n      let str = '';\r\n      let j = i;\r\n      for (; j < max - 1; j++) {\r\n        // Calculate extra color padding in case it's active. This has to be\r\n        // done line by line as some lines might contain more colors than\r\n        // others.\r\n        const padding = maxLineLength[j - i] + output[j].length - dataLen[j];\r\n        str += order(`${output[j]}, `, padding, ' ');\r\n      }\r\n      if (order === StringPrototypePadStart) {\r\n        const padding = maxLineLength[j - i] +\r\n                        output[j].length -\r\n                        dataLen[j] -\r\n                        separatorSpace;\r\n        str += StringPrototypePadStart(output[j], padding, ' ');\r\n      } else {\r\n        str += output[j];\r\n      }\r\n      ArrayPrototypePush(tmp, str);\r\n    }\r\n    if (ctx.maxArrayLength < output.length) {\r\n      ArrayPrototypePush(tmp, output[outputLength]);\r\n    }\r\n    output = tmp;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction handleMaxCallStackSize(ctx, err, constructorName, indentationLvl) {\r\n  if (isStackOverflowError(err)) {\r\n    ctx.seen.pop();\r\n    ctx.indentationLvl = indentationLvl;\r\n    return ctx.stylize(\r\n      `[${constructorName}: Inspection interrupted ` +\r\n        'prematurely. Maximum call stack size exceeded.]',\r\n      'special',\r\n    );\r\n  }\r\n  /* c8 ignore next */\r\n  assert.fail(err.stack);\r\n}\r\n\r\nfunction addNumericSeparator(integerString) {\r\n  let result = '';\r\n  let i = integerString.length;\r\n  const start = StringPrototypeStartsWith(integerString, '-') ? 1 : 0;\r\n  for (; i >= start + 4; i -= 3) {\r\n    result = `_${StringPrototypeSlice(integerString, i - 3, i)}${result}`;\r\n  }\r\n  return i === integerString.length ?\r\n    integerString :\r\n    `${StringPrototypeSlice(integerString, 0, i)}${result}`;\r\n}\r\n\r\nfunction addNumericSeparatorEnd(integerString) {\r\n  let result = '';\r\n  let i = 0;\r\n  for (; i < integerString.length - 3; i += 3) {\r\n    result += `${StringPrototypeSlice(integerString, i, i + 3)}_`;\r\n  }\r\n  return i === 0 ?\r\n    integerString :\r\n    `${result}${StringPrototypeSlice(integerString, i)}`;\r\n}\r\n\r\nconst remainingText = (remaining) => `... ${remaining} more item${remaining > 1 ? 's' : ''}`;\r\n\r\nfunction formatNumber(fn, number, numericSeparator) {\r\n  if (!numericSeparator) {\r\n    // Format -0 as '-0'. Checking `number === -0` won't distinguish 0 from -0.\r\n    if (ObjectIs(number, -0)) {\r\n      return fn('-0', 'number');\r\n    }\r\n    return fn(`${number}`, 'number');\r\n  }\r\n  const integer = MathTrunc(number);\r\n  const string = String(integer);\r\n  if (integer === number) {\r\n    if (!NumberIsFinite(number) || StringPrototypeIncludes(string, 'e')) {\r\n      return fn(string, 'number');\r\n    }\r\n    return fn(`${addNumericSeparator(string)}`, 'number');\r\n  }\r\n  if (NumberIsNaN(number)) {\r\n    return fn(string, 'number');\r\n  }\r\n  return fn(`${\r\n    addNumericSeparator(string)\r\n  }.${\r\n    addNumericSeparatorEnd(\r\n      StringPrototypeSlice(String(number), string.length + 1),\r\n    )\r\n  }`, 'number');\r\n}\r\n\r\nfunction formatBigInt(fn, bigint, numericSeparator) {\r\n  const string = String(bigint);\r\n  if (!numericSeparator) {\r\n    return fn(`${string}n`, 'bigint');\r\n  }\r\n  return fn(`${addNumericSeparator(string)}n`, 'bigint');\r\n}\r\n\r\nfunction formatPrimitive(fn, value, ctx) {\r\n  if (typeof value === 'string') {\r\n    let trailer = '';\r\n    if (value.length > ctx.maxStringLength) {\r\n      const remaining = value.length - ctx.maxStringLength;\r\n      value = StringPrototypeSlice(value, 0, ctx.maxStringLength);\r\n      trailer = `... ${remaining} more character${remaining > 1 ? 's' : ''}`;\r\n    }\r\n    if (ctx.compact !== true &&\r\n        // We do not support handling unicode characters width with\r\n        // the readline getStringWidth function as there are\r\n        // performance implications.\r\n        value.length > kMinLineLength &&\r\n        value.length > ctx.breakLength - ctx.indentationLvl - 4) {\r\n      return ArrayPrototypeJoin(\r\n        ArrayPrototypeMap(\r\n          RegExpPrototypeSymbolSplit(/(?<=\\n)/, value),\r\n          (line) => fn(strEscape(line), 'string'),\r\n        ),\r\n        ` +\\n${StringPrototypeRepeat(' ', ctx.indentationLvl + 2)}`,\r\n      ) + trailer;\r\n    }\r\n    return fn(strEscape(value), 'string') + trailer;\r\n  }\r\n  if (typeof value === 'number')\r\n    return formatNumber(fn, value, ctx.numericSeparator);\r\n  if (typeof value === 'bigint')\r\n    return formatBigInt(fn, value, ctx.numericSeparator);\r\n  if (typeof value === 'boolean')\r\n    return fn(`${value}`, 'boolean');\r\n  if (typeof value === 'undefined')\r\n    return fn('undefined', 'undefined');\r\n  // es6 symbol primitive\r\n  return fn(SymbolPrototypeToString(value), 'symbol');\r\n}\r\n\r\nfunction formatNamespaceObject(keys, ctx, value, recurseTimes) {\r\n  const output = new Array(keys.length);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    try {\r\n      output[i] = formatProperty(ctx, value, recurseTimes, keys[i],\r\n                                 kObjectType);\r\n    } catch (err) {\r\n      assert(isNativeError(err) && err.name === 'ReferenceError');\r\n      // Use the existing functionality. This makes sure the indentation and\r\n      // line breaks are always correct. Otherwise it is very difficult to keep\r\n      // this aligned, even though this is a hacky way of dealing with this.\r\n      const tmp = { [keys[i]]: '' };\r\n      output[i] = formatProperty(ctx, tmp, recurseTimes, keys[i], kObjectType);\r\n      const pos = StringPrototypeLastIndexOf(output[i], ' ');\r\n      // We have to find the last whitespace and have to replace that value as\r\n      // it will be visualized as a regular string.\r\n      output[i] = StringPrototypeSlice(output[i], 0, pos + 1) +\r\n                  ctx.stylize('<uninitialized>', 'special');\r\n    }\r\n  }\r\n  // Reset the keys to an empty array. This prevents duplicated inspection.\r\n  keys.length = 0;\r\n  return output;\r\n}\r\n\r\n// The array is sparse and/or has extra keys\r\nfunction formatSpecialArray(ctx, value, recurseTimes, maxLength, output, i) {\r\n  const keys = ObjectKeys(value);\r\n  let index = i;\r\n  for (; i < keys.length && output.length < maxLength; i++) {\r\n    const key = keys[i];\r\n    const tmp = +key;\r\n    // Arrays can only have up to 2^32 - 1 entries\r\n    if (tmp > 2 ** 32 - 2) {\r\n      break;\r\n    }\r\n    if (`${index}` !== key) {\r\n      if (RegExpPrototypeExec(numberRegExp, key) === null) {\r\n        break;\r\n      }\r\n      const emptyItems = tmp - index;\r\n      const ending = emptyItems > 1 ? 's' : '';\r\n      const message = `<${emptyItems} empty item${ending}>`;\r\n      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));\r\n      index = tmp;\r\n      if (output.length === maxLength) {\r\n        break;\r\n      }\r\n    }\r\n    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, key, kArrayType));\r\n    index++;\r\n  }\r\n  const remaining = value.length - index;\r\n  if (output.length !== maxLength) {\r\n    if (remaining > 0) {\r\n      const ending = remaining > 1 ? 's' : '';\r\n      const message = `<${remaining} empty item${ending}>`;\r\n      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));\r\n    }\r\n  } else if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatArrayBuffer(ctx, value) {\r\n  let buffer;\r\n  try {\r\n    buffer = new Uint8Array(value);\r\n  } catch {\r\n    return [ctx.stylize('(detached)', 'special')];\r\n  }\r\n  if (hexSlice === undefined)\r\n    hexSlice = uncurryThis(require('buffer').Buffer.prototype.hexSlice);\r\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\r\n    /(.{2})/g,\r\n    hexSlice(buffer, 0, MathMin(ctx.maxArrayLength, buffer.length)),\r\n    '$1 ',\r\n  ));\r\n  const remaining = buffer.length - ctx.maxArrayLength;\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  return [`${ctx.stylize('[Uint8Contents]', 'special')}: <${str}>`];\r\n}\r\n\r\nfunction formatArray(ctx, value, recurseTimes) {\r\n  const valLen = value.length;\r\n  const len = MathMin(MathMax(0, ctx.maxArrayLength), valLen);\r\n\r\n  const remaining = valLen - len;\r\n  const output = [];\r\n  for (let i = 0; i < len; i++) {\r\n    // Special handle sparse arrays.\r\n    if (!ObjectPrototypeHasOwnProperty(value, i)) {\r\n      return formatSpecialArray(ctx, value, recurseTimes, len, output, i);\r\n    }\r\n    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, i, kArrayType));\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatTypedArray(value, length, ctx, ignored, recurseTimes) {\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = value.length - maxLength;\r\n  const output = new Array(maxLength);\r\n  const elementFormatter = value.length > 0 && typeof value[0] === 'number' ?\r\n    formatNumber :\r\n    formatBigInt;\r\n  for (let i = 0; i < maxLength; ++i) {\r\n    output[i] = elementFormatter(ctx.stylize, value[i], ctx.numericSeparator);\r\n  }\r\n  if (remaining > 0) {\r\n    output[maxLength] = remainingText(remaining);\r\n  }\r\n  if (ctx.showHidden) {\r\n    // .buffer goes last, it's not a primitive like the others.\r\n    // All besides `BYTES_PER_ELEMENT` are actually getters.\r\n    ctx.indentationLvl += 2;\r\n    for (const key of [\r\n      'BYTES_PER_ELEMENT',\r\n      'length',\r\n      'byteLength',\r\n      'byteOffset',\r\n      'buffer',\r\n    ]) {\r\n      const str = formatValue(ctx, value[key], recurseTimes, true);\r\n      ArrayPrototypePush(output, `[${key}]: ${str}`);\r\n    }\r\n    ctx.indentationLvl -= 2;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatSet(value, ctx, ignored, recurseTimes) {\r\n  const length = value.size;\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = length - maxLength;\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  let i = 0;\r\n  for (const v of value) {\r\n    if (i >= maxLength) break;\r\n    ArrayPrototypePush(output, formatValue(ctx, v, recurseTimes));\r\n    i++;\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  return output;\r\n}\r\n\r\nfunction formatMap(value, ctx, ignored, recurseTimes) {\r\n  const length = value.size;\r\n  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);\r\n  const remaining = length - maxLength;\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  let i = 0;\r\n  for (const { 0: k, 1: v } of value) {\r\n    if (i >= maxLength) break;\r\n    ArrayPrototypePush(\r\n      output,\r\n      `${formatValue(ctx, k, recurseTimes)} => ${formatValue(ctx, v, recurseTimes)}`,\r\n    );\r\n    i++;\r\n  }\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  return output;\r\n}\r\n\r\nfunction formatSetIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);\r\n  const maxLength = MathMin(maxArrayLength, entries.length);\r\n  const output = new Array(maxLength);\r\n  ctx.indentationLvl += 2;\r\n  for (let i = 0; i < maxLength; i++) {\r\n    output[i] = formatValue(ctx, entries[i], recurseTimes);\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (state === kWeak && !ctx.sorted) {\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    ArrayPrototypeSort(output);\r\n  }\r\n  const remaining = entries.length - maxLength;\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatMapIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);\r\n  // Entries exist as [key1, val1, key2, val2, ...]\r\n  const len = entries.length / 2;\r\n  const remaining = len - maxArrayLength;\r\n  const maxLength = MathMin(maxArrayLength, len);\r\n  const output = new Array(maxLength);\r\n  let i = 0;\r\n  ctx.indentationLvl += 2;\r\n  if (state === kWeak) {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      output[i] =\r\n        `${formatValue(ctx, entries[pos], recurseTimes)} => ${formatValue(ctx, entries[pos + 1], recurseTimes)}`;\r\n    }\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    if (!ctx.sorted)\r\n      ArrayPrototypeSort(output);\r\n  } else {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      const res = [\r\n        formatValue(ctx, entries[pos], recurseTimes),\r\n        formatValue(ctx, entries[pos + 1], recurseTimes),\r\n      ];\r\n      output[i] = reduceToSingleString(\r\n        ctx, res, '', ['[', ']'], kArrayExtrasType, recurseTimes);\r\n    }\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (remaining > 0) {\r\n    ArrayPrototypePush(output, remainingText(remaining));\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatWeakCollection(ctx) {\r\n  return [ctx.stylize('<items unknown>', 'special')];\r\n}\r\n\r\nfunction formatWeakSet(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatWeakMap(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatMapIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatIterator(braces, ctx, value, recurseTimes) {\r\n  const { 0: entries, 1: isKeyValue } = previewEntries(value, true);\r\n  if (isKeyValue) {\r\n    // Mark entry iterators as such.\r\n    braces[0] = RegExpPrototypeSymbolReplace(/ Iterator] {$/, braces[0], ' Entries] {');\r\n    return formatMapIterInner(ctx, recurseTimes, entries, kMapEntries);\r\n  }\r\n\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kIterator);\r\n}\r\n\r\nfunction formatPromise(ctx, value, recurseTimes) {\r\n  let output;\r\n  const { 0: state, 1: result } = getPromiseDetails(value);\r\n  if (state === kPending) {\r\n    output = [ctx.stylize('<pending>', 'special')];\r\n  } else {\r\n    ctx.indentationLvl += 2;\r\n    const str = formatValue(ctx, result, recurseTimes);\r\n    ctx.indentationLvl -= 2;\r\n    output = [\r\n      state === kRejected ?\r\n        `${ctx.stylize('<rejected>', 'special')} ${str}` :\r\n        str,\r\n    ];\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatProperty(ctx, value, recurseTimes, key, type, desc,\r\n                        original = value) {\r\n  let name, str;\r\n  let extra = ' ';\r\n  desc = desc || ObjectGetOwnPropertyDescriptor(value, key) ||\r\n    { value: value[key], enumerable: true };\r\n  if (desc.value !== undefined) {\r\n    const diff = (ctx.compact !== true || type !== kObjectType) ? 2 : 3;\r\n    ctx.indentationLvl += diff;\r\n    str = formatValue(ctx, desc.value, recurseTimes);\r\n    if (diff === 3 && ctx.breakLength < getStringWidth(str, ctx.colors)) {\r\n      extra = `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;\r\n    }\r\n    ctx.indentationLvl -= diff;\r\n  } else if (desc.get !== undefined) {\r\n    const label = desc.set !== undefined ? 'Getter/Setter' : 'Getter';\r\n    const s = ctx.stylize;\r\n    const sp = 'special';\r\n    if (ctx.getters && (ctx.getters === true ||\r\n          (ctx.getters === 'get' && desc.set === undefined) ||\r\n          (ctx.getters === 'set' && desc.set !== undefined))) {\r\n      try {\r\n        const tmp = FunctionPrototypeCall(desc.get, original);\r\n        ctx.indentationLvl += 2;\r\n        if (tmp === null) {\r\n          str = `${s(`[${label}:`, sp)} ${s('null', 'null')}${s(']', sp)}`;\r\n        } else if (typeof tmp === 'object') {\r\n          str = `${s(`[${label}]`, sp)} ${formatValue(ctx, tmp, recurseTimes)}`;\r\n        } else {\r\n          const primitive = formatPrimitive(s, tmp, ctx);\r\n          str = `${s(`[${label}:`, sp)} ${primitive}${s(']', sp)}`;\r\n        }\r\n        ctx.indentationLvl -= 2;\r\n      } catch (err) {\r\n        const message = `<Inspection threw (${err.message})>`;\r\n        str = `${s(`[${label}:`, sp)} ${message}${s(']', sp)}`;\r\n      }\r\n    } else {\r\n      str = ctx.stylize(`[${label}]`, sp);\r\n    }\r\n  } else if (desc.set !== undefined) {\r\n    str = ctx.stylize('[Setter]', 'special');\r\n  } else {\r\n    str = ctx.stylize('undefined', 'undefined');\r\n  }\r\n  if (type === kArrayType) {\r\n    return str;\r\n  }\r\n  if (typeof key === 'symbol') {\r\n    const tmp = RegExpPrototypeSymbolReplace(\r\n      strEscapeSequencesReplacer,\r\n      SymbolPrototypeToString(key),\r\n      escapeFn,\r\n    );\r\n    name = `[${ctx.stylize(tmp, 'symbol')}]`;\r\n  } else if (key === '__proto__') {\r\n    name = \"['__proto__']\";\r\n  } else if (desc.enumerable === false) {\r\n    const tmp = RegExpPrototypeSymbolReplace(\r\n      strEscapeSequencesReplacer,\r\n      key,\r\n      escapeFn,\r\n    );\r\n    name = `[${tmp}]`;\r\n  } else if (RegExpPrototypeExec(keyStrRegExp, key) !== null) {\r\n    name = ctx.stylize(key, 'name');\r\n  } else {\r\n    name = ctx.stylize(strEscape(key), 'string');\r\n  }\r\n  return `${name}:${extra}${str}`;\r\n}\r\n\r\nfunction isBelowBreakLength(ctx, output, start, base) {\r\n  // Each entry is separated by at least a comma. Thus, we start with a total\r\n  // length of at least `output.length`. In addition, some cases have a\r\n  // whitespace in-between each other that is added to the total as well.\r\n  // TODO(BridgeAR): Add unicode support. Use the readline getStringWidth\r\n  // function. Check the performance overhead and make it an opt-in in case it's\r\n  // significant.\r\n  let totalLength = output.length + start;\r\n  if (totalLength + output.length > ctx.breakLength)\r\n    return false;\r\n  for (let i = 0; i < output.length; i++) {\r\n    if (ctx.colors) {\r\n      totalLength += removeColors(output[i]).length;\r\n    } else {\r\n      totalLength += output[i].length;\r\n    }\r\n    if (totalLength > ctx.breakLength) {\r\n      return false;\r\n    }\r\n  }\r\n  // Do not line up properties on the same line if `base` contains line breaks.\r\n  return base === '' || !StringPrototypeIncludes(base, '\\n');\r\n}\r\n\r\nfunction reduceToSingleString(\r\n  ctx, output, base, braces, extrasType, recurseTimes, value) {\r\n  if (ctx.compact !== true) {\r\n    if (typeof ctx.compact === 'number' && ctx.compact >= 1) {\r\n      // Memorize the original output length. In case the output is grouped,\r\n      // prevent lining up the entries on a single line.\r\n      const entries = output.length;\r\n      // Group array elements together if the array contains at least six\r\n      // separate entries.\r\n      if (extrasType === kArrayExtrasType && entries > 6) {\r\n        output = groupArrayElements(ctx, output, value);\r\n      }\r\n      // `ctx.currentDepth` is set to the most inner depth of the currently\r\n      // inspected object part while `recurseTimes` is the actual current depth\r\n      // that is inspected.\r\n      //\r\n      // Example:\r\n      //\r\n      // const a = { first: [ 1, 2, 3 ], second: { inner: [ 1, 2, 3 ] } }\r\n      //\r\n      // The deepest depth of `a` is 2 (a.second.inner) and `a.first` has a max\r\n      // depth of 1.\r\n      //\r\n      // Consolidate all entries of the local most inner depth up to\r\n      // `ctx.compact`, as long as the properties are smaller than\r\n      // `ctx.breakLength`.\r\n      if (ctx.currentDepth - recurseTimes < ctx.compact &&\r\n          entries === output.length) {\r\n        // Line up all entries on a single line in case the entries do not\r\n        // exceed `breakLength`. Add 10 as constant to start next to all other\r\n        // factors that may reduce `breakLength`.\r\n        const start = output.length + ctx.indentationLvl +\r\n                      braces[0].length + base.length + 10;\r\n        if (isBelowBreakLength(ctx, output, start, base)) {\r\n          const joinedOutput = join(output, ', ');\r\n          if (!StringPrototypeIncludes(joinedOutput, '\\n')) {\r\n            return `${base ? `${base} ` : ''}${braces[0]} ${joinedOutput}` +\r\n              ` ${braces[1]}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Line up each entry on an individual line.\r\n    const indentation = `\\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;\r\n    return `${base ? `${base} ` : ''}${braces[0]}${indentation}  ` +\r\n      `${join(output, `,${indentation}  `)}${indentation}${braces[1]}`;\r\n  }\r\n  // Line up all entries on a single line in case the entries do not exceed\r\n  // `breakLength`.\r\n  if (isBelowBreakLength(ctx, output, 0, base)) {\r\n    return `${braces[0]}${base ? ` ${base}` : ''} ${join(output, ', ')} ` +\r\n      braces[1];\r\n  }\r\n  const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);\r\n  // If the opening \"brace\" is too large, like in the case of \"Set {\",\r\n  // we need to force the first item to be on the next line or the\r\n  // items will not line up correctly.\r\n  const ln = base === '' && braces[0].length === 1 ?\r\n    ' ' : `${base ? ` ${base}` : ''}\\n${indentation}  `;\r\n  // Line up each entry on an individual line.\r\n  return `${braces[0]}${ln}${join(output, `,\\n${indentation}  `)} ${braces[1]}`;\r\n}\r\n\r\nfunction hasBuiltInToString(value) {\r\n  // Prevent triggering proxy traps.\r\n  const getFullProxy = false;\r\n  const proxyTarget = getProxyDetails(value, getFullProxy);\r\n  if (proxyTarget !== undefined) {\r\n    if (proxyTarget === null) {\r\n      return true;\r\n    }\r\n    value = proxyTarget;\r\n  }\r\n\r\n  // Check if value has a custom Symbol.toPrimitive transformation.\r\n  if (typeof value[SymbolToPrimitive] === 'function') {\r\n    return false;\r\n  }\r\n\r\n  // Count objects that have no `toString` function as built-in.\r\n  if (typeof value.toString !== 'function') {\r\n    return true;\r\n  }\r\n\r\n  // The object has a own `toString` property. Thus it's not not a built-in one.\r\n  if (ObjectPrototypeHasOwnProperty(value, 'toString')) {\r\n    return false;\r\n  }\r\n\r\n  // Find the object that has the `toString` property as own property in the\r\n  // prototype chain.\r\n  let pointer = value;\r\n  do {\r\n    pointer = ObjectGetPrototypeOf(pointer);\r\n  } while (!ObjectPrototypeHasOwnProperty(pointer, 'toString'));\r\n\r\n  // Check closer if the object is a built-in.\r\n  const descriptor = ObjectGetOwnPropertyDescriptor(pointer, 'constructor');\r\n  return descriptor !== undefined &&\r\n    typeof descriptor.value === 'function' &&\r\n    builtInObjects.has(descriptor.value.name);\r\n}\r\n\r\nconst firstErrorLine = (error) => StringPrototypeSplit(error.message, '\\n', 1)[0];\r\nlet CIRCULAR_ERROR_MESSAGE;\r\nfunction tryStringify(arg) {\r\n  try {\r\n    return JSONStringify(arg);\r\n  } catch (err) {\r\n    // Populate the circular error message lazily\r\n    if (!CIRCULAR_ERROR_MESSAGE) {\r\n      try {\r\n        const a = {};\r\n        a.a = a;\r\n        JSONStringify(a);\r\n      } catch (circularError) {\r\n        CIRCULAR_ERROR_MESSAGE = firstErrorLine(circularError);\r\n      }\r\n    }\r\n    if (err.name === 'TypeError' &&\r\n        firstErrorLine(err) === CIRCULAR_ERROR_MESSAGE) {\r\n      return '[Circular]';\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\nfunction format(...args) {\r\n  return formatWithOptionsInternal(undefined, args);\r\n}\r\n\r\nfunction formatWithOptions(inspectOptions, ...args) {\r\n  validateObject(inspectOptions, 'inspectOptions', kValidateObjectAllowArray);\r\n  return formatWithOptionsInternal(inspectOptions, args);\r\n}\r\n\r\nfunction formatNumberNoColor(number, options) {\r\n  return formatNumber(\r\n    stylizeNoColor,\r\n    number,\r\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,\r\n  );\r\n}\r\n\r\nfunction formatBigIntNoColor(bigint, options) {\r\n  return formatBigInt(\r\n    stylizeNoColor,\r\n    bigint,\r\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,\r\n  );\r\n}\r\n\r\nfunction formatWithOptionsInternal(inspectOptions, args) {\r\n  const first = args[0];\r\n  let a = 0;\r\n  let str = '';\r\n  let join = '';\r\n\r\n  if (typeof first === 'string') {\r\n    if (args.length === 1) {\r\n      return first;\r\n    }\r\n    let tempStr;\r\n    let lastPos = 0;\r\n\r\n    for (let i = 0; i < first.length - 1; i++) {\r\n      if (StringPrototypeCharCodeAt(first, i) === 37) { // '%'\r\n        const nextChar = StringPrototypeCharCodeAt(first, ++i);\r\n        if (a + 1 !== args.length) {\r\n          switch (nextChar) {\r\n            case 115: { // 's'\r\n              const tempArg = args[++a];\r\n              if (typeof tempArg === 'number') {\r\n                tempStr = formatNumberNoColor(tempArg, inspectOptions);\r\n              } else if (typeof tempArg === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempArg, inspectOptions);\r\n              } else if (typeof tempArg !== 'object' ||\r\n                         tempArg === null ||\r\n                         !hasBuiltInToString(tempArg)) {\r\n                tempStr = String(tempArg);\r\n              } else {\r\n                tempStr = inspect(tempArg, {\r\n                  ...inspectOptions,\r\n                  compact: 3,\r\n                  colors: false,\r\n                  depth: 0,\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 106: // 'j'\r\n              tempStr = tryStringify(args[++a]);\r\n              break;\r\n            case 100: { // 'd'\r\n              const tempNum = args[++a];\r\n              if (typeof tempNum === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempNum, inspectOptions);\r\n              } else if (typeof tempNum === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(Number(tempNum), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 79: // 'O'\r\n              tempStr = inspect(args[++a], inspectOptions);\r\n              break;\r\n            case 111: // 'o'\r\n              tempStr = inspect(args[++a], {\r\n                ...inspectOptions,\r\n                showHidden: true,\r\n                showProxy: true,\r\n                depth: 4,\r\n              });\r\n              break;\r\n            case 105: { // 'i'\r\n              const tempInteger = args[++a];\r\n              if (typeof tempInteger === 'bigint') {\r\n                tempStr = formatBigIntNoColor(tempInteger, inspectOptions);\r\n              } else if (typeof tempInteger === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(\r\n                  NumberParseInt(tempInteger), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 102: { // 'f'\r\n              const tempFloat = args[++a];\r\n              if (typeof tempFloat === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumberNoColor(\r\n                  NumberParseFloat(tempFloat), inspectOptions);\r\n              }\r\n              break;\r\n            }\r\n            case 99: // 'c'\r\n              a += 1;\r\n              tempStr = '';\r\n              break;\r\n            case 37: // '%'\r\n              str += StringPrototypeSlice(first, lastPos, i);\r\n              lastPos = i + 1;\r\n              continue;\r\n            default: // Any other character is not a correct placeholder\r\n              continue;\r\n          }\r\n          if (lastPos !== i - 1) {\r\n            str += StringPrototypeSlice(first, lastPos, i - 1);\r\n          }\r\n          str += tempStr;\r\n          lastPos = i + 1;\r\n        } else if (nextChar === 37) {\r\n          str += StringPrototypeSlice(first, lastPos, i);\r\n          lastPos = i + 1;\r\n        }\r\n      }\r\n    }\r\n    if (lastPos !== 0) {\r\n      a++;\r\n      join = ' ';\r\n      if (lastPos < first.length) {\r\n        str += StringPrototypeSlice(first, lastPos);\r\n      }\r\n    }\r\n  }\r\n\r\n  while (a < args.length) {\r\n    const value = args[a];\r\n    str += join;\r\n    str += typeof value !== 'string' ? inspect(value, inspectOptions) : value;\r\n    join = ' ';\r\n    a++;\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction isZeroWidthCodePoint(code) {\r\n  return code <= 0x1F || // C0 control codes\r\n    (code >= 0x7F && code <= 0x9F) || // C1 control codes\r\n    (code >= 0x300 && code <= 0x36F) || // Combining Diacritical Marks\r\n    (code >= 0x200B && code <= 0x200F) || // Modifying Invisible Characters\r\n    // Combining Diacritical Marks for Symbols\r\n    (code >= 0x20D0 && code <= 0x20FF) ||\r\n    (code >= 0xFE00 && code <= 0xFE0F) || // Variation Selectors\r\n    (code >= 0xFE20 && code <= 0xFE2F) || // Combining Half Marks\r\n    (code >= 0xE0100 && code <= 0xE01EF); // Variation Selectors\r\n}\r\n\r\nif (internalBinding('config').hasIntl) {\r\n  const icu = internalBinding('icu');\r\n  // icu.getStringWidth(string, ambiguousAsFullWidth, expandEmojiSequence)\r\n  // Defaults: ambiguousAsFullWidth = false; expandEmojiSequence = true;\r\n  // TODO(BridgeAR): Expose the options to the user. That is probably the\r\n  // best thing possible at the moment, since it's difficult to know what\r\n  // the receiving end supports.\r\n  getStringWidth = function getStringWidth(str, removeControlChars = true) {\r\n    let width = 0;\r\n\r\n    if (removeControlChars) {\r\n      str = stripVTControlCharacters(str);\r\n    }\r\n    for (let i = 0; i < str.length; i++) {\r\n      // Try to avoid calling into C++ by first handling the ASCII portion of\r\n      // the string. If it is fully ASCII, we skip the C++ part.\r\n      const code = str.charCodeAt(i);\r\n      if (code >= 127) {\r\n        width += icu.getStringWidth(StringPrototypeNormalize(StringPrototypeSlice(str, i), 'NFC'));\r\n        break;\r\n      }\r\n      width += code >= 32 ? 1 : 0;\r\n    }\r\n    return width;\r\n  };\r\n} else {\r\n  /**\r\n   * Returns the number of columns required to display the given string.\r\n   */\r\n  getStringWidth = function getStringWidth(str, removeControlChars = true) {\r\n    let width = 0;\r\n\r\n    if (removeControlChars)\r\n      str = stripVTControlCharacters(str);\r\n    str = StringPrototypeNormalize(str, 'NFC');\r\n    for (const char of new SafeStringIterator(str)) {\r\n      const code = StringPrototypeCodePointAt(char, 0);\r\n      if (isFullWidthCodePoint(code)) {\r\n        width += 2;\r\n      } else if (!isZeroWidthCodePoint(code)) {\r\n        width++;\r\n      }\r\n    }\r\n\r\n    return width;\r\n  };\r\n\r\n  /**\r\n   * Returns true if the character represented by a given\r\n   * Unicode code point is full-width. Otherwise returns false.\r\n   */\r\n  const isFullWidthCodePoint = (code) => {\r\n    // Code points are partially derived from:\r\n    // https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt\r\n    return code >= 0x1100 && (\r\n      code <= 0x115f ||  // Hangul Jamo\r\n      code === 0x2329 || // LEFT-POINTING ANGLE BRACKET\r\n      code === 0x232a || // RIGHT-POINTING ANGLE BRACKET\r\n      // CJK Radicals Supplement .. Enclosed CJK Letters and Months\r\n      (code >= 0x2e80 && code <= 0x3247 && code !== 0x303f) ||\r\n      // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\r\n      (code >= 0x3250 && code <= 0x4dbf) ||\r\n      // CJK Unified Ideographs .. Yi Radicals\r\n      (code >= 0x4e00 && code <= 0xa4c6) ||\r\n      // Hangul Jamo Extended-A\r\n      (code >= 0xa960 && code <= 0xa97c) ||\r\n      // Hangul Syllables\r\n      (code >= 0xac00 && code <= 0xd7a3) ||\r\n      // CJK Compatibility Ideographs\r\n      (code >= 0xf900 && code <= 0xfaff) ||\r\n      // Vertical Forms\r\n      (code >= 0xfe10 && code <= 0xfe19) ||\r\n      // CJK Compatibility Forms .. Small Form Variants\r\n      (code >= 0xfe30 && code <= 0xfe6b) ||\r\n      // Halfwidth and Fullwidth Forms\r\n      (code >= 0xff01 && code <= 0xff60) ||\r\n      (code >= 0xffe0 && code <= 0xffe6) ||\r\n      // Kana Supplement\r\n      (code >= 0x1b000 && code <= 0x1b001) ||\r\n      // Enclosed Ideographic Supplement\r\n      (code >= 0x1f200 && code <= 0x1f251) ||\r\n      // Miscellaneous Symbols and Pictographs 0x1f300 - 0x1f5ff\r\n      // Emoticons 0x1f600 - 0x1f64f\r\n      (code >= 0x1f300 && code <= 0x1f64f) ||\r\n      // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\r\n      (code >= 0x20000 && code <= 0x3fffd)\r\n    );\r\n  };\r\n\r\n}\r\n\r\n/**\r\n * Remove all VT control characters. Use to estimate displayed string width.\r\n */\r\nfunction stripVTControlCharacters(str) {\r\n  validateString(str, 'str');\r\n\r\n  return RegExpPrototypeSymbolReplace(ansi, str, '');\r\n}\r\n\r\nmodule.exports = {\r\n  identicalSequenceRange,\r\n  inspect,\r\n  inspectDefaultOptions,\r\n  format,\r\n  formatWithOptions,\r\n  getStringWidth,\r\n  stripVTControlCharacters,\r\n  isZeroWidthCodePoint,\r\n};\r\n"
  },
  "19": {
    "metadata": {
      "scriptId": "19",
      "url": "node:internal/util/debuglog",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 496,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "bb1f645eec5ee80d64d8d0e5b3839a4404fd596fab489b4b6fd98c889d2266a8",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12325,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/debuglog"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MathFloor,\r\n  Number,\r\n  NumberPrototypeToFixed,\r\n  ObjectDefineProperty,\r\n  RegExp,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  StringPrototypePadStart,\r\n  StringPrototypeSplit,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeToUpperCase,\r\n} = primordials;\r\nconst {\r\n  CHAR_LOWERCASE_B: kTraceBegin,\r\n  CHAR_LOWERCASE_E: kTraceEnd,\r\n  CHAR_LOWERCASE_N: kTraceInstant,\r\n} = require('internal/constants');\r\nconst { inspect, format, formatWithOptions } = require('internal/util/inspect');\r\nconst { isTraceCategoryEnabled, trace } = internalBinding('trace_events');\r\n\r\n// `debugImpls` and `testEnabled` are deliberately not initialized so any call\r\n// to `debuglog()` before `initializeDebugEnv()` is called will throw.\r\nlet debugImpls;\r\nlet testEnabled;\r\n\r\n\r\n// `debugEnv` is initial value of process.env.NODE_DEBUG\r\nfunction initializeDebugEnv(debugEnv) {\r\n  debugImpls = { __proto__: null };\r\n  if (debugEnv) {\r\n    // This is run before any user code, it's OK not to use primordials.\r\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\r\n      .replaceAll('*', '.*')\r\n      .replaceAll(',', '$|^');\r\n    const debugEnvRegex = new RegExp(`^${debugEnv}$`, 'i');\r\n    testEnabled = (str) => RegExpPrototypeExec(debugEnvRegex, str) !== null;\r\n  } else {\r\n    testEnabled = () => false;\r\n  }\r\n}\r\n\r\n// Emits warning when user sets\r\n// NODE_DEBUG=http or NODE_DEBUG=http2.\r\nfunction emitWarningIfNeeded(set) {\r\n  if ('HTTP' === set || 'HTTP2' === set) {\r\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\r\n      'to \\'' + StringPrototypeToLowerCase(set) + '\\' can expose sensitive ' +\r\n      'data (such as passwords, tokens and authentication headers) ' +\r\n      'in the resulting log.');\r\n  }\r\n}\r\n\r\nconst noop = () => {};\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\nfunction debuglogImpl(enabled, set, args) {\r\n  if (debugImpls[set] === undefined) {\r\n    if (enabled) {\r\n      const pid = process.pid;\r\n      emitWarningIfNeeded(set);\r\n      debugImpls[set] = function debug(...args) {\r\n        const colors = lazyUtilColors().shouldColorize(process.stderr);\r\n        const msg = formatWithOptions({ colors }, ...args);\r\n        const coloredPID = inspect(pid, { colors });\r\n        process.stderr.write(format('%s %s: %s\\n', set, coloredPID, msg));\r\n      };\r\n    } else {\r\n      debugImpls[set] = noop;\r\n    }\r\n  }\r\n  return debugImpls[set];\r\n}\r\n\r\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG,\r\n// so it needs to be called lazily in top scopes of internal modules\r\n// that may be loaded before these run time states are allowed to\r\n// be accessed.\r\nfunction debuglog(set, cb) {\r\n  function init() {\r\n    set = StringPrototypeToUpperCase(set);\r\n    enabled = testEnabled(set);\r\n  }\r\n  let debug = (...args) => {\r\n    init();\r\n    // Only invokes debuglogImpl() when the debug function is\r\n    // called for the first time.\r\n    debug = debuglogImpl(enabled, set);\r\n    if (typeof cb === 'function')\r\n      cb(debug);\r\n    switch (args.length) {\r\n      case 1: return debug(args[0]);\r\n      case 2: return debug(args[0], args[1]);\r\n      default: return debug(...new SafeArrayIterator(args));\r\n    }\r\n  };\r\n  let enabled;\r\n  let test = () => {\r\n    init();\r\n    test = () => enabled;\r\n    return enabled;\r\n  };\r\n  const logger = (...args) => {\r\n    switch (args.length) {\r\n      case 1: return debug(args[0]);\r\n      case 2: return debug(args[0], args[1]);\r\n      default: return debug(...new SafeArrayIterator(args));\r\n    }\r\n  };\r\n  ObjectDefineProperty(logger, 'enabled', {\r\n    __proto__: null,\r\n    get() {\r\n      return test();\r\n    },\r\n    configurable: true,\r\n    enumerable: true,\r\n  });\r\n  return logger;\r\n}\r\n\r\nfunction pad(value) {\r\n  return StringPrototypePadStart(`${value}`, 2, '0');\r\n}\r\n\r\nconst kNone = 1 << 0;\r\nconst kSkipLog = 1 << 1;\r\nconst kSkipTrace = 1 << 2;\r\n\r\nconst kSecond = 1000;\r\nconst kMinute = 60 * kSecond;\r\nconst kHour = 60 * kMinute;\r\n\r\nfunction formatTime(ms) {\r\n  let hours = 0;\r\n  let minutes = 0;\r\n  let seconds = 0;\r\n\r\n  if (ms >= kSecond) {\r\n    if (ms >= kMinute) {\r\n      if (ms >= kHour) {\r\n        hours = MathFloor(ms / kHour);\r\n        ms = ms % kHour;\r\n      }\r\n      minutes = MathFloor(ms / kMinute);\r\n      ms = ms % kMinute;\r\n    }\r\n    seconds = ms / kSecond;\r\n  }\r\n\r\n  if (hours !== 0 || minutes !== 0) {\r\n    ({ 0: seconds, 1: ms } = StringPrototypeSplit(\r\n      NumberPrototypeToFixed(seconds, 3),\r\n      '.',\r\n    ));\r\n    const res = hours !== 0 ? `${hours}:${pad(minutes)}` : minutes;\r\n    return `${res}:${pad(seconds)}.${ms} (${hours !== 0 ? 'h:m' : ''}m:ss.mmm)`;\r\n  }\r\n\r\n  if (seconds !== 0) {\r\n    return `${NumberPrototypeToFixed(seconds, 3)}s`;\r\n  }\r\n\r\n  return `${Number(NumberPrototypeToFixed(ms, 3))}ms`;\r\n}\r\n\r\nfunction safeTraceLabel(label) {\r\n  return label.replace(/\\\\/g, '\\\\\\\\');\r\n}\r\n\r\n/**\r\n * @typedef {(label: string, timeFormatted: string, args?: any[]) => void} LogImpl\r\n */\r\n\r\n/**\r\n * Returns true if label was found\r\n * @param {string} timesStore\r\n * @param {string} implementation\r\n * @param {LogImpl} logImp\r\n * @param {string} label\r\n * @param {any} args\r\n * @returns {void}\r\n */\r\nfunction timeLogImpl(timesStore, implementation, logImp, label, args) {\r\n  const time = timesStore.get(label);\r\n  if (time === undefined) {\r\n    process.emitWarning(`No such label '${label}' for ${implementation}`);\r\n    return;\r\n  }\r\n\r\n  const duration = process.hrtime(time);\r\n  const ms = duration[0] * 1000 + duration[1] / 1e6;\r\n\r\n  const formatted = formatTime(ms);\r\n\r\n  if (args === undefined) {\r\n    logImp(label, formatted);\r\n  } else {\r\n    logImp(label, formatted, args);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @returns {void}\r\n */\r\nfunction time(timesStore, traceCategory, implementation, timerFlags, logLabel = 'default', traceLabel = undefined) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if (timesStore.has(logLabel)) {\r\n    process.emitWarning(`Label '${logLabel}' already exists for ${implementation}`);\r\n    return;\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceBegin, traceCategory, traceLabel, 0);\r\n  }\r\n\r\n  timesStore.set(logLabel, process.hrtime());\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {LogImpl} logImpl\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @returns {void}\r\n */\r\nfunction timeEnd(\r\n  timesStore,\r\n  traceCategory,\r\n  implementation,\r\n  timerFlags,\r\n  logImpl,\r\n  logLabel = 'default',\r\n  traceLabel = undefined,\r\n) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if ((timerFlags & kSkipLog) === 0) {\r\n    timeLogImpl(timesStore, implementation, logImpl, logLabel);\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceEnd, traceCategory, traceLabel, 0);\r\n  }\r\n\r\n  timesStore.delete(logLabel);\r\n}\r\n\r\n/**\r\n * @param {SafeMap} timesStore\r\n * @param {string} traceCategory\r\n * @param {string} implementation\r\n * @param {number} timerFlags\r\n * @param {LogImpl} logImpl\r\n * @param {string} logLabel\r\n * @param {string} traceLabel\r\n * @param {any[]} args\r\n * @returns {void}\r\n */\r\nfunction timeLog(\r\n  timesStore,\r\n  traceCategory,\r\n  implementation,\r\n  timerFlags,\r\n  logImpl,\r\n  logLabel = 'default',\r\n  traceLabel = undefined,\r\n  args,\r\n) {\r\n  // Coerces everything other than Symbol to a string\r\n  logLabel = `${logLabel}`;\r\n\r\n  if (traceLabel !== undefined) {\r\n    traceLabel = `${traceLabel}`;\r\n  } else {\r\n    traceLabel = logLabel;\r\n  }\r\n\r\n  if ((timerFlags & kSkipLog) === 0) {\r\n    timeLogImpl(timesStore, implementation, logImpl, logLabel, args);\r\n  }\r\n\r\n  if ((timerFlags & kSkipTrace) === 0) {\r\n    traceLabel = safeTraceLabel(traceLabel);\r\n    trace(kTraceInstant, traceCategory, traceLabel, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Record<string, SafeMap>}\r\n */\r\nlet tracesStores;\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string) => void} TimerStart\r\n */\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string) => void} TimerEnd\r\n */\r\n\r\n/**\r\n * @typedef {(logLabel: string, traceLabel?: string, args?: any[]) => void} TimerLog\r\n */\r\n\r\n/**\r\n * Debuglog with time fns and support for trace\r\n * @param {string} set\r\n * @param {(startTimer: TimerStart, endTimer: TimerEnd, logTimer: TimerLog) => void} cb\r\n * @returns {{startTimer: TimerStart, endTimer: TimerEnd, logTimer: TimerLog}}\r\n */\r\nfunction debugWithTimer(set, cb) {\r\n  set = StringPrototypeToUpperCase(set);\r\n\r\n  if (tracesStores === undefined) {\r\n    tracesStores = { __proto__: null };\r\n  }\r\n\r\n  /**\r\n   * @type {LogImpl}\r\n   */\r\n  function logImpl(label, timeFormatted, args) {\r\n    const pid = process.pid;\r\n    const colors = { colors: lazyUtilColors().shouldColorize(process.stderr) };\r\n    const coloredPID = inspect(pid, colors);\r\n\r\n    if (args === undefined)\r\n      process.stderr.write(format('%s %s %s: %s\\n', set, coloredPID, label, timeFormatted));\r\n    else\r\n      process.stderr.write(\r\n        format(\r\n          '%s %s %s: %s\\n',\r\n          set,\r\n          coloredPID,\r\n          label,\r\n          timeFormatted,\r\n          ...new SafeArrayIterator(args),\r\n        ),\r\n      );\r\n  }\r\n\r\n  const kTraceCategory = `node,node.${StringPrototypeToLowerCase(set)}`;\r\n  let debugLogCategoryEnabled = false;\r\n  let traceCategoryEnabled = false;\r\n  let timerFlags = kNone;\r\n\r\n  /**\r\n   * @type {TimerStart}\r\n   */\r\n  function internalStartTimer(logLabel, traceLabel) {\r\n    time(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.time',\r\n      timerFlags,\r\n      logLabel,\r\n      traceLabel,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @type {TimerEnd}\r\n   */\r\n  function internalEndTimer(logLabel, traceLabel) {\r\n    timeEnd(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.timeEnd',\r\n      timerFlags,\r\n      logImpl,\r\n      logLabel,\r\n      traceLabel,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @type {TimerLog}\r\n   */\r\n  function internalLogTimer(logLabel, traceLabel, args) {\r\n    timeLog(\r\n      tracesStores[set],\r\n      kTraceCategory,\r\n      'debuglog.timeLog',\r\n      timerFlags,\r\n      logImpl,\r\n      logLabel,\r\n      traceLabel,\r\n      args,\r\n    );\r\n  }\r\n\r\n  function init() {\r\n    if (tracesStores[set] === undefined) {\r\n      tracesStores[set] = new SafeMap();\r\n    }\r\n    emitWarningIfNeeded(set);\r\n    debugLogCategoryEnabled = testEnabled(set);\r\n    traceCategoryEnabled = isTraceCategoryEnabled(kTraceCategory);\r\n\r\n    if (!debugLogCategoryEnabled) {\r\n      timerFlags |= kSkipLog;\r\n    }\r\n\r\n    if (!traceCategoryEnabled) {\r\n      timerFlags |= kSkipTrace;\r\n    }\r\n\r\n    // TODO(H4ad): support traceCategory being enabled dynamically\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      cb(internalStartTimer, internalEndTimer, internalLogTimer);\r\n    else\r\n      cb(noop, noop, noop);\r\n  }\r\n\r\n  /**\r\n   * @type {TimerStart}\r\n   */\r\n  const startTimer = (logLabel, traceLabel) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalStartTimer(logLabel, traceLabel);\r\n  };\r\n\r\n  /**\r\n   * @type {TimerEnd}\r\n   */\r\n  const endTimer = (logLabel, traceLabel) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalEndTimer(logLabel, traceLabel);\r\n  };\r\n\r\n  /**\r\n   * @type {TimerLog}\r\n   */\r\n  const logTimer = (logLabel, traceLabel, args) => {\r\n    init();\r\n\r\n    if (debugLogCategoryEnabled || traceCategoryEnabled)\r\n      internalLogTimer(logLabel, traceLabel, args);\r\n  };\r\n\r\n  return {\r\n    startTimer,\r\n    endTimer,\r\n    logTimer,\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  kNone,\r\n  kSkipLog,\r\n  kSkipTrace,\r\n  formatTime,\r\n  time,\r\n  timeEnd,\r\n  timeLog,\r\n  debuglog,\r\n  debugWithTimer,\r\n  initializeDebugEnv,\r\n};\r\n"
  },
  "21": {
    "metadata": {
      "scriptId": "21",
      "url": "node:events",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1227,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ec2ff7b3f79864c490cab2c9c994f6b70cc8faf07255bf9dec030d1eafc0fc7f",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 37250,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:events"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePop,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  Boolean,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  FunctionPrototypeCall,\r\n  NumberMAX_SAFE_INTEGER,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetPrototypeOf,\r\n  ObjectSetPrototypeOf,\r\n  Promise,\r\n  PromiseReject,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  String,\r\n  StringPrototypeSplit,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolDispose,\r\n  SymbolFor,\r\n} = primordials;\r\nconst kRejection = SymbolFor('nodejs.rejection');\r\n\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\nconst {\r\n  inspect,\r\n  identicalSequenceRange,\r\n} = require('internal/util/inspect');\r\n\r\nlet spliceOne;\r\nlet FixedQueue;\r\nlet kFirstEventParam;\r\nlet kResistStopPropagation;\r\n\r\nconst {\r\n  AbortError,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n    ERR_UNHANDLED_ERROR,\r\n  },\r\n  genericNodeError,\r\n  kEnhanceStackBeforeInspector,\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateInteger,\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateNumber,\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst { addAbortListener } = require('internal/events/abort_listener');\r\n\r\nconst kCapture = Symbol('kCapture');\r\nconst kErrorMonitor = Symbol('events.errorMonitor');\r\nconst kShapeMode = Symbol('shapeMode');\r\nconst kMaxEventTargetListeners = Symbol('events.maxEventTargetListeners');\r\nconst kMaxEventTargetListenersWarned =\r\n  Symbol('events.maxEventTargetListenersWarned');\r\nconst kWatermarkData = SymbolFor('nodejs.watermarkData');\r\n\r\nlet EventEmitterAsyncResource;\r\n// The EventEmitterAsyncResource has to be initialized lazily because event.js\r\n// is loaded so early in the bootstrap process, before async_hooks is available.\r\n//\r\n// This implementation was adapted straight from addaleax's\r\n// eventemitter-asyncresource MIT-licensed userland module.\r\n// https://github.com/addaleax/eventemitter-asyncresource\r\nfunction lazyEventEmitterAsyncResource() {\r\n  if (EventEmitterAsyncResource === undefined) {\r\n    const {\r\n      AsyncResource,\r\n    } = require('async_hooks');\r\n\r\n    const kEventEmitter = Symbol('kEventEmitter');\r\n    const kAsyncResource = Symbol('kAsyncResource');\r\n    class EventEmitterReferencingAsyncResource extends AsyncResource {\r\n      /**\r\n       * @param {EventEmitter} ee\r\n       * @param {string} [type]\r\n       * @param {{\r\n       *   triggerAsyncId?: number,\r\n       *   requireManualDestroy?: boolean,\r\n       * }} [options]\r\n       */\r\n      constructor(ee, type, options) {\r\n        super(type, options);\r\n        this[kEventEmitter] = ee;\r\n      }\r\n\r\n      /**\r\n       * @type {EventEmitter}\r\n       */\r\n      get eventEmitter() {\r\n        if (this[kEventEmitter] === undefined)\r\n          throw new ERR_INVALID_THIS('EventEmitterReferencingAsyncResource');\r\n        return this[kEventEmitter];\r\n      }\r\n    }\r\n\r\n    EventEmitterAsyncResource =\r\n      class EventEmitterAsyncResource extends EventEmitter {\r\n        /**\r\n         * @param {{\r\n         *   name?: string,\r\n         *   triggerAsyncId?: number,\r\n         *   requireManualDestroy?: boolean,\r\n         * }} [options]\r\n         */\r\n        constructor(options = undefined) {\r\n          let name;\r\n          if (typeof options === 'string') {\r\n            name = options;\r\n            options = undefined;\r\n          } else {\r\n            if (new.target === EventEmitterAsyncResource) {\r\n              validateString(options?.name, 'options.name');\r\n            }\r\n            name = options?.name || new.target.name;\r\n          }\r\n          super(options);\r\n\r\n          this[kAsyncResource] =\r\n            new EventEmitterReferencingAsyncResource(this, name, options);\r\n        }\r\n\r\n        /**\r\n         * @param {symbol,string} event\r\n         * @param  {...any} args\r\n         * @returns {boolean}\r\n         */\r\n        emit(event, ...args) {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          const { asyncResource } = this;\r\n          ArrayPrototypeUnshift(args, super.emit, this, event);\r\n          return ReflectApply(asyncResource.runInAsyncScope, asyncResource,\r\n                              args);\r\n        }\r\n\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        emitDestroy() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          this.asyncResource.emitDestroy();\r\n        }\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        get asyncId() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this.asyncResource.asyncId();\r\n        }\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        get triggerAsyncId() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this.asyncResource.triggerAsyncId();\r\n        }\r\n\r\n        /**\r\n         * @type {EventEmitterReferencingAsyncResource}\r\n         */\r\n        get asyncResource() {\r\n          if (this[kAsyncResource] === undefined)\r\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\r\n          return this[kAsyncResource];\r\n        }\r\n      };\r\n  }\r\n  return EventEmitterAsyncResource;\r\n}\r\n\r\n/**\r\n * Creates a new `EventEmitter` instance.\r\n * @param {{ captureRejections?: boolean; }} [opts]\r\n * @constructs {EventEmitter}\r\n */\r\nfunction EventEmitter(opts) {\r\n  EventEmitter.init.call(this, opts);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.addAbortListener = addAbortListener;\r\nmodule.exports.once = once;\r\nmodule.exports.on = on;\r\nmodule.exports.getEventListeners = getEventListeners;\r\nmodule.exports.getMaxListeners = getMaxListeners;\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.usingDomains = false;\r\n\r\nEventEmitter.captureRejectionSymbol = kRejection;\r\nObjectDefineProperty(EventEmitter, 'captureRejections', {\r\n  __proto__: null,\r\n  get() {\r\n    return EventEmitter.prototype[kCapture];\r\n  },\r\n  set(value) {\r\n    validateBoolean(value, 'EventEmitter.captureRejections');\r\n\r\n    EventEmitter.prototype[kCapture] = value;\r\n  },\r\n  enumerable: true,\r\n});\r\n\r\nObjectDefineProperty(EventEmitter, 'EventEmitterAsyncResource', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get: lazyEventEmitterAsyncResource,\r\n  set: undefined,\r\n  configurable: true,\r\n});\r\n\r\nEventEmitter.errorMonitor = kErrorMonitor;\r\n\r\n// The default for captureRejections is false\r\nObjectDefineProperty(EventEmitter.prototype, kCapture, {\r\n  __proto__: null,\r\n  value: false,\r\n  writable: true,\r\n  enumerable: false,\r\n});\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nlet defaultMaxListeners = 10;\r\nlet isEventTarget;\r\n\r\nfunction checkListener(listener) {\r\n  validateFunction(listener, 'listener');\r\n}\r\n\r\nObjectDefineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    validateNumber(arg, 'defaultMaxListeners', 0);\r\n    defaultMaxListeners = arg;\r\n  },\r\n});\r\n\r\nObjectDefineProperties(EventEmitter, {\r\n  kMaxEventTargetListeners: {\r\n    __proto__: null,\r\n    value: kMaxEventTargetListeners,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false,\r\n  },\r\n  kMaxEventTargetListenersWarned: {\r\n    __proto__: null,\r\n    value: kMaxEventTargetListenersWarned,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false,\r\n  },\r\n});\r\n\r\n/**\r\n * Sets the max listeners.\r\n * @param {number} n\r\n * @param {EventTarget[] | EventEmitter[]} [eventTargets]\r\n * @returns {void}\r\n */\r\nEventEmitter.setMaxListeners =\r\n  function(n = defaultMaxListeners, ...eventTargets) {\r\n    validateNumber(n, 'setMaxListeners', 0);\r\n    if (eventTargets.length === 0) {\r\n      defaultMaxListeners = n;\r\n    } else {\r\n      if (isEventTarget === undefined)\r\n        isEventTarget = require('internal/event_target').isEventTarget;\r\n\r\n      for (let i = 0; i < eventTargets.length; i++) {\r\n        const target = eventTargets[i];\r\n        if (isEventTarget(target)) {\r\n          target[kMaxEventTargetListeners] = n;\r\n          target[kMaxEventTargetListenersWarned] = false;\r\n        } else if (typeof target.setMaxListeners === 'function') {\r\n          target.setMaxListeners(n);\r\n        } else {\r\n          throw new ERR_INVALID_ARG_TYPE(\r\n            'eventTargets',\r\n            ['EventEmitter', 'EventTarget'],\r\n            target);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n// If you're updating this function definition, please also update any\r\n// re-definitions, such as the one in the Domain module (lib/domain.js).\r\nEventEmitter.init = function(opts) {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === ObjectGetPrototypeOf(this)._events) {\r\n    this._events = { __proto__: null };\r\n    this._eventsCount = 0;\r\n    this[kShapeMode] = false;\r\n  } else {\r\n    this[kShapeMode] = true;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n\r\n\r\n  if (opts?.captureRejections) {\r\n    validateBoolean(opts.captureRejections, 'options.captureRejections');\r\n    this[kCapture] = Boolean(opts.captureRejections);\r\n  } else {\r\n    // Assigning the kCapture property directly saves an expensive\r\n    // prototype lookup in a very sensitive hot path.\r\n    this[kCapture] = EventEmitter.prototype[kCapture];\r\n  }\r\n};\r\n\r\nfunction addCatch(that, promise, type, args) {\r\n  if (!that[kCapture]) {\r\n    return;\r\n  }\r\n\r\n  // Handle Promises/A+ spec, then could be a getter\r\n  // that throws on second use.\r\n  try {\r\n    const then = promise.then;\r\n\r\n    if (typeof then === 'function') {\r\n      then.call(promise, undefined, function(err) {\r\n        // The callback is called with nextTick to avoid a follow-up\r\n        // rejection from this promise.\r\n        process.nextTick(emitUnhandledRejectionOrErr, that, err, type, args);\r\n      });\r\n    }\r\n  } catch (err) {\r\n    that.emit('error', err);\r\n  }\r\n}\r\n\r\nfunction emitUnhandledRejectionOrErr(ee, err, type, args) {\r\n  if (typeof ee[kRejection] === 'function') {\r\n    ee[kRejection](err, type, ...args);\r\n  } else {\r\n    // We have to disable the capture rejections mechanism, otherwise\r\n    // we might end up in an infinite loop.\r\n    const prev = ee[kCapture];\r\n\r\n    // If the error handler throws, it is not catchable and it\r\n    // will end up in 'uncaughtException'. We restore the previous\r\n    // value of kCapture in case the uncaughtException is present\r\n    // and the exception is handled.\r\n    try {\r\n      ee[kCapture] = false;\r\n      ee.emit('error', err);\r\n    } finally {\r\n      ee[kCapture] = prev;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Increases the max listeners of the event emitter.\r\n * @param {number} n\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  validateNumber(n, 'setMaxListeners', 0);\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\n/**\r\n * Returns the current max listener value for the event emitter.\r\n * @returns {number}\r\n */\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nfunction enhanceStackTrace(err, own) {\r\n  let ctorInfo = '';\r\n  try {\r\n    const { name } = this.constructor;\r\n    if (name !== 'EventEmitter')\r\n      ctorInfo = ` on ${name} instance`;\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\r\n\r\n  const errStack = ArrayPrototypeSlice(\r\n    StringPrototypeSplit(err.stack, '\\n'), 1);\r\n  const ownStack = ArrayPrototypeSlice(\r\n    StringPrototypeSplit(own.stack, '\\n'), 1);\r\n\r\n  const { len, offset } = identicalSequenceRange(ownStack, errStack);\r\n  if (len > 0) {\r\n    ArrayPrototypeSplice(ownStack, offset + 1, len - 2,\r\n                         '    [... lines matching original stack trace ...]');\r\n  }\r\n\r\n  return err.stack + sep + ArrayPrototypeJoin(ownStack, '\\n');\r\n}\r\n\r\n/**\r\n * Synchronously calls each of the listeners registered\r\n * for the event.\r\n * @param {string | symbol} type\r\n * @param {...any} [args]\r\n * @returns {boolean}\r\n */\r\nEventEmitter.prototype.emit = function emit(type, ...args) {\r\n  let doError = (type === 'error');\r\n\r\n  const events = this._events;\r\n  if (events !== undefined) {\r\n    if (doError && events[kErrorMonitor] !== undefined)\r\n      this.emit(kErrorMonitor, ...args);\r\n    doError = (doError && events.error === undefined);\r\n  } else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    let er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      try {\r\n        const capture = {};\r\n        ErrorCaptureStackTrace(capture, EventEmitter.prototype.emit);\r\n        ObjectDefineProperty(er, kEnhanceStackBeforeInspector, {\r\n          __proto__: null,\r\n          value: FunctionPrototypeBind(enhanceStackTrace, this, er, capture),\r\n          configurable: true,\r\n        });\r\n      } catch {\r\n        // Continue regardless of error.\r\n      }\r\n\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n\r\n    let stringifiedEr;\r\n    try {\r\n      stringifiedEr = inspect(er);\r\n    } catch {\r\n      stringifiedEr = er;\r\n    }\r\n\r\n    // At least give some kind of context to the user\r\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  const handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    const result = handler.apply(this, args);\r\n\r\n    // We check if result is undefined first because that\r\n    // is the most common case so we do not pay any perf\r\n    // penalty\r\n    if (result !== undefined && result !== null) {\r\n      addCatch(this, result, type, args);\r\n    }\r\n  } else {\r\n    const len = handler.length;\r\n    const listeners = arrayClone(handler);\r\n    for (let i = 0; i < len; ++i) {\r\n      const result = listeners[i].apply(this, args);\r\n\r\n      // We check if result is undefined first because that\r\n      // is the most common case so we do not pay any perf\r\n      // penalty.\r\n      // This code is duplicated because extracting it away\r\n      // would make it non-inlineable.\r\n      if (result !== undefined && result !== null) {\r\n        addCatch(this, result, type, args);\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  let m;\r\n  let events;\r\n  let existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = { __proto__: null };\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ?? listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      const w = genericNodeError(\r\n        `Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners ` +\r\n        `added to ${inspect(target, { depth: -1 })}. MaxListeners is ${m}. Use emitter.setMaxListeners() to increase limit`,\r\n        { name: 'MaxListenersExceededWarning', emitter: target, type: type, count: existing.length });\r\n      process.emitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Adds a listener to the event emitter.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\n/**\r\n * Adds the `listener` function to the beginning of\r\n * the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  const state = { fired: false, wrapFn: undefined, target, type, listener };\r\n  const wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\n/**\r\n * Adds a one-time `listener` function to the event emitter.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a one-time `listener` function to the beginning of\r\n * the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n/**\r\n * Removes the specified `listener` from the listeners array.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      checkListener(listener);\r\n\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      const list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        this._eventsCount -= 1;\r\n\r\n        if (this[kShapeMode]) {\r\n          events[type] = undefined;\r\n        } else if (this._eventsCount === 0) {\r\n          this._events = { __proto__: null };\r\n        } else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        let position = -1;\r\n\r\n        for (let i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          if (spliceOne === undefined)\r\n            spliceOne = require('internal/util').spliceOne;\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\n/**\r\n * Removes all listeners from the event emitter. (Only\r\n * removes listeners for a specific event name if specified\r\n * as `type`).\r\n * @param {string | symbol} [type]\r\n * @returns {EventEmitter}\r\n */\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // Not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = { __proto__: null };\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = { __proto__: null };\r\n          else\r\n            delete events[type];\r\n        }\r\n        this[kShapeMode] = false;\r\n        return this;\r\n      }\r\n\r\n      // Emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        for (const key of ReflectOwnKeys(events)) {\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = { __proto__: null };\r\n        this._eventsCount = 0;\r\n        this[kShapeMode] = false;\r\n        return this;\r\n      }\r\n\r\n      const listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (let i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  const events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  const evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener);\r\n}\r\n\r\n/**\r\n * Returns a copy of the array of listeners for the event name\r\n * specified as `type`.\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\n/**\r\n * Returns a copy of the array of listeners and wrappers for\r\n * the event name specified as `type`.\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\n/**\r\n * Returns the number of listeners listening to the event name\r\n * specified as `type`.\r\n * @deprecated since v3.2.0\r\n * @param {EventEmitter} emitter\r\n * @param {string | symbol} type\r\n * @returns {number}\r\n */\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  }\r\n  return FunctionPrototypeCall(listenerCount, emitter, type);\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\n\r\n/**\r\n * Returns the number of listeners listening to event name\r\n * specified as `type`.\r\n * @param {string | symbol} type\r\n * @param {Function} listener\r\n * @returns {number}\r\n */\r\nfunction listenerCount(type, listener) {\r\n  const events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    const evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      if (listener != null) {\r\n        return listener === evlistener || listener === evlistener.listener ? 1 : 0;\r\n      }\r\n\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      if (listener != null) {\r\n        let matching = 0;\r\n\r\n        for (let i = 0, l = evlistener.length; i < l; i++) {\r\n          if (evlistener[i] === listener || evlistener[i].listener === listener) {\r\n            matching++;\r\n          }\r\n        }\r\n\r\n        return matching;\r\n      }\r\n\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Returns an array listing the events for which\r\n * the emitter has registered listeners.\r\n * @returns {any[]}\r\n */\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr) {\r\n  // At least since V8 8.3, this implementation is faster than the previous\r\n  // which always used a simple for-loop\r\n  switch (arr.length) {\r\n    case 2: return [arr[0], arr[1]];\r\n    case 3: return [arr[0], arr[1], arr[2]];\r\n    case 4: return [arr[0], arr[1], arr[2], arr[3]];\r\n    case 5: return [arr[0], arr[1], arr[2], arr[3], arr[4]];\r\n    case 6: return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];\r\n  }\r\n  return ArrayPrototypeSlice(arr);\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  const ret = arrayClone(arr);\r\n  for (let i = 0; i < ret.length; ++i) {\r\n    const orig = ret[i].listener;\r\n    if (typeof orig === 'function')\r\n      ret[i] = orig;\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns a copy of the array of listeners for the event name\r\n * specified as `type`.\r\n * @param {EventEmitter | EventTarget} emitterOrTarget\r\n * @param {string | symbol} type\r\n * @returns {Function[]}\r\n */\r\nfunction getEventListeners(emitterOrTarget, type) {\r\n  // First check if EventEmitter\r\n  if (typeof emitterOrTarget.listeners === 'function') {\r\n    return emitterOrTarget.listeners(type);\r\n  }\r\n  // Require event target lazily to avoid always loading it\r\n  const { isEventTarget, kEvents } = require('internal/event_target');\r\n  if (isEventTarget(emitterOrTarget)) {\r\n    const root = emitterOrTarget[kEvents].get(type);\r\n    const listeners = [];\r\n    let handler = root?.next;\r\n    while (handler?.listener !== undefined) {\r\n      const listener = handler.listener?.deref ?\r\n        handler.listener.deref() : handler.listener;\r\n      listeners.push(listener);\r\n      handler = handler.next;\r\n    }\r\n    return listeners;\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE('emitter',\r\n                                 ['EventEmitter', 'EventTarget'],\r\n                                 emitterOrTarget);\r\n}\r\n\r\n/**\r\n * Returns the max listeners set.\r\n * @param {EventEmitter | EventTarget} emitterOrTarget\r\n * @returns {number}\r\n */\r\nfunction getMaxListeners(emitterOrTarget) {\r\n  if (typeof emitterOrTarget?.getMaxListeners === 'function') {\r\n    return _getMaxListeners(emitterOrTarget);\r\n  } else if (emitterOrTarget?.[kMaxEventTargetListeners]) {\r\n    return emitterOrTarget[kMaxEventTargetListeners];\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('emitter',\r\n                                 ['EventEmitter', 'EventTarget'],\r\n                                 emitterOrTarget);\r\n}\r\n\r\n/**\r\n * Creates a `Promise` that is fulfilled when the emitter\r\n * emits the given event.\r\n * @param {EventEmitter} emitter\r\n * @param {string} name\r\n * @param {{ signal: AbortSignal; }} [options]\r\n * @returns {Promise}\r\n */\r\nasync function once(emitter, name, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const signal = options?.signal;\r\n  validateAbortSignal(signal, 'options.signal');\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  return new Promise((resolve, reject) => {\r\n    const errorListener = (err) => {\r\n      emitter.removeListener(name, resolver);\r\n      if (signal != null) {\r\n        eventTargetAgnosticRemoveListener(signal, 'abort', abortListener);\r\n      }\r\n      reject(err);\r\n    };\r\n    const resolver = (...args) => {\r\n      if (typeof emitter.removeListener === 'function') {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      if (signal != null) {\r\n        eventTargetAgnosticRemoveListener(signal, 'abort', abortListener);\r\n      }\r\n      resolve(args);\r\n    };\r\n\r\n    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n    const opts = { __proto__: null, once: true, [kResistStopPropagation]: true };\r\n    eventTargetAgnosticAddListener(emitter, name, resolver, opts);\r\n    if (name !== 'error' && typeof emitter.once === 'function') {\r\n      // EventTarget does not have `error` event semantics like Node\r\n      // EventEmitters, we listen to `error` events only on EventEmitters.\r\n      emitter.once('error', errorListener);\r\n    }\r\n    function abortListener() {\r\n      eventTargetAgnosticRemoveListener(emitter, name, resolver);\r\n      eventTargetAgnosticRemoveListener(emitter, 'error', errorListener);\r\n      reject(new AbortError(undefined, { cause: signal?.reason }));\r\n    }\r\n    if (signal != null) {\r\n      eventTargetAgnosticAddListener(\r\n        signal, 'abort', abortListener, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    }\r\n  });\r\n}\r\n\r\nconst AsyncIteratorPrototype = ObjectGetPrototypeOf(\r\n  ObjectGetPrototypeOf(async function* () {}).prototype);\r\n\r\nfunction createIterResult(value, done) {\r\n  return { value, done };\r\n}\r\n\r\nfunction eventTargetAgnosticRemoveListener(emitter, name, listener, flags) {\r\n  if (typeof emitter.removeListener === 'function') {\r\n    emitter.removeListener(name, listener);\r\n  } else if (typeof emitter.removeEventListener === 'function') {\r\n    emitter.removeEventListener(name, listener, flags);\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('emitter', 'EventEmitter', emitter);\r\n  }\r\n}\r\n\r\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\r\n  if (typeof emitter.on === 'function') {\r\n    if (flags?.once) {\r\n      emitter.once(name, listener);\r\n    } else {\r\n      emitter.on(name, listener);\r\n    }\r\n  } else if (typeof emitter.addEventListener === 'function') {\r\n    emitter.addEventListener(name, listener, flags);\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE('emitter', 'EventEmitter', emitter);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an `AsyncIterator` that iterates `event` events.\r\n * @param {EventEmitter} emitter\r\n * @param {string | symbol} event\r\n * @param {{\r\n *    signal: AbortSignal;\r\n *    close?: string[];\r\n *    highWaterMark?: number,\r\n *    lowWaterMark?: number\r\n *   }} [options]\r\n * @returns {AsyncIterator}\r\n */\r\nfunction on(emitter, event, options = kEmptyObject) {\r\n  // Parameters validation\r\n  validateObject(options, 'options');\r\n  const signal = options.signal;\r\n  validateAbortSignal(signal, 'options.signal');\r\n  if (signal?.aborted)\r\n    throw new AbortError(undefined, { cause: signal?.reason });\r\n  // Support both highWaterMark and highWatermark for backward compatibility\r\n  const highWatermark = options.highWaterMark ?? options.highWatermark ?? NumberMAX_SAFE_INTEGER;\r\n  validateInteger(highWatermark, 'options.highWaterMark', 1);\r\n  // Support both lowWaterMark and lowWatermark for backward compatibility\r\n  const lowWatermark = options.lowWaterMark ?? options.lowWatermark ?? 1;\r\n  validateInteger(lowWatermark, 'options.lowWaterMark', 1);\r\n\r\n  // Preparing controlling queues and variables\r\n  FixedQueue ??= require('internal/fixed_queue');\r\n  const unconsumedEvents = new FixedQueue();\r\n  const unconsumedPromises = new FixedQueue();\r\n  let paused = false;\r\n  let error = null;\r\n  let finished = false;\r\n  let size = 0;\r\n\r\n  const iterator = ObjectSetPrototypeOf({\r\n    next() {\r\n      // First, we consume all unread events\r\n      if (size) {\r\n        const value = unconsumedEvents.shift();\r\n        size--;\r\n        if (paused && size < lowWatermark) {\r\n          emitter.resume();\r\n          paused = false;\r\n        }\r\n        return PromiseResolve(createIterResult(value, false));\r\n      }\r\n\r\n      // Then we error, if an error happened\r\n      // This happens one time if at all, because after 'error'\r\n      // we stop listening\r\n      if (error) {\r\n        const p = PromiseReject(error);\r\n        // Only the first element errors\r\n        error = null;\r\n        return p;\r\n      }\r\n\r\n      // If the iterator is finished, resolve to done\r\n      if (finished) return closeHandler();\r\n\r\n      // Wait until an event happens\r\n      return new Promise(function(resolve, reject) {\r\n        unconsumedPromises.push({ resolve, reject });\r\n      });\r\n    },\r\n\r\n    return() {\r\n      return closeHandler();\r\n    },\r\n\r\n    throw(err) {\r\n      if (!err || !(err instanceof Error)) {\r\n        throw new ERR_INVALID_ARG_TYPE('EventEmitter.AsyncIterator',\r\n                                       'Error', err);\r\n      }\r\n      errorHandler(err);\r\n    },\r\n    [SymbolAsyncIterator]() {\r\n      return this;\r\n    },\r\n    [kWatermarkData]: {\r\n      /**\r\n       * The current queue size\r\n       */\r\n      get size() {\r\n        return size;\r\n      },\r\n      /**\r\n       * The low watermark. The emitter is resumed every time size is lower than it\r\n       */\r\n      get low() {\r\n        return lowWatermark;\r\n      },\r\n      /**\r\n       * The high watermark. The emitter is paused every time size is higher than it\r\n       */\r\n      get high() {\r\n        return highWatermark;\r\n      },\r\n      /**\r\n       * It checks whether the emitter is paused by the watermark controller or not\r\n       */\r\n      get isPaused() {\r\n        return paused;\r\n      },\r\n    },\r\n  }, AsyncIteratorPrototype);\r\n\r\n  // Adding event handlers\r\n  const { addEventListener, removeAll } = listenersController();\r\n  kFirstEventParam ??= require('internal/events/symbols').kFirstEventParam;\r\n  addEventListener(emitter, event, options[kFirstEventParam] ? eventHandler : function(...args) {\r\n    return eventHandler(args);\r\n  });\r\n  if (event !== 'error' && typeof emitter.on === 'function') {\r\n    addEventListener(emitter, 'error', errorHandler);\r\n  }\r\n  const closeEvents = options?.close;\r\n  if (closeEvents?.length) {\r\n    for (let i = 0; i < closeEvents.length; i++) {\r\n      addEventListener(emitter, closeEvents[i], closeHandler);\r\n    }\r\n  }\r\n\r\n  const abortListenerDisposable = signal ? addAbortListener(signal, abortListener) : null;\r\n\r\n  return iterator;\r\n\r\n  function abortListener() {\r\n    errorHandler(new AbortError(undefined, { cause: signal?.reason }));\r\n  }\r\n\r\n  function eventHandler(value) {\r\n    if (unconsumedPromises.isEmpty()) {\r\n      size++;\r\n      if (!paused && size > highWatermark) {\r\n        paused = true;\r\n        emitter.pause();\r\n      }\r\n      unconsumedEvents.push(value);\r\n    } else unconsumedPromises.shift().resolve(createIterResult(value, false));\r\n  }\r\n\r\n  function errorHandler(err) {\r\n    if (unconsumedPromises.isEmpty()) error = err;\r\n    else unconsumedPromises.shift().reject(err);\r\n\r\n    closeHandler();\r\n  }\r\n\r\n  function closeHandler() {\r\n    abortListenerDisposable?.[SymbolDispose]();\r\n    removeAll();\r\n    finished = true;\r\n    const doneResult = createIterResult(undefined, true);\r\n    while (!unconsumedPromises.isEmpty()) {\r\n      unconsumedPromises.shift().resolve(doneResult);\r\n    }\r\n\r\n    return PromiseResolve(doneResult);\r\n  }\r\n}\r\n\r\nfunction listenersController() {\r\n  const listeners = [];\r\n\r\n  return {\r\n    addEventListener(emitter, event, handler, flags) {\r\n      eventTargetAgnosticAddListener(emitter, event, handler, flags);\r\n      ArrayPrototypePush(listeners, [emitter, event, handler, flags]);\r\n    },\r\n    removeAll() {\r\n      while (listeners.length > 0) {\r\n        ReflectApply(eventTargetAgnosticRemoveListener, undefined, ArrayPrototypePop(listeners));\r\n      }\r\n    },\r\n  };\r\n}\r\n"
  },
  "22": {
    "metadata": {
      "scriptId": "22",
      "url": "node:internal/events/abort_listener",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 54,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ed4d4598e28d72f54d64a5b67654339b77d56b84a319e656e8933430773c2adb",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1374,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/events/abort_listener"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SymbolDispose,\r\n} = primordials;\r\nconst {\r\n  validateAbortSignal,\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nlet queueMicrotask;\r\nlet kResistStopPropagation;\r\n\r\n/**\r\n * @param {AbortSignal} signal\r\n * @param {EventListener} listener\r\n * @returns {Disposable}\r\n */\r\nfunction addAbortListener(signal, listener) {\r\n  if (signal === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('signal', 'AbortSignal', signal);\r\n  }\r\n  validateAbortSignal(signal, 'signal');\r\n  validateFunction(listener, 'listener');\r\n\r\n  let removeEventListener;\r\n  if (signal.aborted) {\r\n    queueMicrotask ??= require('internal/process/task_queues').queueMicrotask;\r\n    queueMicrotask(() => listener());\r\n  } else {\r\n    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n    // TODO(atlowChemi) add { subscription: true } and return directly\r\n    signal.addEventListener('abort', listener, { __proto__: null, once: true, [kResistStopPropagation]: true });\r\n    removeEventListener = () => {\r\n      signal.removeEventListener('abort', listener);\r\n    };\r\n  }\r\n  return {\r\n    __proto__: null,\r\n    [SymbolDispose]() {\r\n      removeEventListener?.();\r\n    },\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  __proto__: null,\r\n  addAbortListener,\r\n};\r\n"
  },
  "23": {
    "metadata": {
      "scriptId": "23",
      "url": "node:buffer",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1340,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b7f0c157bc262cc3b98dd84f244150b6ebf24b8b39ca5643168a9bd165f60dce",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 40125,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:buffer"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  MathFloor,\r\n  MathMin,\r\n  MathTrunc,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n  StringPrototypeTrim,\r\n  SymbolSpecies,\r\n  SymbolToPrimitive,\r\n  TypedArrayPrototypeFill,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteLength,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  TypedArrayPrototypeGetLength,\r\n  TypedArrayPrototypeSet,\r\n  TypedArrayPrototypeSlice,\r\n  Uint8Array,\r\n  Uint8ArrayPrototype,\r\n} = primordials;\r\n\r\nconst {\r\n  byteLengthUtf8,\r\n  compare: _compare,\r\n  compareOffset,\r\n  createFromString,\r\n  fill: bindingFill,\r\n  isAscii: bindingIsAscii,\r\n  isUtf8: bindingIsUtf8,\r\n  indexOfBuffer,\r\n  indexOfNumber,\r\n  indexOfString,\r\n  swap16: _swap16,\r\n  swap32: _swap32,\r\n  swap64: _swap64,\r\n  kMaxLength,\r\n  kStringMaxLength,\r\n  atob: _atob,\r\n  btoa: _btoa,\r\n} = internalBinding('buffer');\r\nconst {\r\n  constants: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE,\r\n  },\r\n  getOwnNonIndexProperties,\r\n} = internalBinding('util');\r\nconst {\r\n  customInspectSymbol,\r\n  isInsideNodeModules,\r\n  lazyDOMException,\r\n  normalizeEncoding,\r\n  kIsEncodingSymbol,\r\n  defineLazyProperties,\r\n  encodingsMap,\r\n} = require('internal/util');\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n  isTypedArray,\r\n} = require('internal/util/types');\r\nconst {\r\n  inspect: utilInspect,\r\n} = require('internal/util/inspect');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BUFFER_OUT_OF_BOUNDS,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_BUFFER_SIZE,\r\n    ERR_MISSING_ARGS,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_ENCODING,\r\n  },\r\n  genericNodeError,\r\n} = require('internal/errors');\r\nconst {\r\n  validateArray,\r\n  validateBuffer,\r\n  validateInteger,\r\n  validateNumber,\r\n  validateString,\r\n} = require('internal/validators');\r\n// Provide validateInteger() but with kMaxLength as the default maximum value.\r\nconst validateOffset = (value, name, min = 0, max = kMaxLength) =>\r\n  validateInteger(value, name, min, max);\r\n\r\nconst {\r\n  FastBuffer,\r\n  markAsUntransferable,\r\n  addBufferPrototypeMethods,\r\n  createUnsafeBuffer,\r\n} = require('internal/buffer');\r\n\r\nFastBuffer.prototype.constructor = Buffer;\r\nBuffer.prototype = FastBuffer.prototype;\r\naddBufferPrototypeMethods(Buffer.prototype);\r\n\r\nconst constants = ObjectDefineProperties({}, {\r\n  MAX_LENGTH: {\r\n    __proto__: null,\r\n    value: kMaxLength,\r\n    writable: false,\r\n    enumerable: true,\r\n  },\r\n  MAX_STRING_LENGTH: {\r\n    __proto__: null,\r\n    value: kStringMaxLength,\r\n    writable: false,\r\n    enumerable: true,\r\n  },\r\n});\r\n\r\nBuffer.poolSize = 8 * 1024;\r\nlet poolSize, poolOffset, allocPool;\r\n\r\nfunction createPool() {\r\n  poolSize = Buffer.poolSize;\r\n  allocPool = createUnsafeBuffer(poolSize).buffer;\r\n  markAsUntransferable(allocPool);\r\n  poolOffset = 0;\r\n}\r\ncreatePool();\r\n\r\nfunction alignPool() {\r\n  // Ensure aligned slices\r\n  if (poolOffset & 0x7) {\r\n    poolOffset |= 0x7;\r\n    poolOffset++;\r\n  }\r\n}\r\n\r\nlet bufferWarningAlreadyEmitted = false;\r\nlet nodeModulesCheckCounter = 0;\r\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\r\n                      'issues. Please use the Buffer.alloc(), ' +\r\n                      'Buffer.allocUnsafe(), or Buffer.from() methods instead.';\r\n\r\nfunction showFlaggedDeprecation() {\r\n  if (bufferWarningAlreadyEmitted ||\r\n      ++nodeModulesCheckCounter > 10000 ||\r\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\r\n       isInsideNodeModules())) {\r\n    // We don't emit a warning, because we either:\r\n    // - Already did so, or\r\n    // - Already checked too many times whether a call is coming\r\n    //   from node_modules and want to stop slowing down things, or\r\n    // - We aren't running with `--pending-deprecation` enabled,\r\n    //   and the code is inside `node_modules`.\r\n    return;\r\n  }\r\n\r\n  process.emitWarning(bufferWarning, 'DeprecationWarning', 'DEP0005');\r\n  bufferWarningAlreadyEmitted = true;\r\n}\r\n\r\nfunction toInteger(n, defaultVal) {\r\n  n = +n;\r\n  if (!NumberIsNaN(n) &&\r\n      n >= NumberMIN_SAFE_INTEGER &&\r\n      n <= NumberMAX_SAFE_INTEGER) {\r\n    return ((n % 1) === 0 ? n : MathFloor(n));\r\n  }\r\n  return defaultVal;\r\n}\r\n\r\nfunction _copy(source, target, targetStart, sourceStart, sourceEnd) {\r\n  if (!isUint8Array(source))\r\n    throw new ERR_INVALID_ARG_TYPE('source', ['Buffer', 'Uint8Array'], source);\r\n  if (!isUint8Array(target))\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n\r\n  if (targetStart === undefined) {\r\n    targetStart = 0;\r\n  } else {\r\n    targetStart = toInteger(targetStart, 0);\r\n    if (targetStart < 0)\r\n      throw new ERR_OUT_OF_RANGE('targetStart', '>= 0', targetStart);\r\n  }\r\n\r\n  if (sourceStart === undefined) {\r\n    sourceStart = 0;\r\n  } else {\r\n    sourceStart = toInteger(sourceStart, 0);\r\n    if (sourceStart < 0 || sourceStart > source.length)\r\n      throw new ERR_OUT_OF_RANGE('sourceStart', `>= 0 && <= ${source.length}`, sourceStart);\r\n  }\r\n\r\n  if (sourceEnd === undefined) {\r\n    sourceEnd = source.length;\r\n  } else {\r\n    sourceEnd = toInteger(sourceEnd, 0);\r\n    if (sourceEnd < 0)\r\n      throw new ERR_OUT_OF_RANGE('sourceEnd', '>= 0', sourceEnd);\r\n  }\r\n\r\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\r\n    return 0;\r\n\r\n  return _copyActual(source, target, targetStart, sourceStart, sourceEnd);\r\n}\r\n\r\nfunction _copyActual(source, target, targetStart, sourceStart, sourceEnd) {\r\n  if (sourceEnd - sourceStart > target.length - targetStart)\r\n    sourceEnd = sourceStart + target.length - targetStart;\r\n\r\n  let nb = sourceEnd - sourceStart;\r\n  const sourceLen = source.length - sourceStart;\r\n  if (nb > sourceLen)\r\n    nb = sourceLen;\r\n\r\n  if (sourceStart !== 0 || sourceEnd < source.length)\r\n    source = new Uint8Array(source.buffer, source.byteOffset + sourceStart, nb);\r\n\r\n  TypedArrayPrototypeSet(target, source, targetStart);\r\n\r\n  return nb;\r\n}\r\n\r\n/**\r\n * The Buffer() constructor is deprecated in documentation and should not be\r\n * used moving forward. Rather, developers should use one of the three new\r\n * factory APIs: Buffer.from(), Buffer.allocUnsafe() or Buffer.alloc() based on\r\n * their specific needs. There is no runtime deprecation because of the extent\r\n * to which the Buffer constructor is used in the ecosystem currently -- a\r\n * runtime deprecation would introduce too much breakage at this time. It's not\r\n * likely that the Buffer constructors would ever actually be removed.\r\n * Deprecation Code: DEP0005\r\n */\r\nfunction Buffer(arg, encodingOrOffset, length) {\r\n  showFlaggedDeprecation();\r\n  // Common case.\r\n  if (typeof arg === 'number') {\r\n    if (typeof encodingOrOffset === 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('string', 'string', arg);\r\n    }\r\n    return Buffer.alloc(arg);\r\n  }\r\n  return Buffer.from(arg, encodingOrOffset, length);\r\n}\r\n\r\nObjectDefineProperty(Buffer, SymbolSpecies, {\r\n  __proto__: null,\r\n  enumerable: false,\r\n  configurable: true,\r\n  get() { return FastBuffer; },\r\n});\r\n\r\n/**\r\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n * if value is a number.\r\n * Buffer.from(str[, encoding])\r\n * Buffer.from(array)\r\n * Buffer.from(buffer)\r\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n */\r\nBuffer.from = function from(value, encodingOrOffset, length) {\r\n  if (typeof value === 'string')\r\n    return fromString(value, encodingOrOffset);\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    if (isAnyArrayBuffer(value))\r\n      return fromArrayBuffer(value, encodingOrOffset, length);\r\n\r\n    const valueOf = value.valueOf && value.valueOf();\r\n    if (valueOf != null &&\r\n        valueOf !== value &&\r\n        (typeof valueOf === 'string' || typeof valueOf === 'object')) {\r\n      return from(valueOf, encodingOrOffset, length);\r\n    }\r\n\r\n    const b = fromObject(value);\r\n    if (b)\r\n      return b;\r\n\r\n    if (typeof value[SymbolToPrimitive] === 'function') {\r\n      const primitive = value[SymbolToPrimitive]('string');\r\n      if (typeof primitive === 'string') {\r\n        return fromString(primitive, encodingOrOffset);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'first argument',\r\n    ['string', 'Buffer', 'ArrayBuffer', 'Array', 'Array-like Object'],\r\n    value,\r\n  );\r\n};\r\n\r\n/**\r\n * Creates the Buffer as a copy of the underlying ArrayBuffer of the view\r\n * rather than the contents of the view.\r\n * @param {TypedArray} view\r\n * @param {number} [offset]\r\n * @param {number} [length]\r\n * @returns {Buffer}\r\n */\r\nBuffer.copyBytesFrom = function copyBytesFrom(view, offset, length) {\r\n  if (!isTypedArray(view)) {\r\n    throw new ERR_INVALID_ARG_TYPE('view', [ 'TypedArray' ], view);\r\n  }\r\n\r\n  const viewLength = TypedArrayPrototypeGetLength(view);\r\n  if (viewLength === 0) {\r\n    return Buffer.alloc(0);\r\n  }\r\n\r\n  if (offset !== undefined || length !== undefined) {\r\n    if (offset !== undefined) {\r\n      validateInteger(offset, 'offset', 0);\r\n      if (offset >= viewLength) return Buffer.alloc(0);\r\n    } else {\r\n      offset = 0;\r\n    }\r\n    let end;\r\n    if (length !== undefined) {\r\n      validateInteger(length, 'length', 0);\r\n      end = offset + length;\r\n    } else {\r\n      end = viewLength;\r\n    }\r\n\r\n    view = TypedArrayPrototypeSlice(view, offset, end);\r\n  }\r\n\r\n  return fromArrayLike(new Uint8Array(\r\n    TypedArrayPrototypeGetBuffer(view),\r\n    TypedArrayPrototypeGetByteOffset(view),\r\n    TypedArrayPrototypeGetByteLength(view)));\r\n};\r\n\r\n// Identical to the built-in %TypedArray%.of(), but avoids using the deprecated\r\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\r\n// adding a `prototype` property and making the function a constructor.\r\n//\r\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\r\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\r\nconst of = (...items) => {\r\n  const newObj = createUnsafeBuffer(items.length);\r\n  for (let k = 0; k < items.length; k++)\r\n    newObj[k] = items[k];\r\n  return newObj;\r\n};\r\nBuffer.of = of;\r\n\r\nObjectSetPrototypeOf(Buffer, Uint8Array);\r\n\r\n/**\r\n * Creates a new filled Buffer instance.\r\n * alloc(size[, fill[, encoding]])\r\n */\r\nBuffer.alloc = function alloc(size, fill, encoding) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  if (fill !== undefined && fill !== 0 && size > 0) {\r\n    const buf = createUnsafeBuffer(size);\r\n    return _fill(buf, fill, 0, buf.length, encoding);\r\n  }\r\n  return new FastBuffer(size);\r\n};\r\n\r\n/**\r\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer\r\n * instance. If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafe = function allocUnsafe(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return allocate(size);\r\n};\r\n\r\n/**\r\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled\r\n * Buffer instance that is not allocated off the pre-initialized pool.\r\n * If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return createUnsafeBuffer(size);\r\n};\r\n\r\n// If --zero-fill-buffers command line argument is set, a zero-filled\r\n// buffer is returned.\r\nfunction SlowBuffer(size) {\r\n  validateNumber(size, 'size', 0, kMaxLength);\r\n  return createUnsafeBuffer(size);\r\n}\r\n\r\nObjectSetPrototypeOf(SlowBuffer.prototype, Uint8ArrayPrototype);\r\nObjectSetPrototypeOf(SlowBuffer, Uint8Array);\r\n\r\nfunction allocate(size) {\r\n  if (size <= 0) {\r\n    return new FastBuffer();\r\n  }\r\n  if (size < (Buffer.poolSize >>> 1)) {\r\n    if (size > (poolSize - poolOffset))\r\n      createPool();\r\n    const b = new FastBuffer(allocPool, poolOffset, size);\r\n    poolOffset += size;\r\n    alignPool();\r\n    return b;\r\n  }\r\n  return createUnsafeBuffer(size);\r\n}\r\n\r\nfunction fromStringFast(string, ops) {\r\n  const length = ops.byteLength(string);\r\n\r\n  if (length >= (Buffer.poolSize >>> 1))\r\n    return createFromString(string, ops.encodingVal);\r\n\r\n  if (length > (poolSize - poolOffset))\r\n    createPool();\r\n  let b = new FastBuffer(allocPool, poolOffset, length);\r\n  const actual = ops.write(b, string, 0, length);\r\n  if (actual !== length) {\r\n    // byteLength() may overestimate. That's a rare case, though.\r\n    b = new FastBuffer(allocPool, poolOffset, actual);\r\n  }\r\n  poolOffset += actual;\r\n  alignPool();\r\n  return b;\r\n}\r\n\r\nfunction fromString(string, encoding) {\r\n  let ops;\r\n  if (typeof encoding !== 'string' || encoding.length === 0) {\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n    ops = encodingOps.utf8;\r\n  } else {\r\n    ops = getEncodingOps(encoding);\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n  }\r\n  return fromStringFast(string, ops);\r\n}\r\n\r\nfunction fromArrayBuffer(obj, byteOffset, length) {\r\n  // Convert byteOffset to integer\r\n  if (byteOffset === undefined) {\r\n    byteOffset = 0;\r\n  } else {\r\n    byteOffset = +byteOffset;\r\n    if (NumberIsNaN(byteOffset))\r\n      byteOffset = 0;\r\n  }\r\n\r\n  const maxLength = obj.byteLength - byteOffset;\r\n\r\n  if (maxLength < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\r\n\r\n  if (length === undefined) {\r\n    length = maxLength;\r\n  } else {\r\n    // Convert length to non-negative integer.\r\n    length = +length;\r\n    if (length > 0) {\r\n      if (length > maxLength)\r\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\r\n    } else {\r\n      length = 0;\r\n    }\r\n  }\r\n\r\n  return new FastBuffer(obj, byteOffset, length);\r\n}\r\n\r\nfunction fromArrayLike(obj) {\r\n  if (obj.length <= 0)\r\n    return new FastBuffer();\r\n  if (obj.length < (Buffer.poolSize >>> 1)) {\r\n    if (obj.length > (poolSize - poolOffset))\r\n      createPool();\r\n    const b = new FastBuffer(allocPool, poolOffset, obj.length);\r\n    TypedArrayPrototypeSet(b, obj, 0);\r\n    poolOffset += obj.length;\r\n    alignPool();\r\n    return b;\r\n  }\r\n  return new FastBuffer(obj);\r\n}\r\n\r\nfunction fromObject(obj) {\r\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\r\n    if (typeof obj.length !== 'number') {\r\n      return new FastBuffer();\r\n    }\r\n    return fromArrayLike(obj);\r\n  }\r\n\r\n  if (obj.type === 'Buffer' && ArrayIsArray(obj.data)) {\r\n    return fromArrayLike(obj.data);\r\n  }\r\n}\r\n\r\n// Static methods\r\n\r\nBuffer.isBuffer = function isBuffer(b) {\r\n  return b instanceof Buffer;\r\n};\r\n\r\nBuffer.compare = function compare(buf1, buf2) {\r\n  if (!isUint8Array(buf1)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf1', ['Buffer', 'Uint8Array'], buf1);\r\n  }\r\n\r\n  if (!isUint8Array(buf2)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf2', ['Buffer', 'Uint8Array'], buf2);\r\n  }\r\n\r\n  if (buf1 === buf2) {\r\n    return 0;\r\n  }\r\n\r\n  return _compare(buf1, buf2);\r\n};\r\n\r\nBuffer.isEncoding = function isEncoding(encoding) {\r\n  return typeof encoding === 'string' && encoding.length !== 0 &&\r\n         normalizeEncoding(encoding) !== undefined;\r\n};\r\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\r\n\r\nBuffer.concat = function concat(list, length) {\r\n  validateArray(list, 'list');\r\n\r\n  if (list.length === 0)\r\n    return new FastBuffer();\r\n\r\n  if (length === undefined) {\r\n    length = 0;\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i].length) {\r\n        length += list[i].length;\r\n      }\r\n    }\r\n  } else {\r\n    validateOffset(length, 'length');\r\n  }\r\n\r\n  const buffer = Buffer.allocUnsafe(length);\r\n  let pos = 0;\r\n  for (let i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    if (!isUint8Array(buf)) {\r\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\r\n      // Instead, find the proper error code for this.\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        `list[${i}]`, ['Buffer', 'Uint8Array'], list[i]);\r\n    }\r\n    pos += _copyActual(buf, buffer, pos, 0, buf.length);\r\n  }\r\n\r\n  // Note: `length` is always equal to `buffer.length` at this point\r\n  if (pos < length) {\r\n    // Zero-fill the remaining bytes if the specified `length` was more than\r\n    // the actual total length, i.e. if we have some remaining allocated bytes\r\n    // there were not initialized.\r\n    TypedArrayPrototypeFill(buffer, 0, pos, length);\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nfunction base64ByteLength(str, bytes) {\r\n  // Handle padding\r\n  if (StringPrototypeCharCodeAt(str, bytes - 1) === 0x3D)\r\n    bytes--;\r\n  if (bytes > 1 && StringPrototypeCharCodeAt(str, bytes - 1) === 0x3D)\r\n    bytes--;\r\n\r\n  // Base64 ratio: 3/4\r\n  return (bytes * 3) >>> 2;\r\n}\r\n\r\nconst encodingOps = {\r\n  utf8: {\r\n    encoding: 'utf8',\r\n    encodingVal: encodingsMap.utf8,\r\n    byteLength: byteLengthUtf8,\r\n    write: (buf, string, offset, len) => buf.utf8Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.utf8Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf8, dir),\r\n  },\r\n  ucs2: {\r\n    encoding: 'ucs2',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir),\r\n  },\r\n  utf16le: {\r\n    encoding: 'utf16le',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir),\r\n  },\r\n  latin1: {\r\n    encoding: 'latin1',\r\n    encodingVal: encodingsMap.latin1,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.latin1Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.latin1Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.latin1, dir),\r\n  },\r\n  ascii: {\r\n    encoding: 'ascii',\r\n    encodingVal: encodingsMap.ascii,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.asciiWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.asciiSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.ascii),\r\n                    byteOffset,\r\n                    encodingsMap.ascii,\r\n                    dir),\r\n  },\r\n  base64: {\r\n    encoding: 'base64',\r\n    encodingVal: encodingsMap.base64,\r\n    byteLength: (string) => base64ByteLength(string, string.length),\r\n    write: (buf, string, offset, len) => buf.base64Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.base64Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.base64),\r\n                    byteOffset,\r\n                    encodingsMap.base64,\r\n                    dir),\r\n  },\r\n  base64url: {\r\n    encoding: 'base64url',\r\n    encodingVal: encodingsMap.base64url,\r\n    byteLength: (string) => base64ByteLength(string, string.length),\r\n    write: (buf, string, offset, len) =>\r\n      buf.base64urlWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.base64urlSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.base64url),\r\n                    byteOffset,\r\n                    encodingsMap.base64url,\r\n                    dir),\r\n  },\r\n  hex: {\r\n    encoding: 'hex',\r\n    encodingVal: encodingsMap.hex,\r\n    byteLength: (string) => string.length >>> 1,\r\n    write: (buf, string, offset, len) => buf.hexWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.hexSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.hex),\r\n                    byteOffset,\r\n                    encodingsMap.hex,\r\n                    dir),\r\n  },\r\n};\r\nfunction getEncodingOps(encoding) {\r\n  encoding += '';\r\n  switch (encoding.length) {\r\n    case 4:\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      break;\r\n    case 5:\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      break;\r\n    case 7:\r\n      if (encoding === 'utf16le' ||\r\n          StringPrototypeToLowerCase(encoding) === 'utf16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 8:\r\n      if (encoding === 'utf-16le' ||\r\n          StringPrototypeToLowerCase(encoding) === 'utf-16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 6:\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      encoding = StringPrototypeToLowerCase(encoding);\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      break;\r\n    case 3:\r\n      if (encoding === 'hex' || StringPrototypeToLowerCase(encoding) === 'hex')\r\n        return encodingOps.hex;\r\n      break;\r\n    case 9:\r\n      if (encoding === 'base64url' ||\r\n          StringPrototypeToLowerCase(encoding) === 'base64url')\r\n        return encodingOps.base64url;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction byteLength(string, encoding) {\r\n  if (typeof string !== 'string') {\r\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\r\n      return string.byteLength;\r\n    }\r\n\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'string', ['string', 'Buffer', 'ArrayBuffer'], string,\r\n    );\r\n  }\r\n\r\n  const len = string.length;\r\n  if (len === 0)\r\n    return 0;\r\n\r\n  if (encoding) {\r\n    const ops = getEncodingOps(encoding);\r\n    if (ops) {\r\n      return ops.byteLength(string);\r\n    }\r\n  }\r\n  return byteLengthUtf8(string);\r\n}\r\n\r\nBuffer.byteLength = byteLength;\r\n\r\n// For backwards compatibility.\r\nObjectDefineProperty(Buffer.prototype, 'parent', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.buffer;\r\n  },\r\n});\r\nObjectDefineProperty(Buffer.prototype, 'offset', {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.byteOffset;\r\n  },\r\n});\r\n\r\nBuffer.prototype.copy =\r\n  function copy(target, targetStart, sourceStart, sourceEnd) {\r\n    return _copy(this, target, targetStart, sourceStart, sourceEnd);\r\n  };\r\n\r\n// No need to verify that \"buf.length <= MAX_UINT32\" since it's a read-only\r\n// property of a typed array.\r\n// This behaves neither like String nor Uint8Array in that we set start/end\r\n// to their upper/lower bounds if the value passed is out of range.\r\nBuffer.prototype.toString = function toString(encoding, start, end) {\r\n  if (arguments.length === 0) {\r\n    return this.utf8Slice(0, this.length);\r\n  }\r\n\r\n  const len = this.length;\r\n\r\n  if (start <= 0)\r\n    start = 0;\r\n  else if (start >= len)\r\n    return '';\r\n  else\r\n    start |= 0;\r\n\r\n  if (end === undefined || end > len)\r\n    end = len;\r\n  else\r\n    end |= 0;\r\n\r\n  if (end <= start)\r\n    return '';\r\n\r\n  if (encoding === undefined)\r\n    return this.utf8Slice(start, end);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n\r\n  return ops.slice(this, start, end);\r\n};\r\n\r\nBuffer.prototype.equals = function equals(otherBuffer) {\r\n  if (!isUint8Array(otherBuffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'otherBuffer', ['Buffer', 'Uint8Array'], otherBuffer);\r\n  }\r\n\r\n  if (this === otherBuffer)\r\n    return true;\r\n  const len = TypedArrayPrototypeGetByteLength(this);\r\n  if (len !== TypedArrayPrototypeGetByteLength(otherBuffer))\r\n    return false;\r\n\r\n  return len === 0 || _compare(this, otherBuffer) === 0;\r\n};\r\n\r\nlet INSPECT_MAX_BYTES = 50;\r\n// Override how buffers are presented by util.inspect().\r\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes, ctx) {\r\n  const max = INSPECT_MAX_BYTES;\r\n  const actualMax = MathMin(max, this.length);\r\n  const remaining = this.length - max;\r\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\r\n    /(.{2})/g, this.hexSlice(0, actualMax), '$1 '));\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  // Inspect special properties as well, if possible.\r\n  if (ctx) {\r\n    let extras = false;\r\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n    const obj = { __proto__: null };\r\n    ArrayPrototypeForEach(getOwnNonIndexProperties(this, filter),\r\n                          (key) => {\r\n                            extras = true;\r\n                            obj[key] = this[key];\r\n                          });\r\n    if (extras) {\r\n      if (this.length !== 0)\r\n        str += ', ';\r\n      // '[Object: null prototype] {'.length === 26\r\n      // This is guarded with a test.\r\n      str += StringPrototypeSlice(utilInspect(obj, {\r\n        ...ctx,\r\n        breakLength: Infinity,\r\n        compact: true,\r\n      }), 27, -2);\r\n    }\r\n  }\r\n  return `<${this.constructor.name} ${str}>`;\r\n};\r\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\r\n\r\nBuffer.prototype.compare = function compare(target,\r\n                                            targetStart,\r\n                                            targetEnd,\r\n                                            sourceStart,\r\n                                            sourceEnd) {\r\n  if (!isUint8Array(target)) {\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n  }\r\n  if (arguments.length === 1)\r\n    return _compare(this, target);\r\n\r\n  if (targetStart === undefined)\r\n    targetStart = 0;\r\n  else\r\n    validateOffset(targetStart, 'targetStart');\r\n\r\n  if (targetEnd === undefined)\r\n    targetEnd = target.length;\r\n  else\r\n    validateOffset(targetEnd, 'targetEnd', 0, target.length);\r\n\r\n  if (sourceStart === undefined)\r\n    sourceStart = 0;\r\n  else\r\n    validateOffset(sourceStart, 'sourceStart');\r\n\r\n  if (sourceEnd === undefined)\r\n    sourceEnd = this.length;\r\n  else\r\n    validateOffset(sourceEnd, 'sourceEnd', 0, this.length);\r\n\r\n  if (sourceStart >= sourceEnd)\r\n    return (targetStart >= targetEnd ? 0 : -1);\r\n  if (targetStart >= targetEnd)\r\n    return 1;\r\n\r\n  return compareOffset(this, target, targetStart, sourceStart, targetEnd,\r\n                       sourceEnd);\r\n};\r\n\r\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n//\r\n// Arguments:\r\n// - buffer - a Buffer to search\r\n// - val - a string, Buffer, or number\r\n// - byteOffset - an index into `buffer`; will be clamped to an int32\r\n// - encoding - an optional encoding, relevant if val is a string\r\n// - dir - true for indexOf, false for lastIndexOf\r\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\r\n  validateBuffer(buffer);\r\n\r\n  if (typeof byteOffset === 'string') {\r\n    encoding = byteOffset;\r\n    byteOffset = undefined;\r\n  } else if (byteOffset > 0x7fffffff) {\r\n    byteOffset = 0x7fffffff;\r\n  } else if (byteOffset < -0x80000000) {\r\n    byteOffset = -0x80000000;\r\n  }\r\n  // Coerce to Number. Values like null and [] become 0.\r\n  byteOffset = +byteOffset;\r\n  // If the offset is undefined, \"foo\", {}, coerces to NaN, search whole buffer.\r\n  if (NumberIsNaN(byteOffset)) {\r\n    byteOffset = dir ? 0 : (buffer.length || buffer.byteLength);\r\n  }\r\n  dir = !!dir;  // Cast to bool.\r\n\r\n  if (typeof val === 'number')\r\n    return indexOfNumber(buffer, val >>> 0, byteOffset, dir);\r\n\r\n  let ops;\r\n  if (encoding === undefined)\r\n    ops = encodingOps.utf8;\r\n  else\r\n    ops = getEncodingOps(encoding);\r\n\r\n  if (typeof val === 'string') {\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    return ops.indexOf(buffer, val, byteOffset, dir);\r\n  }\r\n\r\n  if (isUint8Array(val)) {\r\n    const encodingVal =\r\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\r\n    return indexOfBuffer(buffer, val, byteOffset, encodingVal, dir);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'value', ['number', 'string', 'Buffer', 'Uint8Array'], val,\r\n  );\r\n}\r\n\r\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\r\n};\r\n\r\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\r\n};\r\n\r\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\r\n  return this.indexOf(val, byteOffset, encoding) !== -1;\r\n};\r\n\r\n// Usage:\r\n//    buffer.fill(number[, offset[, end]])\r\n//    buffer.fill(buffer[, offset[, end]])\r\n//    buffer.fill(string[, offset[, end]][, encoding])\r\nBuffer.prototype.fill = function fill(value, offset, end, encoding) {\r\n  return _fill(this, value, offset, end, encoding);\r\n};\r\n\r\nfunction _fill(buf, value, offset, end, encoding) {\r\n  if (typeof value === 'string') {\r\n    if (offset === undefined || typeof offset === 'string') {\r\n      encoding = offset;\r\n      offset = 0;\r\n      end = buf.length;\r\n    } else if (typeof end === 'string') {\r\n      encoding = end;\r\n      end = buf.length;\r\n    }\r\n\r\n    const normalizedEncoding = normalizeEncoding(encoding);\r\n    if (normalizedEncoding === undefined) {\r\n      validateString(encoding, 'encoding');\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    }\r\n\r\n    if (value.length === 0) {\r\n      // If value === '' default to zero.\r\n      value = 0;\r\n    } else if (value.length === 1) {\r\n      // Fast path: If `value` fits into a single byte, use that numeric value.\r\n      if (normalizedEncoding === 'utf8') {\r\n        const code = StringPrototypeCharCodeAt(value, 0);\r\n        if (code < 128) {\r\n          value = code;\r\n        }\r\n      } else if (normalizedEncoding === 'latin1') {\r\n        value = StringPrototypeCharCodeAt(value, 0);\r\n      }\r\n    }\r\n  } else {\r\n    encoding = undefined;\r\n  }\r\n\r\n  if (offset === undefined) {\r\n    offset = 0;\r\n    end = buf.length;\r\n  } else {\r\n    validateOffset(offset, 'offset');\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (end === undefined) {\r\n      end = buf.length;\r\n    } else {\r\n      validateOffset(end, 'end', 0, buf.length);\r\n    }\r\n    if (offset >= end)\r\n      return buf;\r\n  }\r\n\r\n\r\n  if (typeof value === 'number') {\r\n    // OOB check\r\n    const byteLen = TypedArrayPrototypeGetByteLength(buf);\r\n    const fillLength = end - offset;\r\n    if (offset > end || fillLength + offset > byteLen)\r\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n\r\n    TypedArrayPrototypeFill(buf, value, offset, end);\r\n  } else {\r\n    const res = bindingFill(buf, value, offset, end, encoding);\r\n    if (res < 0) {\r\n      if (res === -1)\r\n        throw new ERR_INVALID_ARG_VALUE('value', value);\r\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n    }\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\nBuffer.prototype.write = function write(string, offset, length, encoding) {\r\n  // Buffer#write(string);\r\n  if (offset === undefined) {\r\n    return this.utf8Write(string, 0, this.length);\r\n  }\r\n  // Buffer#write(string, encoding)\r\n  if (length === undefined && typeof offset === 'string') {\r\n    encoding = offset;\r\n    length = this.length;\r\n    offset = 0;\r\n\r\n  // Buffer#write(string, offset[, length][, encoding])\r\n  } else {\r\n    validateOffset(offset, 'offset', 0, this.length);\r\n\r\n    const remaining = this.length - offset;\r\n\r\n    if (length === undefined) {\r\n      length = remaining;\r\n    } else if (typeof length === 'string') {\r\n      encoding = length;\r\n      length = remaining;\r\n    } else {\r\n      validateOffset(length, 'length', 0, this.length);\r\n      if (length > remaining)\r\n        length = remaining;\r\n    }\r\n  }\r\n\r\n  if (!encoding)\r\n    return this.utf8Write(string, offset, length);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n  return ops.write(this, string, offset, length);\r\n};\r\n\r\nBuffer.prototype.toJSON = function toJSON() {\r\n  if (this.length > 0) {\r\n    const data = new Array(this.length);\r\n    for (let i = 0; i < this.length; ++i)\r\n      data[i] = this[i];\r\n    return { type: 'Buffer', data };\r\n  }\r\n  return { type: 'Buffer', data: [] };\r\n};\r\n\r\nfunction adjustOffset(offset, length) {\r\n  // Use Math.trunc() to convert offset to an integer value that can be larger\r\n  // than an Int32. Hence, don't use offset | 0 or similar techniques.\r\n  offset = MathTrunc(offset);\r\n  if (offset === 0) {\r\n    return 0;\r\n  }\r\n  if (offset < 0) {\r\n    offset += length;\r\n    return offset > 0 ? offset : 0;\r\n  }\r\n  if (offset < length) {\r\n    return offset;\r\n  }\r\n  return NumberIsNaN(offset) ? 0 : length;\r\n}\r\n\r\nBuffer.prototype.subarray = function subarray(start, end) {\r\n  const srcLength = this.length;\r\n  start = adjustOffset(start, srcLength);\r\n  end = end !== undefined ? adjustOffset(end, srcLength) : srcLength;\r\n  const newLength = end > start ? end - start : 0;\r\n  return new FastBuffer(this.buffer, this.byteOffset + start, newLength);\r\n};\r\n\r\nBuffer.prototype.slice = function slice(start, end) {\r\n  return this.subarray(start, end);\r\n};\r\n\r\nfunction swap(b, n, m) {\r\n  const i = b[n];\r\n  b[n] = b[m];\r\n  b[m] = i;\r\n}\r\n\r\nBuffer.prototype.swap16 = function swap16() {\r\n  // For Buffer.length < 128, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 2 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\r\n  if (len < 128) {\r\n    for (let i = 0; i < len; i += 2)\r\n      swap(this, i, i + 1);\r\n    return this;\r\n  }\r\n  return _swap16(this);\r\n};\r\n\r\nBuffer.prototype.swap32 = function swap32() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 4 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\r\n  if (len < 192) {\r\n    for (let i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3);\r\n      swap(this, i + 1, i + 2);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap32(this);\r\n};\r\n\r\nBuffer.prototype.swap64 = function swap64() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 8 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\r\n  if (len < 192) {\r\n    for (let i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7);\r\n      swap(this, i + 1, i + 6);\r\n      swap(this, i + 2, i + 5);\r\n      swap(this, i + 3, i + 4);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap64(this);\r\n};\r\n\r\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\r\n\r\nlet transcode;\r\nif (internalBinding('config').hasIntl) {\r\n  const {\r\n    icuErrName,\r\n    transcode: _transcode,\r\n  } = internalBinding('icu');\r\n\r\n  // Transcodes the Buffer from one encoding to another, returning a new\r\n  // Buffer instance.\r\n  transcode = function transcode(source, fromEncoding, toEncoding) {\r\n    if (!isUint8Array(source)) {\r\n      throw new ERR_INVALID_ARG_TYPE('source',\r\n                                     ['Buffer', 'Uint8Array'], source);\r\n    }\r\n    if (source.length === 0) return Buffer.alloc(0);\r\n\r\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\r\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\r\n    const result = _transcode(source, fromEncoding, toEncoding);\r\n    if (typeof result !== 'number')\r\n      return result;\r\n\r\n    const code = icuErrName(result);\r\n    const err = genericNodeError(\r\n      `Unable to transcode Buffer [${code}]`,\r\n      { code: code, errno: result },\r\n    );\r\n    throw err;\r\n  };\r\n}\r\n\r\nfunction btoa(input) {\r\n  // The implementation here has not been performance optimized in any way and\r\n  // should not be.\r\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\r\n  if (arguments.length === 0) {\r\n    throw new ERR_MISSING_ARGS('input');\r\n  }\r\n  const result = _btoa(`${input}`);\r\n  if (result === -1) {\r\n    throw lazyDOMException('Invalid character', 'InvalidCharacterError');\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction atob(input) {\r\n  if (arguments.length === 0) {\r\n    throw new ERR_MISSING_ARGS('input');\r\n  }\r\n\r\n  const result = _atob(`${input}`);\r\n\r\n  switch (result) {\r\n    case -2: // Invalid character\r\n      throw lazyDOMException('Invalid character', 'InvalidCharacterError');\r\n    case -1: // Single character remained\r\n      throw lazyDOMException(\r\n        'The string to be decoded is not correctly encoded.',\r\n        'InvalidCharacterError');\r\n    case -3: // Possible overflow\r\n      // TODO(@anonrig): Throw correct error in here.\r\n      throw lazyDOMException('The input causes overflow.', 'InvalidCharacterError');\r\n    default:\r\n      return result;\r\n  }\r\n}\r\n\r\nfunction isUtf8(input) {\r\n  if (isTypedArray(input) || isAnyArrayBuffer(input)) {\r\n    return bindingIsUtf8(input);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('input', ['ArrayBuffer', 'Buffer', 'TypedArray'], input);\r\n}\r\n\r\nfunction isAscii(input) {\r\n  if (isTypedArray(input) || isAnyArrayBuffer(input)) {\r\n    return bindingIsAscii(input);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('input', ['ArrayBuffer', 'Buffer', 'TypedArray'], input);\r\n}\r\n\r\nmodule.exports = {\r\n  Buffer,\r\n  SlowBuffer,\r\n  transcode,\r\n  isUtf8,\r\n  isAscii,\r\n\r\n  // Legacy\r\n  kMaxLength,\r\n  kStringMaxLength,\r\n  btoa,\r\n  atob,\r\n};\r\n\r\nObjectDefineProperties(module.exports, {\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n  INSPECT_MAX_BYTES: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() { return INSPECT_MAX_BYTES; },\r\n    set(val) {\r\n      validateNumber(val, 'INSPECT_MAX_BYTES', 0);\r\n      INSPECT_MAX_BYTES = val;\r\n    },\r\n  },\r\n});\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/blob',\r\n  ['Blob', 'resolveObjectURL'],\r\n);\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/file',\r\n  ['File'],\r\n);\r\n"
  },
  "24": {
    "metadata": {
      "scriptId": "24",
      "url": "node:internal/buffer",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1096,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "d333f0f01aa92d86ed8c0237f45918a3ac653455dc06fcc8a4961b4beccf52de",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 32358,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/buffer"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  BigInt,\r\n  Float32Array,\r\n  Float64Array,\r\n  MathFloor,\r\n  Number,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_BUFFER_OUT_OF_BOUNDS,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_OUT_OF_RANGE,\r\n} = require('internal/errors').codes;\r\nconst { validateNumber } = require('internal/validators');\r\nconst {\r\n  asciiSlice,\r\n  base64Slice,\r\n  base64urlSlice,\r\n  latin1Slice,\r\n  hexSlice,\r\n  ucs2Slice,\r\n  utf8Slice,\r\n  asciiWrite,\r\n  base64Write,\r\n  base64urlWrite,\r\n  latin1Write,\r\n  hexWrite,\r\n  ucs2Write,\r\n  utf8Write,\r\n  getZeroFillToggle,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  privateSymbols: {\r\n    untransferable_object_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\n// Temporary buffers to convert numbers.\r\nconst float32Array = new Float32Array(1);\r\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\r\nconst float64Array = new Float64Array(1);\r\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\r\n\r\n// Check endianness.\r\nfloat32Array[0] = -1; // 0xBF800000\r\n// Either it is [0, 0, 128, 191] or [191, 128, 0, 0]. It is not possible to\r\n// check this with `os.endianness()` because that is determined at compile time.\r\nconst bigEndian = uInt8Float32Array[3] === 0;\r\n\r\nfunction checkBounds(buf, offset, byteLength) {\r\n  validateNumber(offset, 'offset');\r\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\r\n    boundsError(offset, buf.length - (byteLength + 1));\r\n}\r\n\r\nfunction checkInt(value, min, max, buf, offset, byteLength) {\r\n  if (value > max || value < min) {\r\n    const n = typeof min === 'bigint' ? 'n' : '';\r\n    let range;\r\n    if (byteLength > 3) {\r\n      if (min === 0 || min === 0n) {\r\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\r\n      } else {\r\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and ` +\r\n                `< 2${n} ** ${(byteLength + 1) * 8 - 1}${n}`;\r\n      }\r\n    } else {\r\n      range = `>= ${min}${n} and <= ${max}${n}`;\r\n    }\r\n    throw new ERR_OUT_OF_RANGE('value', range, value);\r\n  }\r\n  checkBounds(buf, offset, byteLength);\r\n}\r\n\r\nfunction boundsError(value, length, type) {\r\n  if (MathFloor(value) !== value) {\r\n    validateNumber(value, type);\r\n    throw new ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);\r\n  }\r\n\r\n  if (length < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n\r\n  throw new ERR_OUT_OF_RANGE(type || 'offset',\r\n                             `>= ${type ? 1 : 0} and <= ${length}`,\r\n                             value);\r\n}\r\n\r\n// Read integers.\r\nfunction readBigUInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const lo = first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24;\r\n\r\n  const hi = this[++offset] +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n\r\n  return BigInt(lo) + (BigInt(hi) << 32n);\r\n}\r\n\r\nfunction readBigUInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const hi = first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n\r\n  const lo = this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n\r\n  return (BigInt(hi) << 32n) + BigInt(lo);\r\n}\r\n\r\nfunction readBigInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = this[offset + 4] +\r\n    this[offset + 5] * 2 ** 8 +\r\n    this[offset + 6] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24);\r\n}\r\n\r\nfunction readBigInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last);\r\n}\r\n\r\nfunction readUIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\r\n}\r\n\r\nfunction readUInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    last * 2 ** 32;\r\n}\r\n\r\nfunction readUInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n}\r\n\r\nfunction readUInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n}\r\n\r\nfunction readUInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first + last * 2 ** 8;\r\n}\r\n\r\nfunction readUInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val;\r\n}\r\n\r\nfunction readUIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n}\r\n\r\nfunction readUInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first * 2 ** 8 + last;\r\n}\r\n\r\nfunction readIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[offset + 4] + last * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n}\r\n\r\nfunction readInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first + last * 2 ** 8;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\nfunction readInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val | (val & 2 ** 7) * 0x1fffffe;\r\n}\r\n\r\nfunction readIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[++offset] + first * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first * 2 ** 8 + last;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\n// Read floats\r\nfunction readFloatBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[3] = first;\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[0] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readFloatForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[0] = first;\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[3] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readDoubleBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[7] = first;\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[0] = last;\r\n  return float64Array[0];\r\n}\r\n\r\nfunction readDoubleForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[0] = first;\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[7] = last;\r\n  return float64Array[0];\r\n}\r\n\r\n// Write integers.\r\nfunction writeBigU_Int64LE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  return offset;\r\n}\r\n\r\nfunction writeBigUInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigU_Int64BE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset + 7] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 6] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 5] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 4] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset + 3] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 2] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 1] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset] = hi;\r\n  return offset + 8;\r\n}\r\n\r\nfunction writeBigUInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeUIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, 0, 0xffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = MathFloor(value * 2 ** -32);\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = newVal;\r\n  buf[offset++] = (newVal >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int40LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  const newVal = value;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = MathFloor(newVal * 2 ** -32);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int32LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int16LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = value;\r\n  buf[offset++] = (value >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeU_Int8(buf, value, offset, min, max) {\r\n  value = +value;\r\n  // `checkInt()` can not be used here because it checks two entries.\r\n  validateNumber(offset, 'offset');\r\n  if (value > max || value < min) {\r\n    throw new ERR_OUT_OF_RANGE('value', `>= ${min} and <= ${max}`, value);\r\n  }\r\n  if (buf[offset] === undefined)\r\n    boundsError(offset, buf.length - 1);\r\n\r\n  buf[offset] = value;\r\n  return offset + 1;\r\n}\r\n\r\nfunction writeUInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, 0, 0xff);\r\n}\r\n\r\nfunction writeUIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, 0, 0xffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = MathFloor(value * 2 ** -32);\r\n  buf[offset++] = (newVal >>> 8);\r\n  buf[offset++] = newVal;\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int40BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  buf[offset++] = MathFloor(value * 2 ** -32);\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int32BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeUInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 3;\r\n}\r\n\r\nfunction writeU_Int16BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = (value >>> 8);\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\nfunction writeInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n}\r\n\r\nfunction writeIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\n// Write floats.\r\nfunction writeDoubleForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[0];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[7];\r\n  return offset;\r\n}\r\n\r\nfunction writeDoubleBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[7];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[0];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[0];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[3];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[3];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[0];\r\n  return offset;\r\n}\r\n\r\nclass FastBuffer extends Uint8Array {\r\n  // Using an explicit constructor here is necessary to avoid relying on\r\n  // `Array.prototype[Symbol.iterator]`, which can be mutated by users.\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(bufferOrLength, byteOffset, length) {\r\n    super(bufferOrLength, byteOffset, length);\r\n  }\r\n}\r\n\r\nfunction addBufferPrototypeMethods(proto) {\r\n  proto.readBigUInt64LE = readBigUInt64LE;\r\n  proto.readBigUInt64BE = readBigUInt64BE;\r\n  proto.readBigUint64LE = readBigUInt64LE;\r\n  proto.readBigUint64BE = readBigUInt64BE;\r\n  proto.readBigInt64LE = readBigInt64LE;\r\n  proto.readBigInt64BE = readBigInt64BE;\r\n  proto.writeBigUInt64LE = writeBigUInt64LE;\r\n  proto.writeBigUInt64BE = writeBigUInt64BE;\r\n  proto.writeBigUint64LE = writeBigUInt64LE;\r\n  proto.writeBigUint64BE = writeBigUInt64BE;\r\n  proto.writeBigInt64LE = writeBigInt64LE;\r\n  proto.writeBigInt64BE = writeBigInt64BE;\r\n\r\n  proto.readUIntLE = readUIntLE;\r\n  proto.readUInt32LE = readUInt32LE;\r\n  proto.readUInt16LE = readUInt16LE;\r\n  proto.readUInt8 = readUInt8;\r\n  proto.readUIntBE = readUIntBE;\r\n  proto.readUInt32BE = readUInt32BE;\r\n  proto.readUInt16BE = readUInt16BE;\r\n  proto.readUintLE = readUIntLE;\r\n  proto.readUint32LE = readUInt32LE;\r\n  proto.readUint16LE = readUInt16LE;\r\n  proto.readUint8 = readUInt8;\r\n  proto.readUintBE = readUIntBE;\r\n  proto.readUint32BE = readUInt32BE;\r\n  proto.readUint16BE = readUInt16BE;\r\n  proto.readIntLE = readIntLE;\r\n  proto.readInt32LE = readInt32LE;\r\n  proto.readInt16LE = readInt16LE;\r\n  proto.readInt8 = readInt8;\r\n  proto.readIntBE = readIntBE;\r\n  proto.readInt32BE = readInt32BE;\r\n  proto.readInt16BE = readInt16BE;\r\n\r\n  proto.writeUIntLE = writeUIntLE;\r\n  proto.writeUInt32LE = writeUInt32LE;\r\n  proto.writeUInt16LE = writeUInt16LE;\r\n  proto.writeUInt8 = writeUInt8;\r\n  proto.writeUIntBE = writeUIntBE;\r\n  proto.writeUInt32BE = writeUInt32BE;\r\n  proto.writeUInt16BE = writeUInt16BE;\r\n  proto.writeUintLE = writeUIntLE;\r\n  proto.writeUint32LE = writeUInt32LE;\r\n  proto.writeUint16LE = writeUInt16LE;\r\n  proto.writeUint8 = writeUInt8;\r\n  proto.writeUintBE = writeUIntBE;\r\n  proto.writeUint32BE = writeUInt32BE;\r\n  proto.writeUint16BE = writeUInt16BE;\r\n  proto.writeIntLE = writeIntLE;\r\n  proto.writeInt32LE = writeInt32LE;\r\n  proto.writeInt16LE = writeInt16LE;\r\n  proto.writeInt8 = writeInt8;\r\n  proto.writeIntBE = writeIntBE;\r\n  proto.writeInt32BE = writeInt32BE;\r\n  proto.writeInt16BE = writeInt16BE;\r\n\r\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\r\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\r\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\r\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\r\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\r\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\r\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\r\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\r\n\r\n  proto.asciiSlice = asciiSlice;\r\n  proto.base64Slice = base64Slice;\r\n  proto.base64urlSlice = base64urlSlice;\r\n  proto.latin1Slice = latin1Slice;\r\n  proto.hexSlice = hexSlice;\r\n  proto.ucs2Slice = ucs2Slice;\r\n  proto.utf8Slice = utf8Slice;\r\n  proto.asciiWrite = asciiWrite;\r\n  proto.base64Write = base64Write;\r\n  proto.base64urlWrite = base64urlWrite;\r\n  proto.latin1Write = latin1Write;\r\n  proto.hexWrite = hexWrite;\r\n  proto.ucs2Write = ucs2Write;\r\n  proto.utf8Write = utf8Write;\r\n}\r\n\r\n// This would better be placed in internal/worker/io.js, but that doesn't work\r\n// because Buffer needs this and that would introduce a cyclic dependency.\r\nfunction markAsUntransferable(obj) {\r\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\r\n    return;  // This object is a primitive and therefore already untransferable.\r\n  obj[untransferable_object_private_symbol] = true;\r\n}\r\n\r\n// This simply checks if the object is marked as untransferable and doesn't\r\n// check whether we are able to transfer it.\r\nfunction isMarkedAsUntransferable(obj) {\r\n  if (obj == null)\r\n    return false;\r\n  // Private symbols are not inherited.\r\n  return obj[untransferable_object_private_symbol] !== undefined;\r\n}\r\n\r\n// A toggle used to access the zero fill setting of the array buffer allocator\r\n// in C++.\r\n// |zeroFill| can be undefined when running inside an isolate where we\r\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\r\nlet zeroFill = getZeroFillToggle();\r\nfunction createUnsafeBuffer(size) {\r\n  zeroFill[0] = 0;\r\n  try {\r\n    return new FastBuffer(size);\r\n  } finally {\r\n    zeroFill[0] = 1;\r\n  }\r\n}\r\n\r\n// The connection between the JS land zero fill toggle and the\r\n// C++ one in the NodeArrayBufferAllocator gets lost if the toggle\r\n// is deserialized from the snapshot, because V8 owns the underlying\r\n// memory of this toggle. This resets the connection.\r\nfunction reconnectZeroFillToggle() {\r\n  zeroFill = getZeroFillToggle();\r\n}\r\n\r\nmodule.exports = {\r\n  FastBuffer,\r\n  addBufferPrototypeMethods,\r\n  markAsUntransferable,\r\n  isMarkedAsUntransferable,\r\n  createUnsafeBuffer,\r\n  readUInt16BE,\r\n  readUInt32BE,\r\n  reconnectZeroFillToggle,\r\n};\r\n"
  },
  "25": {
    "metadata": {
      "scriptId": "25",
      "url": "node:internal/worker/js_transferable",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 100,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "eb0fe8f9a5af0d000437a0d789138df06d9a9007d66ef1c67f222ad116755ff9",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3307,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/worker/js_transferable"
    },
    "source": "'use strict';\r\nconst {\r\n  Error,\r\n  StringPrototypeSplit,\r\n} = primordials;\r\nconst {\r\n  messaging_deserialize_symbol,\r\n  messaging_transfer_symbol,\r\n  messaging_clone_symbol,\r\n  messaging_transfer_list_symbol,\r\n} = internalBinding('symbols');\r\nconst {\r\n  setDeserializerCreateObjectFunction,\r\n} = internalBinding('messaging');\r\nconst {\r\n  privateSymbols: {\r\n    transfer_mode_private_symbol,\r\n  },\r\n  constants: {\r\n    kDisallowCloneAndTransfer,\r\n    kTransferable,\r\n    kCloneable,\r\n  },\r\n} = internalBinding('util');\r\n\r\nfunction setup() {\r\n  // Register the handler that will be used when deserializing JS-based objects\r\n  // from .postMessage() calls. The format of `deserializeInfo` is generally\r\n  // 'module:Constructor', e.g. 'internal/fs/promises:FileHandle'.\r\n  setDeserializerCreateObjectFunction((deserializeInfo) => {\r\n    const { 0: module, 1: ctor } = StringPrototypeSplit(deserializeInfo, ':');\r\n    const Ctor = require(module)[ctor];\r\n    if (typeof Ctor !== 'function' ||\r\n        typeof Ctor.prototype[messaging_deserialize_symbol] !== 'function') {\r\n      // Not one of the official errors because one should not be able to get\r\n      // here without messing with Node.js internals.\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      throw new Error(`Unknown deserialize spec ${deserializeInfo}`);\r\n    }\r\n\r\n    return new Ctor();\r\n  });\r\n}\r\n\r\n/**\r\n * Mark an object as being transferable or customized cloneable in\r\n * `.postMessage()`.\r\n * This should only applied to host objects like Web API interfaces, Node.js'\r\n * built-in objects.\r\n * Objects marked as cloneable and transferable should implement the method\r\n * `@@kClone` and `@@kTransfer` respectively. Method `@@kDeserialize` is\r\n * required to deserialize the data to a new instance.\r\n *\r\n * Example implementation of a cloneable interface (assuming its located in\r\n * `internal/my_interface.js`):\r\n *\r\n * ```\r\n * class MyInterface {\r\n *   constructor(...args) {\r\n *     markTransferMode(this, true);\r\n *     this.args = args;\r\n *   }\r\n *   [kDeserialize](data) {\r\n *     this.args = data.args;\r\n *   }\r\n *   [kClone]() {\r\n *     return {\r\n *        data: { args: this.args },\r\n *        deserializeInfo: 'internal/my_interface:MyInterface',\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * module.exports = {\r\n *   MyInterface,\r\n * };\r\n * ```\r\n * @param {object} obj Host objects that can be either cloned or transferred.\r\n * @param {boolean} [cloneable] if the object can be cloned and `@@kClone` is\r\n *                              implemented.\r\n * @param {boolean} [transferable] if the object can be transferred and\r\n *                                 `@@kTransfer` is implemented.\r\n */\r\nfunction markTransferMode(obj, cloneable = false, transferable = false) {\r\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\r\n    return;  // This object is a primitive and therefore already untransferable.\r\n  let mode = kDisallowCloneAndTransfer;\r\n  if (cloneable) mode |= kCloneable;\r\n  if (transferable) mode |= kTransferable;\r\n  obj[transfer_mode_private_symbol] = mode;\r\n}\r\n\r\nmodule.exports = {\r\n  markTransferMode,\r\n  setup,\r\n  kClone: messaging_clone_symbol,\r\n  kDeserialize: messaging_deserialize_symbol,\r\n  kTransfer: messaging_transfer_symbol,\r\n  kTransferList: messaging_transfer_list_symbol,\r\n};\r\n"
  },
  "26": {
    "metadata": {
      "scriptId": "26",
      "url": "node:internal/process/per_thread",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 433,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "54525b2c8187190bce5e6f013fd61ce0047cf41d19980babe7b2e9041bf9534a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13149,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/per_thread"
    },
    "source": "'use strict';\r\n\r\n// This files contains process bootstrappers that can be\r\n// run when setting up each thread, including the main\r\n// thread and the worker threads.\r\n\r\nconst {\r\n  ArrayPrototypeEvery,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSplice,\r\n  BigUint64Array,\r\n  Float64Array,\r\n  NumberMAX_SAFE_INTEGER,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ReflectApply,\r\n  RegExpPrototypeExec,\r\n  SafeArrayIterator,\r\n  Set,\r\n  SetPrototypeEntries,\r\n  SetPrototypeValues,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeReplace,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n  SymbolIterator,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  codes: {\r\n    ERR_ASSERTION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_SIGNAL,\r\n  },\r\n} = require('internal/errors');\r\nconst format = require('internal/util/inspect').format;\r\nconst {\r\n  validateArray,\r\n  validateNumber,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { getValidatedPath } = require('internal/fs/utils');\r\nconst { toNamespacedPath } = require('path');\r\nconst constants = internalBinding('constants').os.signals;\r\n\r\nconst kInternal = Symbol('internal properties');\r\n\r\nfunction assert(x, msg) {\r\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\r\n}\r\nconst { exitCodes: { kNoFailure } } = internalBinding('errors');\r\n\r\nconst binding = internalBinding('process_methods');\r\n\r\n// The 3 entries filled in by the original process.hrtime contains\r\n// the upper/lower 32 bits of the second part of the value,\r\n// and the remaining nanoseconds of the value.\r\nconst hrValues = binding.hrtimeBuffer;\r\n// Use a BigUint64Array because this is actually a bit\r\n// faster than simply returning a BigInt from C++ in V8 7.1.\r\nconst hrBigintValues = new BigUint64Array(binding.hrtimeBuffer.buffer, 0, 1);\r\n\r\nfunction hrtime(time) {\r\n  binding.hrtime();\r\n\r\n  if (time !== undefined) {\r\n    validateArray(time, 'time');\r\n    if (time.length !== 2) {\r\n      throw new ERR_OUT_OF_RANGE('time', 2, time.length);\r\n    }\r\n\r\n    const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\r\n    const nsec = hrValues[2] - time[1];\r\n    const needsBorrow = nsec < 0;\r\n    return [needsBorrow ? sec - 1 : sec, needsBorrow ? nsec + 1e9 : nsec];\r\n  }\r\n\r\n  return [\r\n    hrValues[0] * 0x100000000 + hrValues[1],\r\n    hrValues[2],\r\n  ];\r\n}\r\n\r\nfunction hrtimeBigInt() {\r\n  binding.hrtimeBigInt();\r\n  return hrBigintValues[0];\r\n}\r\n\r\nfunction nop() {}\r\n\r\n// The execution of this function itself should not cause any side effects.\r\nfunction wrapProcessMethods(binding) {\r\n  const {\r\n    cpuUsage: _cpuUsage,\r\n    memoryUsage: _memoryUsage,\r\n    rss,\r\n    resourceUsage: _resourceUsage,\r\n    loadEnvFile: _loadEnvFile,\r\n  } = binding;\r\n\r\n  function _rawDebug(...args) {\r\n    binding._rawDebug(ReflectApply(format, null, args));\r\n  }\r\n\r\n  // Create the argument array that will be passed to the native function.\r\n  const cpuValues = new Float64Array(2);\r\n\r\n  // Replace the native function with the JS version that calls the native\r\n  // function.\r\n  function cpuUsage(prevValue) {\r\n    // If a previous value was passed in, ensure it has the correct shape.\r\n    if (prevValue) {\r\n      if (!previousValueIsValid(prevValue.user)) {\r\n        validateObject(prevValue, 'prevValue');\r\n\r\n        validateNumber(prevValue.user, 'prevValue.user');\r\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.user',\r\n                                                   prevValue.user);\r\n      }\r\n\r\n      if (!previousValueIsValid(prevValue.system)) {\r\n        validateNumber(prevValue.system, 'prevValue.system');\r\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.system',\r\n                                                   prevValue.system);\r\n      }\r\n    }\r\n\r\n    // Call the native function to get the current values.\r\n    _cpuUsage(cpuValues);\r\n\r\n    // If a previous value was passed in, return diff of current from previous.\r\n    if (prevValue) {\r\n      return {\r\n        user: cpuValues[0] - prevValue.user,\r\n        system: cpuValues[1] - prevValue.system,\r\n      };\r\n    }\r\n\r\n    // If no previous value passed in, return current value.\r\n    return {\r\n      user: cpuValues[0],\r\n      system: cpuValues[1],\r\n    };\r\n  }\r\n\r\n  // Ensure that a previously passed in value is valid. Currently, the native\r\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\r\n  function previousValueIsValid(num) {\r\n    return typeof num === 'number' &&\r\n        num <= NumberMAX_SAFE_INTEGER &&\r\n        num >= 0;\r\n  }\r\n\r\n  const memValues = new Float64Array(5);\r\n  function memoryUsage() {\r\n    _memoryUsage(memValues);\r\n    return {\r\n      rss: memValues[0],\r\n      heapTotal: memValues[1],\r\n      heapUsed: memValues[2],\r\n      external: memValues[3],\r\n      arrayBuffers: memValues[4],\r\n    };\r\n  }\r\n\r\n  memoryUsage.rss = rss;\r\n\r\n  function exit(code) {\r\n    if (arguments.length !== 0) {\r\n      process.exitCode = code;\r\n    }\r\n\r\n    if (!process._exiting) {\r\n      process._exiting = true;\r\n      process.emit('exit', process.exitCode || kNoFailure);\r\n    }\r\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\r\n    // in the user land. Either document it, or deprecate it in favor of a\r\n    // better public alternative.\r\n    process.reallyExit(process.exitCode || kNoFailure);\r\n\r\n    // If this is a worker, v8::Isolate::TerminateExecution() is called above.\r\n    // That function spoofs the stack pointer to cause the stack guard\r\n    // check to throw the termination exception. Because v8 performs\r\n    // stack guard check upon every function call, we give it a chance.\r\n    //\r\n    // Without this, user code after `process.exit()` would take effect.\r\n    // test/parallel/test-worker-voluntarily-exit-followed-by-addition.js\r\n    // test/parallel/test-worker-voluntarily-exit-followed-by-throw.js\r\n    nop();\r\n  }\r\n\r\n  function kill(pid, sig) {\r\n    let err;\r\n\r\n    // eslint-disable-next-line eqeqeq\r\n    if (pid != (pid | 0)) {\r\n      throw new ERR_INVALID_ARG_TYPE('pid', 'number', pid);\r\n    }\r\n\r\n    // Preserve null signal\r\n    if (sig === (sig | 0)) {\r\n      // XXX(joyeecheung): we have to use process._kill here because\r\n      // it's monkey-patched by tests.\r\n      err = process._kill(pid, sig);\r\n    } else {\r\n      sig = sig || 'SIGTERM';\r\n      if (constants[sig]) {\r\n        err = process._kill(pid, constants[sig]);\r\n      } else {\r\n        throw new ERR_UNKNOWN_SIGNAL(sig);\r\n      }\r\n    }\r\n\r\n    if (err)\r\n      throw new ErrnoException(err, 'kill');\r\n\r\n    return true;\r\n  }\r\n\r\n  const resourceValues = new Float64Array(16);\r\n  function resourceUsage() {\r\n    _resourceUsage(resourceValues);\r\n    return {\r\n      userCPUTime: resourceValues[0],\r\n      systemCPUTime: resourceValues[1],\r\n      maxRSS: resourceValues[2],\r\n      sharedMemorySize: resourceValues[3],\r\n      unsharedDataSize: resourceValues[4],\r\n      unsharedStackSize: resourceValues[5],\r\n      minorPageFault: resourceValues[6],\r\n      majorPageFault: resourceValues[7],\r\n      swappedOut: resourceValues[8],\r\n      fsRead: resourceValues[9],\r\n      fsWrite: resourceValues[10],\r\n      ipcSent: resourceValues[11],\r\n      ipcReceived: resourceValues[12],\r\n      signalsCount: resourceValues[13],\r\n      voluntaryContextSwitches: resourceValues[14],\r\n      involuntaryContextSwitches: resourceValues[15],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loads the `.env` file to process.env.\r\n   * @param {string | URL | Buffer | undefined} path\r\n   */\r\n  function loadEnvFile(path = undefined) { // Provide optional value so that `loadEnvFile.length` returns 0\r\n    if (path != null) {\r\n      path = getValidatedPath(path);\r\n      _loadEnvFile(toNamespacedPath(path));\r\n    } else {\r\n      _loadEnvFile();\r\n    }\r\n  }\r\n\r\n\r\n  return {\r\n    _rawDebug,\r\n    cpuUsage,\r\n    resourceUsage,\r\n    memoryUsage,\r\n    kill,\r\n    exit,\r\n    loadEnvFile,\r\n  };\r\n}\r\n\r\nconst replaceUnderscoresRegex = /_/g;\r\nconst leadingDashesRegex = /^--?/;\r\nconst trailingValuesRegex = /=.*$/;\r\n\r\n// This builds the initial process.allowedNodeEnvironmentFlags\r\n// from data in the config binding.\r\nfunction buildAllowedFlags() {\r\n  const {\r\n    envSettings: { kAllowedInEnvvar },\r\n    types: { kBoolean },\r\n  } = internalBinding('options');\r\n  const { getCLIOptionsInfo } = require('internal/options');\r\n  const { options, aliases } = getCLIOptionsInfo();\r\n\r\n  const allowedNodeEnvironmentFlags = [];\r\n  for (const { 0: name, 1: info } of options) {\r\n    if (info.envVarSettings === kAllowedInEnvvar) {\r\n      ArrayPrototypePush(allowedNodeEnvironmentFlags, name);\r\n      if (info.type === kBoolean) {\r\n        const negatedName = `--no-${name.slice(2)}`;\r\n        ArrayPrototypePush(allowedNodeEnvironmentFlags, negatedName);\r\n      }\r\n    }\r\n  }\r\n\r\n  function isAccepted(to) {\r\n    if (!StringPrototypeStartsWith(to, '-') || to === '--') return true;\r\n    const recursiveExpansion = aliases.get(to);\r\n    if (recursiveExpansion) {\r\n      if (recursiveExpansion[0] === to)\r\n        ArrayPrototypeSplice(recursiveExpansion, 0, 1);\r\n      return ArrayPrototypeEvery(recursiveExpansion, isAccepted);\r\n    }\r\n    return options.get(to).envVarSettings === kAllowedInEnvvar;\r\n  }\r\n  for (const { 0: from, 1: expansion } of aliases) {\r\n    if (ArrayPrototypeEvery(expansion, isAccepted)) {\r\n      let canonical = from;\r\n      if (StringPrototypeEndsWith(canonical, '='))\r\n        canonical = StringPrototypeSlice(canonical, 0, canonical.length - 1);\r\n      if (StringPrototypeEndsWith(canonical, ' <arg>'))\r\n        canonical = StringPrototypeSlice(canonical, 0, canonical.length - 4);\r\n      ArrayPrototypePush(allowedNodeEnvironmentFlags, canonical);\r\n    }\r\n  }\r\n\r\n  const trimLeadingDashes =\r\n    (flag) => StringPrototypeReplace(flag, leadingDashesRegex, '');\r\n\r\n  // Save these for comparison against flags provided to\r\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\r\n  const nodeFlags = ArrayPrototypeMap(allowedNodeEnvironmentFlags,\r\n                                      trimLeadingDashes);\r\n\r\n  class NodeEnvironmentFlagsSet extends Set {\r\n    constructor(array) {\r\n      super();\r\n      this[kInternal] = { array };\r\n    }\r\n\r\n    add() {\r\n      // No-op, `Set` API compatible\r\n      return this;\r\n    }\r\n\r\n    delete() {\r\n      // No-op, `Set` API compatible\r\n      return false;\r\n    }\r\n\r\n    clear() {\r\n      // No-op, `Set` API compatible\r\n    }\r\n\r\n    has(key) {\r\n      // This will return `true` based on various possible\r\n      // permutations of a flag, including present/missing leading\r\n      // dash(es) and/or underscores-for-dashes.\r\n      // Strips any values after `=`, inclusive.\r\n      // TODO(addaleax): It might be more flexible to run the option parser\r\n      // on a dummy option set and see whether it rejects the argument or\r\n      // not.\r\n      if (typeof key === 'string') {\r\n        key = StringPrototypeReplace(key, replaceUnderscoresRegex, '-');\r\n        if (RegExpPrototypeExec(leadingDashesRegex, key) !== null) {\r\n          key = StringPrototypeReplace(key, trailingValuesRegex, '');\r\n          return ArrayPrototypeIncludes(this[kInternal].array, key);\r\n        }\r\n        return ArrayPrototypeIncludes(nodeFlags, key);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    entries() {\r\n      this[kInternal].set ??=\r\n        new Set(new SafeArrayIterator(this[kInternal].array));\r\n      return SetPrototypeEntries(this[kInternal].set);\r\n    }\r\n\r\n    forEach(callback, thisArg = undefined) {\r\n      ArrayPrototypeForEach(\r\n        this[kInternal].array,\r\n        (v) => ReflectApply(callback, thisArg, [v, v, this]),\r\n      );\r\n    }\r\n\r\n    get size() {\r\n      return this[kInternal].array.length;\r\n    }\r\n\r\n    values() {\r\n      this[kInternal].set ??=\r\n        new Set(new SafeArrayIterator(this[kInternal].array));\r\n      return SetPrototypeValues(this[kInternal].set);\r\n    }\r\n  }\r\n  const flagSetValues = NodeEnvironmentFlagsSet.prototype.values;\r\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype, SymbolIterator, {\r\n    __proto__: null,\r\n    value: flagSetValues,\r\n  });\r\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype, 'keys', {\r\n    __proto__: null,\r\n    value: flagSetValues,\r\n  });\r\n\r\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype.constructor);\r\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype);\r\n\r\n  return ObjectFreeze(new NodeEnvironmentFlagsSet(\r\n    allowedNodeEnvironmentFlags,\r\n  ));\r\n}\r\n\r\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\r\n// trace event category is enabled.\r\nlet traceEventsAsyncHook;\r\n// Dynamically enable/disable the traceEventsAsyncHook\r\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\r\n  if (asyncHooksEnabled) {\r\n    if (!traceEventsAsyncHook) {\r\n      traceEventsAsyncHook =\r\n        require('internal/trace_events_async_hooks').createHook();\r\n    }\r\n    traceEventsAsyncHook.enable();\r\n  } else if (traceEventsAsyncHook) {\r\n    traceEventsAsyncHook.disable();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  toggleTraceCategoryState,\r\n  assert,\r\n  buildAllowedFlags,\r\n  wrapProcessMethods,\r\n  hrtime,\r\n  hrtimeBigInt,\r\n};\r\n"
  },
  "27": {
    "metadata": {
      "scriptId": "27",
      "url": "node:internal/fs/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 991,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "699c9f4460af32ed854b88cdeee73575ffb37b86d48eccdb2df9f79bd90fb451",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 28342,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fs/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  BigInt,\r\n  Date,\r\n  DateNow,\r\n  DatePrototypeGetTime,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeCall,\r\n  MathMin,\r\n  MathRound,\r\n  Number,\r\n  NumberIsFinite,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectIs,\r\n  ObjectSetPrototypeOf,\r\n  ReflectApply,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIncludes,\r\n  Symbol,\r\n  TypedArrayPrototypeAt,\r\n  TypedArrayPrototypeIncludes,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  UVException,\r\n  codes: {\r\n    ERR_FS_EISDIR,\r\n    ERR_FS_INVALID_SYMLINK_TYPE,\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  hideStackFrames,\r\n} = require('internal/errors');\r\nconst {\r\n  isArrayBufferView,\r\n  isBigInt64Array,\r\n  isDate,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\nconst {\r\n  kEmptyObject,\r\n  once,\r\n  deprecate,\r\n} = require('internal/util');\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  validateAbortSignal,\r\n  validateBoolean,\r\n  validateFunction,\r\n  validateInt32,\r\n  validateInteger,\r\n  validateObject,\r\n  validateUint32,\r\n} = require('internal/validators');\r\nconst pathModule = require('path');\r\nconst kType = Symbol('type');\r\nconst kStats = Symbol('stats');\r\nconst assert = require('internal/assert');\r\n\r\nconst {\r\n  fs: {\r\n    F_OK = 0,\r\n    W_OK = 0,\r\n    R_OK = 0,\r\n    X_OK = 0,\r\n    COPYFILE_EXCL,\r\n    COPYFILE_FICLONE,\r\n    COPYFILE_FICLONE_FORCE,\r\n    O_APPEND,\r\n    O_CREAT,\r\n    O_EXCL,\r\n    O_RDONLY,\r\n    O_RDWR,\r\n    O_SYNC,\r\n    O_TRUNC,\r\n    O_WRONLY,\r\n    S_IFBLK,\r\n    S_IFCHR,\r\n    S_IFDIR,\r\n    S_IFIFO,\r\n    S_IFLNK,\r\n    S_IFMT,\r\n    S_IFREG,\r\n    S_IFSOCK,\r\n    UV_FS_SYMLINK_DIR,\r\n    UV_FS_SYMLINK_JUNCTION,\r\n    UV_DIRENT_UNKNOWN,\r\n    UV_DIRENT_FILE,\r\n    UV_DIRENT_DIR,\r\n    UV_DIRENT_LINK,\r\n    UV_DIRENT_FIFO,\r\n    UV_DIRENT_SOCKET,\r\n    UV_DIRENT_CHAR,\r\n    UV_DIRENT_BLOCK,\r\n  },\r\n  os: {\r\n    errno: {\r\n      EISDIR,\r\n    },\r\n  },\r\n} = internalBinding('constants');\r\n\r\n// The access modes can be any of F_OK, R_OK, W_OK or X_OK. Some might not be\r\n// available on specific systems. They can be used in combination as well\r\n// (F_OK | R_OK | W_OK | X_OK).\r\nconst kMinimumAccessMode = MathMin(F_OK, W_OK, R_OK, X_OK);\r\nconst kMaximumAccessMode = F_OK | W_OK | R_OK | X_OK;\r\n\r\nconst kDefaultCopyMode = 0;\r\n// The copy modes can be any of COPYFILE_EXCL, COPYFILE_FICLONE or\r\n// COPYFILE_FICLONE_FORCE. They can be used in combination as well\r\n// (COPYFILE_EXCL | COPYFILE_FICLONE | COPYFILE_FICLONE_FORCE).\r\nconst kMinimumCopyMode = MathMin(\r\n  kDefaultCopyMode,\r\n  COPYFILE_EXCL,\r\n  COPYFILE_FICLONE,\r\n  COPYFILE_FICLONE_FORCE,\r\n);\r\nconst kMaximumCopyMode = COPYFILE_EXCL |\r\n                         COPYFILE_FICLONE |\r\n                         COPYFILE_FICLONE_FORCE;\r\n\r\n// Most platforms don't allow reads or writes >= 2 GiB.\r\n// See https://github.com/libuv/libuv/pull/1501.\r\nconst kIoMaxLength = 2 ** 31 - 1;\r\n\r\n// Use 64kb in case the file type is not a regular file and thus do not know the\r\n// actual file size. Increasing the value further results in more frequent over\r\n// allocation for small files and consumes CPU time and memory that should be\r\n// used else wise.\r\n// Use up to 512kb per read otherwise to partition reading big files to prevent\r\n// blocking other threads in case the available threads are all in use.\r\nconst kReadFileUnknownBufferLength = 64 * 1024;\r\nconst kReadFileBufferLength = 512 * 1024;\r\n\r\nconst kWriteFileMaxChunkSize = 512 * 1024;\r\n\r\nconst kMaxUserId = 2 ** 32 - 1;\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nlet fs;\r\nfunction lazyLoadFs() {\r\n  if (!fs) {\r\n    fs = require('fs');\r\n  }\r\n  return fs;\r\n}\r\n\r\nfunction assertEncoding(encoding) {\r\n  if (encoding && !Buffer.isEncoding(encoding)) {\r\n    const reason = 'is invalid encoding';\r\n    throw new ERR_INVALID_ARG_VALUE(encoding, 'encoding', reason);\r\n  }\r\n}\r\n\r\nclass Dirent {\r\n  constructor(name, type, path) {\r\n    this.name = name;\r\n    this.parentPath = path;\r\n    this.path = path;\r\n    this[kType] = type;\r\n  }\r\n\r\n  isDirectory() {\r\n    return this[kType] === UV_DIRENT_DIR;\r\n  }\r\n\r\n  isFile() {\r\n    return this[kType] === UV_DIRENT_FILE;\r\n  }\r\n\r\n  isBlockDevice() {\r\n    return this[kType] === UV_DIRENT_BLOCK;\r\n  }\r\n\r\n  isCharacterDevice() {\r\n    return this[kType] === UV_DIRENT_CHAR;\r\n  }\r\n\r\n  isSymbolicLink() {\r\n    return this[kType] === UV_DIRENT_LINK;\r\n  }\r\n\r\n  isFIFO() {\r\n    return this[kType] === UV_DIRENT_FIFO;\r\n  }\r\n\r\n  isSocket() {\r\n    return this[kType] === UV_DIRENT_SOCKET;\r\n  }\r\n}\r\n\r\nclass DirentFromStats extends Dirent {\r\n  constructor(name, stats, path) {\r\n    super(name, null, path);\r\n    this[kStats] = stats;\r\n  }\r\n}\r\n\r\nfor (const name of ReflectOwnKeys(Dirent.prototype)) {\r\n  if (name === 'constructor') {\r\n    continue;\r\n  }\r\n  DirentFromStats.prototype[name] = function() {\r\n    return this[kStats][name]();\r\n  };\r\n}\r\n\r\nfunction copyObject(source) {\r\n  const target = {};\r\n  for (const key in source)\r\n    target[key] = source[key];\r\n  return target;\r\n}\r\n\r\nconst bufferSep = Buffer.from(pathModule.sep);\r\n\r\nfunction join(path, name) {\r\n  if ((typeof path === 'string' || isUint8Array(path)) &&\r\n      name === undefined) {\r\n    return path;\r\n  }\r\n\r\n  if (typeof path === 'string' && isUint8Array(name)) {\r\n    const pathBuffer = Buffer.from(pathModule.join(path, pathModule.sep));\r\n    return Buffer.concat([pathBuffer, name]);\r\n  }\r\n\r\n  if (typeof path === 'string' && typeof name === 'string') {\r\n    return pathModule.join(path, name);\r\n  }\r\n\r\n  if (isUint8Array(path) && isUint8Array(name)) {\r\n    return Buffer.concat([path, bufferSep, name]);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'path', ['string', 'Buffer'], path);\r\n}\r\n\r\nfunction getDirents(path, { 0: names, 1: types }, callback) {\r\n  let i;\r\n  if (typeof callback === 'function') {\r\n    const len = names.length;\r\n    let toFinish = 0;\r\n    callback = once(callback);\r\n    for (i = 0; i < len; i++) {\r\n      const type = types[i];\r\n      if (type === UV_DIRENT_UNKNOWN) {\r\n        const name = names[i];\r\n        const idx = i;\r\n        toFinish++;\r\n        let filepath;\r\n        try {\r\n          filepath = join(path, name);\r\n        } catch (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n        lazyLoadFs().lstat(filepath, (err, stats) => {\r\n          if (err) {\r\n            callback(err);\r\n            return;\r\n          }\r\n          names[idx] = new DirentFromStats(name, stats, path);\r\n          if (--toFinish === 0) {\r\n            callback(null, names);\r\n          }\r\n        });\r\n      } else {\r\n        names[i] = new Dirent(names[i], types[i], path);\r\n      }\r\n    }\r\n    if (toFinish === 0) {\r\n      callback(null, names);\r\n    }\r\n  } else {\r\n    const len = names.length;\r\n    for (i = 0; i < len; i++) {\r\n      names[i] = getDirent(path, names[i], types[i]);\r\n    }\r\n    return names;\r\n  }\r\n}\r\n\r\nfunction getDirent(path, name, type, callback) {\r\n  if (typeof callback === 'function') {\r\n    if (type === UV_DIRENT_UNKNOWN) {\r\n      let filepath;\r\n      try {\r\n        filepath = join(path, name);\r\n      } catch (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      lazyLoadFs().lstat(filepath, (err, stats) => {\r\n        if (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n        callback(null, new DirentFromStats(name, stats, filepath));\r\n      });\r\n    } else {\r\n      callback(null, new Dirent(name, type, path));\r\n    }\r\n  } else if (type === UV_DIRENT_UNKNOWN) {\r\n    const filepath = join(path, name);\r\n    const stats = lazyLoadFs().lstatSync(filepath);\r\n    return new DirentFromStats(name, stats, path);\r\n  } else {\r\n    return new Dirent(name, type, path);\r\n  }\r\n}\r\n\r\nfunction getOptions(options, defaultOptions = kEmptyObject) {\r\n  if (options == null || typeof options === 'function') {\r\n    return defaultOptions;\r\n  }\r\n\r\n  if (typeof options === 'string') {\r\n    defaultOptions = { ...defaultOptions };\r\n    defaultOptions.encoding = options;\r\n    options = defaultOptions;\r\n  } else if (typeof options !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('options', ['string', 'Object'], options);\r\n  }\r\n\r\n  if (options.encoding !== 'buffer')\r\n    assertEncoding(options.encoding);\r\n\r\n  if (options.signal !== undefined) {\r\n    validateAbortSignal(options.signal, 'options.signal');\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * @param {InternalFSBinding.FSSyncContext} ctx\r\n */\r\nfunction handleErrorFromBinding(ctx) {\r\n  if (ctx.errno !== undefined) {  // libuv error numbers\r\n    const err = new UVException(ctx);\r\n    ErrorCaptureStackTrace(err, handleErrorFromBinding);\r\n    throw err;\r\n  }\r\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\r\n    // TODO(joyeecheung): currently, ctx.error are encoding errors\r\n    // usually caused by memory problems. We need to figure out proper error\r\n    // code(s) for this.\r\n    ErrorCaptureStackTrace(ctx.error, handleErrorFromBinding);\r\n    throw ctx.error;\r\n  }\r\n}\r\n\r\nfunction preprocessSymlinkDestination(path, type, linkPath) {\r\n  if (!isWindows) {\r\n    // No preprocessing is needed on Unix.\r\n    return path;\r\n  }\r\n  path = '' + path;\r\n  if (type === 'junction') {\r\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\r\n    // A relative target is relative to the link's parent directory.\r\n    path = pathModule.resolve(linkPath, '..', path);\r\n    return pathModule.toNamespacedPath(path);\r\n  }\r\n  if (pathModule.isAbsolute(path)) {\r\n    // If the path is absolute, use the \\\\?\\-prefix to enable long filenames\r\n    return pathModule.toNamespacedPath(path);\r\n  }\r\n  // Windows symlinks don't tolerate forward slashes.\r\n  return RegExpPrototypeSymbolReplace(/\\//g, path, '\\\\');\r\n}\r\n\r\n// Constructor for file stats.\r\nfunction StatsBase(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                   ino, size, blocks) {\r\n  this.dev = dev;\r\n  this.mode = mode;\r\n  this.nlink = nlink;\r\n  this.uid = uid;\r\n  this.gid = gid;\r\n  this.rdev = rdev;\r\n  this.blksize = blksize;\r\n  this.ino = ino;\r\n  this.size = size;\r\n  this.blocks = blocks;\r\n}\r\n\r\nStatsBase.prototype.isDirectory = function() {\r\n  return this._checkModeProperty(S_IFDIR);\r\n};\r\n\r\nStatsBase.prototype.isFile = function() {\r\n  return this._checkModeProperty(S_IFREG);\r\n};\r\n\r\nStatsBase.prototype.isBlockDevice = function() {\r\n  return this._checkModeProperty(S_IFBLK);\r\n};\r\n\r\nStatsBase.prototype.isCharacterDevice = function() {\r\n  return this._checkModeProperty(S_IFCHR);\r\n};\r\n\r\nStatsBase.prototype.isSymbolicLink = function() {\r\n  return this._checkModeProperty(S_IFLNK);\r\n};\r\n\r\nStatsBase.prototype.isFIFO = function() {\r\n  return this._checkModeProperty(S_IFIFO);\r\n};\r\n\r\nStatsBase.prototype.isSocket = function() {\r\n  return this._checkModeProperty(S_IFSOCK);\r\n};\r\n\r\nconst kNsPerMsBigInt = 10n ** 6n;\r\nconst kNsPerSecBigInt = 10n ** 9n;\r\nconst kMsPerSec = 10 ** 3;\r\nconst kNsPerMs = 10 ** 6;\r\nfunction msFromTimeSpec(sec, nsec) {\r\n  return sec * kMsPerSec + nsec / kNsPerMs;\r\n}\r\n\r\nfunction nsFromTimeSpecBigInt(sec, nsec) {\r\n  return sec * kNsPerSecBigInt + nsec;\r\n}\r\n\r\n// The Date constructor performs Math.floor() on the absolute value\r\n// of the timestamp: https://tc39.es/ecma262/#sec-timeclip\r\n// Since there may be a precision loss when the timestamp is\r\n// converted to a floating point number, we manually round\r\n// the timestamp here before passing it to Date().\r\n// Refs: https://github.com/nodejs/node/pull/12607\r\n// Refs: https://github.com/nodejs/node/pull/43714\r\nfunction dateFromMs(ms) {\r\n  // Coercing to number, ms can be bigint\r\n  return new Date(MathRound(Number(ms)));\r\n}\r\n\r\nconst lazyDateFields = {\r\n  __proto__: null,\r\n  atime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.atime = dateFromMs(this.atimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'atime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  mtime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.mtime = dateFromMs(this.mtimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'mtime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  ctime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.ctime = dateFromMs(this.ctimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'ctime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n  birthtime: {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this.birthtime = dateFromMs(this.birthtimeMs);\r\n    },\r\n    set(value) {\r\n      ObjectDefineProperty(this, 'birthtime', { __proto__: null, value, writable: true });\r\n    },\r\n  },\r\n};\r\n\r\nfunction BigIntStats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                     ino, size, blocks,\r\n                     atimeNs, mtimeNs, ctimeNs, birthtimeNs) {\r\n  ReflectApply(StatsBase, this, [dev, mode, nlink, uid, gid, rdev, blksize,\r\n                                 ino, size, blocks]);\r\n\r\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\r\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\r\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\r\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\r\n  this.atimeNs = atimeNs;\r\n  this.mtimeNs = mtimeNs;\r\n  this.ctimeNs = ctimeNs;\r\n  this.birthtimeNs = birthtimeNs;\r\n}\r\n\r\nObjectSetPrototypeOf(BigIntStats.prototype, StatsBase.prototype);\r\nObjectSetPrototypeOf(BigIntStats, StatsBase);\r\nObjectDefineProperties(BigIntStats.prototype, lazyDateFields);\r\n\r\nBigIntStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\r\n};\r\n\r\nfunction Stats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n               ino, size, blocks,\r\n               atimeMs, mtimeMs, ctimeMs, birthtimeMs) {\r\n  FunctionPrototypeCall(StatsBase, this, dev, mode, nlink, uid, gid, rdev,\r\n                        blksize, ino, size, blocks);\r\n  this.atimeMs = atimeMs;\r\n  this.mtimeMs = mtimeMs;\r\n  this.ctimeMs = ctimeMs;\r\n  this.birthtimeMs = birthtimeMs;\r\n}\r\n\r\nObjectSetPrototypeOf(Stats.prototype, StatsBase.prototype);\r\nObjectSetPrototypeOf(Stats, StatsBase);\r\nObjectDefineProperties(Stats.prototype, lazyDateFields);\r\n\r\nStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & S_IFMT) === property;\r\n};\r\n\r\n/**\r\n * @param {Float64Array | BigInt64Array} stats\r\n * @param {number} offset\r\n * @returns {BigIntStats | Stats}\r\n */\r\nfunction getStatsFromBinding(stats, offset = 0) {\r\n  if (isBigInt64Array(stats)) {\r\n    return new BigIntStats(\r\n      stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n      stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n      stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n      stats[9 + offset],\r\n      nsFromTimeSpecBigInt(stats[10 + offset], stats[11 + offset]),\r\n      nsFromTimeSpecBigInt(stats[12 + offset], stats[13 + offset]),\r\n      nsFromTimeSpecBigInt(stats[14 + offset], stats[15 + offset]),\r\n      nsFromTimeSpecBigInt(stats[16 + offset], stats[17 + offset]),\r\n    );\r\n  }\r\n  return new Stats(\r\n    stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n    stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n    stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n    stats[9 + offset],\r\n    msFromTimeSpec(stats[10 + offset], stats[11 + offset]),\r\n    msFromTimeSpec(stats[12 + offset], stats[13 + offset]),\r\n    msFromTimeSpec(stats[14 + offset], stats[15 + offset]),\r\n    msFromTimeSpec(stats[16 + offset], stats[17 + offset]),\r\n  );\r\n}\r\n\r\nclass StatFs {\r\n  constructor(type, bsize, blocks, bfree, bavail, files, ffree) {\r\n    this.type = type;\r\n    this.bsize = bsize;\r\n    this.blocks = blocks;\r\n    this.bfree = bfree;\r\n    this.bavail = bavail;\r\n    this.files = files;\r\n    this.ffree = ffree;\r\n  }\r\n}\r\n\r\nfunction getStatFsFromBinding(stats) {\r\n  return new StatFs(\r\n    stats[0], stats[1], stats[2], stats[3], stats[4], stats[5], stats[6],\r\n  );\r\n}\r\n\r\nfunction stringToFlags(flags, name = 'flags') {\r\n  if (typeof flags === 'number') {\r\n    validateInt32(flags, name);\r\n    return flags;\r\n  }\r\n\r\n  if (flags == null) {\r\n    return O_RDONLY;\r\n  }\r\n\r\n  switch (flags) {\r\n    case 'r' : return O_RDONLY;\r\n    case 'rs' : // Fall through.\r\n    case 'sr' : return O_RDONLY | O_SYNC;\r\n    case 'r+' : return O_RDWR;\r\n    case 'rs+' : // Fall through.\r\n    case 'sr+' : return O_RDWR | O_SYNC;\r\n\r\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\r\n    case 'wx' : // Fall through.\r\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\r\n\r\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\r\n    case 'wx+': // Fall through.\r\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\r\n\r\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\r\n    case 'ax' : // Fall through.\r\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\r\n    case 'as' : // Fall through.\r\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\r\n\r\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\r\n    case 'ax+': // Fall through.\r\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\r\n    case 'as+': // Fall through.\r\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE('flags', flags);\r\n}\r\n\r\nconst stringToSymlinkType = hideStackFrames((type) => {\r\n  let flags = 0;\r\n  if (typeof type === 'string') {\r\n    switch (type) {\r\n      case 'dir':\r\n        flags |= UV_FS_SYMLINK_DIR;\r\n        break;\r\n      case 'junction':\r\n        flags |= UV_FS_SYMLINK_JUNCTION;\r\n        break;\r\n      case 'file':\r\n        break;\r\n      default:\r\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\r\n    }\r\n  }\r\n  return flags;\r\n});\r\n\r\n// converts Date or number to a fractional UNIX timestamp\r\nfunction toUnixTimestamp(time, name = 'time') {\r\n  // eslint-disable-next-line eqeqeq\r\n  if (typeof time === 'string' && +time == time) {\r\n    return +time;\r\n  }\r\n  if (NumberIsFinite(time)) {\r\n    if (time < 0) {\r\n      return DateNow() / 1000;\r\n    }\r\n    return time;\r\n  }\r\n  if (isDate(time)) {\r\n    // Convert to 123.456 UNIX timestamp\r\n    return DatePrototypeGetTime(time) / 1000;\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE(name, ['Date', 'Time in seconds'], time);\r\n}\r\n\r\nconst validateOffsetLengthRead = hideStackFrames(\r\n  (offset, length, bufferLength) => {\r\n    if (offset < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('offset', '>= 0', offset);\r\n    }\r\n    if (length < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', '>= 0', length);\r\n    }\r\n    if (offset + length > bufferLength) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length',\r\n                                                      `<= ${bufferLength - offset}`, length);\r\n    }\r\n  },\r\n);\r\n\r\nconst validateOffsetLengthWrite = hideStackFrames(\r\n  (offset, length, byteLength) => {\r\n    if (offset > byteLength) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('offset', `<= ${byteLength}`, offset);\r\n    }\r\n\r\n    if (length > byteLength - offset) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', `<= ${byteLength - offset}`, length);\r\n    }\r\n\r\n    if (length < 0) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError('length', '>= 0', length);\r\n    }\r\n\r\n    validateInt32.withoutStackTrace(length, 'length', 0);\r\n  },\r\n);\r\n\r\nconst validatePath = hideStackFrames((path, propName = 'path') => {\r\n  if (typeof path !== 'string' && !isUint8Array(path)) {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, ['string', 'Buffer', 'URL'], path);\r\n  }\r\n\r\n  const pathIsString = typeof path === 'string';\r\n  const pathIsUint8Array = isUint8Array(path);\r\n\r\n  // We can only perform meaningful checks on strings and Uint8Arrays.\r\n  if ((!pathIsString && !pathIsUint8Array) ||\r\n      (pathIsString && !StringPrototypeIncludes(path, '\\u0000')) ||\r\n      (pathIsUint8Array && !TypedArrayPrototypeIncludes(path, 0))) {\r\n    return;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE.HideStackFramesError(\r\n    propName,\r\n    path,\r\n    'must be a string, Uint8Array, or URL without null bytes',\r\n  );\r\n});\r\n\r\nconst getValidatedPath = hideStackFrames((fileURLOrPath, propName = 'path') => {\r\n  const path = toPathIfFileURL(fileURLOrPath);\r\n  validatePath(path, propName);\r\n  return path;\r\n});\r\n\r\nconst getValidatedFd = hideStackFrames((fd, propName = 'fd') => {\r\n  if (ObjectIs(fd, -0)) {\r\n    return 0;\r\n  }\r\n\r\n  validateInt32(fd, propName, 0);\r\n\r\n  return fd;\r\n});\r\n\r\nconst validateBufferArray = hideStackFrames((buffers, propName = 'buffers') => {\r\n  if (!ArrayIsArray(buffers))\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, 'ArrayBufferView[]', buffers);\r\n\r\n  for (let i = 0; i < buffers.length; i++) {\r\n    if (!isArrayBufferView(buffers[i]))\r\n      throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(propName, 'ArrayBufferView[]', buffers);\r\n  }\r\n\r\n  return buffers;\r\n});\r\n\r\nlet nonPortableTemplateWarn = true;\r\n\r\nfunction warnOnNonPortableTemplate(template) {\r\n  // Template strings passed to the mkdtemp() family of functions should not\r\n  // end with 'X' because they are handled inconsistently across platforms.\r\n  if (nonPortableTemplateWarn &&\r\n    ((typeof template === 'string' && StringPrototypeEndsWith(template, 'X')) ||\r\n    (typeof template !== 'string' && TypedArrayPrototypeAt(template, -1) === 0x58))) {\r\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\r\n                        'For details see: https://nodejs.org/api/fs.html');\r\n    nonPortableTemplateWarn = false;\r\n  }\r\n}\r\n\r\nconst defaultCpOptions = {\r\n  dereference: false,\r\n  errorOnExist: false,\r\n  filter: undefined,\r\n  force: true,\r\n  preserveTimestamps: false,\r\n  recursive: false,\r\n  verbatimSymlinks: false,\r\n};\r\n\r\nconst defaultRmOptions = {\r\n  recursive: false,\r\n  force: false,\r\n  retryDelay: 100,\r\n  maxRetries: 0,\r\n};\r\n\r\nconst defaultRmdirOptions = {\r\n  retryDelay: 100,\r\n  maxRetries: 0,\r\n  recursive: false,\r\n};\r\n\r\nconst validateCpOptions = hideStackFrames((options) => {\r\n  if (options === undefined)\r\n    return { ...defaultCpOptions };\r\n  validateObject(options, 'options');\r\n  options = { ...defaultCpOptions, ...options };\r\n  validateBoolean(options.dereference, 'options.dereference');\r\n  validateBoolean(options.errorOnExist, 'options.errorOnExist');\r\n  validateBoolean(options.force, 'options.force');\r\n  validateBoolean(options.preserveTimestamps, 'options.preserveTimestamps');\r\n  validateBoolean(options.recursive, 'options.recursive');\r\n  validateBoolean(options.verbatimSymlinks, 'options.verbatimSymlinks');\r\n  options.mode = getValidMode(options.mode, 'copyFile');\r\n  if (options.dereference === true && options.verbatimSymlinks === true) {\r\n    throw new ERR_INCOMPATIBLE_OPTION_PAIR.HideStackFramesError('dereference', 'verbatimSymlinks');\r\n  }\r\n  if (options.filter !== undefined) {\r\n    validateFunction(options.filter, 'options.filter');\r\n  }\r\n  return options;\r\n});\r\n\r\nconst validateRmOptions = hideStackFrames((path, options, expectDir, cb) => {\r\n  options = validateRmdirOptions(options, defaultRmOptions);\r\n  validateBoolean(options.force, 'options.force');\r\n\r\n  lazyLoadFs().lstat(path, (err, stats) => {\r\n    if (err) {\r\n      if (options.force && err.code === 'ENOENT') {\r\n        return cb(null, options);\r\n      }\r\n      return cb(err, options);\r\n    }\r\n\r\n    if (expectDir && !stats.isDirectory()) {\r\n      return cb(false);\r\n    }\r\n\r\n    if (stats.isDirectory() && !options.recursive) {\r\n      const err = new ERR_FS_EISDIR.HideStackFramesError({\r\n        code: 'EISDIR',\r\n        message: 'is a directory',\r\n        path,\r\n        syscall: 'rm',\r\n        errno: EISDIR,\r\n      });\r\n\r\n      return cb(err);\r\n    }\r\n    return cb(null, options);\r\n  });\r\n});\r\n\r\nconst validateRmOptionsSync = hideStackFrames((path, options, expectDir) => {\r\n  options = validateRmdirOptions.withoutStackTrace(options, defaultRmOptions);\r\n  validateBoolean.withoutStackTrace(options.force, 'options.force');\r\n\r\n  if (!options.force || expectDir || !options.recursive) {\r\n    const isDirectory = lazyLoadFs()\r\n      .lstatSync(path, { throwIfNoEntry: !options.force })?.isDirectory();\r\n\r\n    if (expectDir && !isDirectory) {\r\n      return false;\r\n    }\r\n\r\n    if (isDirectory && !options.recursive) {\r\n      throw new ERR_FS_EISDIR.HideStackFramesError({\r\n        code: 'EISDIR',\r\n        message: 'is a directory',\r\n        path,\r\n        syscall: 'rm',\r\n        errno: EISDIR,\r\n      });\r\n    }\r\n  }\r\n\r\n  return options;\r\n});\r\n\r\nlet recursiveRmdirWarned;\r\nfunction emitRecursiveRmdirWarning() {\r\n  if (recursiveRmdirWarned === undefined) {\r\n    // TODO(joyeecheung): use getOptionValue('--no-deprecation') instead.\r\n    recursiveRmdirWarned = process.noDeprecation;\r\n  }\r\n  if (!recursiveRmdirWarned) {\r\n    process.emitWarning(\r\n      'In future versions of Node.js, fs.rmdir(path, { recursive: true }) ' +\r\n      'will be removed. Use fs.rm(path, { recursive: true }) instead',\r\n      'DeprecationWarning',\r\n      'DEP0147',\r\n    );\r\n    recursiveRmdirWarned = true;\r\n  }\r\n}\r\n\r\nconst validateRmdirOptions = hideStackFrames(\r\n  (options, defaults = defaultRmdirOptions) => {\r\n    if (options === undefined)\r\n      return defaults;\r\n    validateObject.withoutStackTrace(options, 'options');\r\n\r\n    options = { ...defaults, ...options };\r\n\r\n    validateBoolean.withoutStackTrace(options.recursive, 'options.recursive');\r\n    validateInt32.withoutStackTrace(options.retryDelay, 'options.retryDelay', 0);\r\n    validateUint32.withoutStackTrace(options.maxRetries, 'options.maxRetries');\r\n\r\n    return options;\r\n  });\r\n\r\nconst getValidMode = hideStackFrames((mode, type) => {\r\n  let min = kMinimumAccessMode;\r\n  let max = kMaximumAccessMode;\r\n  let def = F_OK;\r\n  if (type === 'copyFile') {\r\n    min = kMinimumCopyMode;\r\n    max = kMaximumCopyMode;\r\n    def = mode || kDefaultCopyMode;\r\n  } else {\r\n    assert(type === 'access');\r\n  }\r\n  if (mode == null) {\r\n    return def;\r\n  }\r\n  validateInteger.withoutStackTrace(mode, 'mode', min, max);\r\n  return mode;\r\n});\r\n\r\nconst validateStringAfterArrayBufferView = hideStackFrames((buffer, name) => {\r\n  if (typeof buffer !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(\r\n      name,\r\n      ['string', 'Buffer', 'TypedArray', 'DataView'],\r\n      buffer,\r\n    );\r\n  }\r\n});\r\n\r\nconst validatePosition = hideStackFrames((position, name, length) => {\r\n  if (typeof position === 'number') {\r\n    validateInteger.withoutStackTrace(position, name, -1);\r\n  } else if (typeof position === 'bigint') {\r\n    const maxPosition = 2n ** 63n - 1n - BigInt(length);\r\n    if (!(position >= -1n && position <= maxPosition)) {\r\n      throw new ERR_OUT_OF_RANGE.HideStackFramesError(name,\r\n                                                      `>= -1 && <= ${maxPosition}`,\r\n                                                      position);\r\n    }\r\n  } else {\r\n    throw new ERR_INVALID_ARG_TYPE.HideStackFramesError(name, ['integer', 'bigint'], position);\r\n  }\r\n});\r\n\r\nmodule.exports = {\r\n  constants: {\r\n    kIoMaxLength,\r\n    kMaxUserId,\r\n    kReadFileBufferLength,\r\n    kReadFileUnknownBufferLength,\r\n    kWriteFileMaxChunkSize,\r\n  },\r\n  assertEncoding,\r\n  BigIntStats,  // for testing\r\n  copyObject,\r\n  Dirent,\r\n  DirentFromStats,\r\n  emitRecursiveRmdirWarning,\r\n  getDirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedFd,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  preprocessSymlinkDestination,\r\n  realpathCacheKey: Symbol('realpathCacheKey'),\r\n  getStatFsFromBinding,\r\n  getStatsFromBinding,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  Stats: deprecate(Stats, 'fs.Stats constructor is deprecated.', 'DEP0180'),\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateCpOptions,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validatePosition,\r\n  validateRmOptions,\r\n  validateRmOptionsSync,\r\n  validateRmdirOptions,\r\n  validateStringAfterArrayBufferView,\r\n  warnOnNonPortableTemplate,\r\n};\r\n"
  },
  "28": {
    "metadata": {
      "scriptId": "28",
      "url": "node:internal/url",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1615,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "bf47d639201b8b330fa80f622e54edbbe4d620eda65276ed755b37b2e8f2ee24",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 49671,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/url"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeReduce,\r\n  ArrayPrototypeSlice,\r\n  Boolean,\r\n  Int8Array,\r\n  IteratorPrototype,\r\n  Number,\r\n  ObjectDefineProperties,\r\n  ObjectSetPrototypeOf,\r\n  ReflectGetOwnPropertyDescriptor,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharAt,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n  StringPrototypeToWellFormed,\r\n  Symbol,\r\n  SymbolIterator,\r\n  SymbolToStringTag,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n} = require('internal/querystring');\r\n\r\nconst {\r\n  getConstructorOf,\r\n  removeColors,\r\n  kEnumerableProperty,\r\n  kEmptyObject,\r\n  SideEffectFreeRegExpPrototypeSymbolReplace,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  markTransferMode,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_ARG_NOT_ITERABLE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_FILE_URL_HOST,\r\n    ERR_INVALID_FILE_URL_PATH,\r\n    ERR_INVALID_THIS,\r\n    ERR_INVALID_TUPLE,\r\n    ERR_INVALID_URL,\r\n    ERR_INVALID_URL_SCHEME,\r\n    ERR_MISSING_ARGS,\r\n    ERR_NO_CRYPTO,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  CHAR_AMPERSAND,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_EQUAL,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_PERCENT,\r\n  CHAR_PLUS,\r\n} = require('internal/constants');\r\nconst path = require('path');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst querystring = require('querystring');\r\n\r\nconst { platform } = process;\r\nconst isWindows = platform === 'win32';\r\n\r\nconst bindingUrl = internalBinding('url');\r\n\r\nconst FORWARD_SLASH = /\\//g;\r\n\r\nconst contextForInspect = Symbol('context');\r\n\r\n// `unsafeProtocol`, `hostlessProtocol` and `slashedProtocol` is\r\n// deliberately moved to `internal/url` rather than `url`.\r\n// Workers does not bootstrap URL module. Therefore, `SafeSet`\r\n// is not initialized on bootstrap. This case breaks the\r\n// test-require-delete-array-iterator test.\r\n\r\n// Protocols that can allow \"unsafe\" and \"unwise\" chars.\r\nconst unsafeProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:',\r\n]);\r\n// Protocols that never have a hostname.\r\nconst hostlessProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:',\r\n]);\r\n// Protocols that always contain a // bit.\r\nconst slashedProtocol = new SafeSet([\r\n  'http',\r\n  'http:',\r\n  'https',\r\n  'https:',\r\n  'ftp',\r\n  'ftp:',\r\n  'gopher',\r\n  'gopher:',\r\n  'file',\r\n  'file:',\r\n  'ws',\r\n  'ws:',\r\n  'wss',\r\n  'wss:',\r\n]);\r\n\r\nconst updateActions = {\r\n  kProtocol: 0,\r\n  kHost: 1,\r\n  kHostname: 2,\r\n  kPort: 3,\r\n  kUsername: 4,\r\n  kPassword: 5,\r\n  kPathname: 6,\r\n  kSearch: 7,\r\n  kHash: 8,\r\n  kHref: 9,\r\n};\r\nlet blob;\r\nlet cryptoRandom;\r\n\r\nfunction lazyBlob() {\r\n  blob ??= require('internal/blob');\r\n  return blob;\r\n}\r\n\r\nfunction lazyCryptoRandom() {\r\n  try {\r\n    cryptoRandom ??= require('internal/crypto/random');\r\n  } catch {\r\n    // If Node.js built without crypto support, we'll fall\r\n    // through here and handle it later.\r\n  }\r\n  return cryptoRandom;\r\n}\r\n\r\n// This class provides the internal state of a URL object. An instance of this\r\n// class is stored in every URL object and is accessed internally by setters\r\n// and getters. It roughly corresponds to the concept of a URL record in the\r\n// URL Standard, with a few differences. It is also the object transported to\r\n// the C++ binding.\r\n// Refs: https://url.spec.whatwg.org/#concept-url\r\nclass URLContext {\r\n  // This is the maximum value uint32_t can get.\r\n  // Ada uses uint32_t(-1) for declaring omitted values.\r\n  static #omitted = 4294967295;\r\n\r\n  href = '';\r\n  protocol_end = 0;\r\n  username_end = 0;\r\n  host_start = 0;\r\n  host_end = 0;\r\n  pathname_start = 0;\r\n  search_start = 0;\r\n  hash_start = 0;\r\n  port = 0;\r\n  /**\r\n   * Refers to `ada::scheme::type`\r\n   *\r\n   * enum type : uint8_t {\r\n   *   HTTP = 0,\r\n   *   NOT_SPECIAL = 1,\r\n   *   HTTPS = 2,\r\n   *   WS = 3,\r\n   *   FTP = 4,\r\n   *   WSS = 5,\r\n   *   FILE = 6\r\n   * };\r\n   * @type {number}\r\n   */\r\n  scheme_type = 1;\r\n\r\n  get hasPort() {\r\n    return this.port !== URLContext.#omitted;\r\n  }\r\n\r\n  get hasSearch() {\r\n    return this.search_start !== URLContext.#omitted;\r\n  }\r\n\r\n  get hasHash() {\r\n    return this.hash_start !== URLContext.#omitted;\r\n  }\r\n}\r\n\r\nlet setURLSearchParamsModified;\r\nlet setURLSearchParamsContext;\r\nlet getURLSearchParamsList;\r\nlet setURLSearchParams;\r\n\r\nclass URLSearchParamsIterator {\r\n  #target;\r\n  #kind;\r\n  #index;\r\n\r\n  // https://heycam.github.io/webidl/#dfn-default-iterator-object\r\n  constructor(target, kind) {\r\n    this.#target = target;\r\n    this.#kind = kind;\r\n    this.#index = 0;\r\n  }\r\n\r\n  next() {\r\n    if (typeof this !== 'object' || this === null || !(#target in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n\r\n    const index = this.#index;\r\n    const values = getURLSearchParamsList(this.#target);\r\n    const len = values.length;\r\n    if (index >= len) {\r\n      return {\r\n        value: undefined,\r\n        done: true,\r\n      };\r\n    }\r\n\r\n    const name = values[index];\r\n    const value = values[index + 1];\r\n    this.#index = index + 2;\r\n\r\n    let result;\r\n    if (this.#kind === 'key') {\r\n      result = name;\r\n    } else if (this.#kind === 'value') {\r\n      result = value;\r\n    } else {\r\n      result = [name, value];\r\n    }\r\n\r\n    return {\r\n      value: result,\r\n      done: false,\r\n    };\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (!this || typeof this !== 'object' || !(#target in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const index = this.#index;\r\n    const values = getURLSearchParamsList(this.#target);\r\n    const output = ArrayPrototypeReduce(\r\n      ArrayPrototypeSlice(values, index),\r\n      (prev, cur, i) => {\r\n        const key = i % 2 === 0;\r\n        if (this.#kind === 'key' && key) {\r\n          ArrayPrototypePush(prev, cur);\r\n        } else if (this.#kind === 'value' && !key) {\r\n          ArrayPrototypePush(prev, cur);\r\n        } else if (this.#kind === 'key+value' && !key) {\r\n          ArrayPrototypePush(prev, [values[index + i - 1], cur]);\r\n        }\r\n        return prev;\r\n      },\r\n      [],\r\n    );\r\n    const breakLn = StringPrototypeIncludes(inspect(output, innerOpts), '\\n');\r\n    const outputStrs = ArrayPrototypeMap(output, (p) => inspect(p, innerOpts));\r\n    let outputStr;\r\n    if (breakLn) {\r\n      outputStr = `\\n  ${ArrayPrototypeJoin(outputStrs, ',\\n  ')}`;\r\n    } else {\r\n      outputStr = ` ${ArrayPrototypeJoin(outputStrs, ', ')}`;\r\n    }\r\n    return `${this[SymbolToStringTag]} {${outputStr} }`;\r\n  }\r\n}\r\n\r\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\r\ndelete URLSearchParamsIterator.prototype.constructor;\r\nObjectSetPrototypeOf(URLSearchParamsIterator.prototype, IteratorPrototype);\r\n\r\nObjectDefineProperties(URLSearchParamsIterator.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URLSearchParams Iterator' },\r\n  next: kEnumerableProperty,\r\n});\r\n\r\n\r\nclass URLSearchParams {\r\n  #searchParams = [];\r\n\r\n  // \"associated url object\"\r\n  #context;\r\n\r\n  static {\r\n    setURLSearchParamsContext = (obj, ctx) => {\r\n      obj.#context = ctx;\r\n    };\r\n    getURLSearchParamsList = (obj) => obj.#searchParams;\r\n    setURLSearchParams = (obj, query) => {\r\n      if (query === undefined) {\r\n        obj.#searchParams = [];\r\n      } else {\r\n        obj.#searchParams = parseParams(query);\r\n      }\r\n    };\r\n  }\r\n\r\n  // URL Standard says the default value is '', but as undefined and '' have\r\n  // the same result, undefined is used to prevent unnecessary parsing.\r\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\r\n  // accordance with Web IDL spec.\r\n  constructor(init = undefined) {\r\n    markTransferMode(this, false, false);\r\n\r\n    if (init == null) {\r\n      // Do nothing\r\n    } else if (typeof init === 'object' || typeof init === 'function') {\r\n      const method = init[SymbolIterator];\r\n      if (method === this[SymbolIterator] && #searchParams in init) {\r\n        // While the spec does not have this branch, we can use it as a\r\n        // shortcut to avoid having to go through the costly generic iterator.\r\n        const childParams = init.#searchParams;\r\n        this.#searchParams = childParams.slice();\r\n      } else if (method != null) {\r\n        // Sequence<sequence<USVString>>\r\n        if (typeof method !== 'function') {\r\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\r\n        }\r\n\r\n        // The following implementationd differs from the URL specification:\r\n        // Sequences must first be converted from ECMAScript objects before\r\n        // and operations are done on them, and the operation of converting\r\n        // the sequences would first exhaust the iterators. If the iterator\r\n        // returns something invalid in the middle, whether it would be called\r\n        // after that would be an observable change to the users.\r\n        // Exhausting the iterator and later converting them to USVString comes\r\n        // with a significant cost (~40-80%). In order optimize URLSearchParams\r\n        // creation duration, Node.js merges the iteration and converting\r\n        // iterations into a single iteration.\r\n        for (const pair of init) {\r\n          if (pair == null) {\r\n            throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n          } else if (ArrayIsArray(pair)) {\r\n            // If innerSequence's size is not 2, then throw a TypeError.\r\n            if (pair.length !== 2) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n            // Append (innerSequence[0], innerSequence[1]) to querys list.\r\n            ArrayPrototypePush(\r\n              this.#searchParams,\r\n              StringPrototypeToWellFormed(`${pair[0]}`),\r\n              StringPrototypeToWellFormed(`${pair[1]}`),\r\n            );\r\n          } else {\r\n            if (((typeof pair !== 'object' && typeof pair !== 'function') ||\r\n                typeof pair[SymbolIterator] !== 'function')) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n\r\n            let length = 0;\r\n\r\n            for (const element of pair) {\r\n              length++;\r\n              ArrayPrototypePush(this.#searchParams, StringPrototypeToWellFormed(`${element}`));\r\n            }\r\n\r\n            // If innerSequence's size is not 2, then throw a TypeError.\r\n            if (length !== 2) {\r\n              throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Record<USVString, USVString>\r\n        // Need to use reflection APIs for full spec compliance.\r\n        const visited = new SafeMap();\r\n        const keys = ReflectOwnKeys(init);\r\n        for (let i = 0; i < keys.length; i++) {\r\n          const key = keys[i];\r\n          const desc = ReflectGetOwnPropertyDescriptor(init, key);\r\n          if (desc !== undefined && desc.enumerable) {\r\n            const typedKey = StringPrototypeToWellFormed(key);\r\n            const typedValue = StringPrototypeToWellFormed(`${init[key]}`);\r\n\r\n            // Two different keys may become the same USVString after normalization.\r\n            // In that case, we retain the later one. Refer to WPT.\r\n            const keyIdx = visited.get(typedKey);\r\n            if (keyIdx !== undefined) {\r\n              this.#searchParams[keyIdx] = typedValue;\r\n            } else {\r\n              visited.set(typedKey, ArrayPrototypePush(this.#searchParams,\r\n                                                       typedKey,\r\n                                                       typedValue) - 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // https://url.spec.whatwg.org/#dom-urlsearchparams-urlsearchparams\r\n      init = StringPrototypeToWellFormed(`${init}`);\r\n      this.#searchParams = init ? parseParams(init) : [];\r\n    }\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const separator = ', ';\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const innerInspect = (v) => inspect(v, innerOpts);\r\n\r\n    const list = this.#searchParams;\r\n    const output = [];\r\n    for (let i = 0; i < list.length; i += 2)\r\n      ArrayPrototypePush(\r\n        output,\r\n        `${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\r\n\r\n    const length = ArrayPrototypeReduce(\r\n      output,\r\n      (prev, cur) => prev + removeColors(cur).length + separator.length,\r\n      -separator.length,\r\n    );\r\n    if (length > ctx.breakLength) {\r\n      return `${this.constructor.name} {\\n` +\r\n      `  ${ArrayPrototypeJoin(output, ',\\n  ')} }`;\r\n    } else if (output.length) {\r\n      return `${this.constructor.name} { ` +\r\n      `${ArrayPrototypeJoin(output, separator)} }`;\r\n    }\r\n    return `${this.constructor.name} {}`;\r\n  }\r\n\r\n  get size() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    return this.#searchParams.length / 2;\r\n  }\r\n\r\n  append(name, value) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    value = StringPrototypeToWellFormed(`${value}`);\r\n    ArrayPrototypePush(this.#searchParams, name, value);\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  delete(name, value = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n\r\n    if (value !== undefined) {\r\n      value = StringPrototypeToWellFormed(`${value}`);\r\n      for (let i = 0; i < list.length;) {\r\n        if (list[i] === name && list[i + 1] === value) {\r\n          list.splice(i, 2);\r\n        } else {\r\n          i += 2;\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < list.length;) {\r\n        if (list[i] === name) {\r\n          list.splice(i, 2);\r\n        } else {\r\n          i += 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  get(name) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        return list[i + 1];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getAll(name) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    const values = [];\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        values.push(list[i + 1]);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  has(name, value = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n\r\n    if (value !== undefined) {\r\n      value = StringPrototypeToWellFormed(`${value}`);\r\n    }\r\n\r\n    for (let i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        if (value === undefined || list[i + 1] === value) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  set(name, value) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    const list = this.#searchParams;\r\n    name = StringPrototypeToWellFormed(`${name}`);\r\n    value = StringPrototypeToWellFormed(`${value}`);\r\n\r\n    // If there are any name-value pairs whose name is `name`, in `list`, set\r\n    // the value of the first such name-value pair to `value` and remove the\r\n    // others.\r\n    let found = false;\r\n    for (let i = 0; i < list.length;) {\r\n      const cur = list[i];\r\n      if (cur === name) {\r\n        if (!found) {\r\n          list[i + 1] = value;\r\n          found = true;\r\n          i += 2;\r\n        } else {\r\n          list.splice(i, 2);\r\n        }\r\n      } else {\r\n        i += 2;\r\n      }\r\n    }\r\n\r\n    // Otherwise, append a new name-value pair whose name is `name` and value\r\n    // is `value`, to `list`.\r\n    if (!found) {\r\n      ArrayPrototypePush(list, name, value);\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  sort() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    const a = this.#searchParams;\r\n    const len = a.length;\r\n\r\n    if (len <= 2) {\r\n      // Nothing needs to be done.\r\n    } else if (len < 100) {\r\n      // 100 is found through testing.\r\n      // Simple stable in-place insertion sort\r\n      // Derived from v8/src/js/array.js\r\n      for (let i = 2; i < len; i += 2) {\r\n        const curKey = a[i];\r\n        const curVal = a[i + 1];\r\n        let j;\r\n        for (j = i - 2; j >= 0; j -= 2) {\r\n          if (a[j] > curKey) {\r\n            a[j + 2] = a[j];\r\n            a[j + 3] = a[j + 1];\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        a[j + 2] = curKey;\r\n        a[j + 3] = curVal;\r\n      }\r\n    } else {\r\n      // Bottom-up iterative stable merge sort\r\n      const lBuffer = new Array(len);\r\n      const rBuffer = new Array(len);\r\n      for (let step = 2; step < len; step *= 2) {\r\n        for (let start = 0; start < len - 2; start += 2 * step) {\r\n          const mid = start + step;\r\n          let end = mid + step;\r\n          end = end < len ? end : len;\r\n          if (mid > end)\r\n            continue;\r\n          merge(a, start, mid, end, lBuffer, rBuffer);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.#context) {\r\n      setURLSearchParamsModified(this.#context);\r\n    }\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-iterators\r\n  // Define entries here rather than [Symbol.iterator] as the function name\r\n  // must be set to `entries`.\r\n  entries() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'key+value');\r\n  }\r\n\r\n  forEach(callback, thisArg = undefined) {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    validateFunction(callback, 'callback');\r\n\r\n    let list = this.#searchParams;\r\n\r\n    let i = 0;\r\n    while (i < list.length) {\r\n      const key = list[i];\r\n      const value = list[i + 1];\r\n      callback.call(thisArg, value, key, this);\r\n      // In case the URL object's `search` is updated\r\n      list = this.#searchParams;\r\n      i += 2;\r\n    }\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-iterable\r\n  keys() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'key');\r\n  }\r\n\r\n  values() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return new URLSearchParamsIterator(this, 'value');\r\n  }\r\n\r\n  // https://heycam.github.io/webidl/#es-stringifier\r\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\r\n  toString() {\r\n    if (typeof this !== 'object' || this === null || !(#searchParams in this))\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n\r\n    return serializeParams(this.#searchParams);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(URLSearchParams.prototype, {\r\n  append: kEnumerableProperty,\r\n  delete: kEnumerableProperty,\r\n  get: kEnumerableProperty,\r\n  getAll: kEnumerableProperty,\r\n  has: kEnumerableProperty,\r\n  set: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  sort: kEnumerableProperty,\r\n  entries: kEnumerableProperty,\r\n  forEach: kEnumerableProperty,\r\n  keys: kEnumerableProperty,\r\n  values: kEnumerableProperty,\r\n  toString: kEnumerableProperty,\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URLSearchParams' },\r\n\r\n  // https://heycam.github.io/webidl/#es-iterable-entries\r\n  [SymbolIterator]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    value: URLSearchParams.prototype.entries,\r\n  },\r\n});\r\n\r\n/**\r\n * Checks if a value has the shape of a WHATWG URL object.\r\n *\r\n * Using a symbol or instanceof would not be able to recognize URL objects\r\n * coming from other implementations (e.g. in Electron), so instead we are\r\n * checking some well known properties for a lack of a better test.\r\n *\r\n * We use `href` and `protocol` as they are the only properties that are\r\n * easy to retrieve and calculate due to the lazy nature of the getters.\r\n *\r\n * We check for `auth` and `path` attribute to distinguish legacy url instance with\r\n * WHATWG URL instance.\r\n * @param {*} self\r\n * @returns {self is URL}\r\n */\r\nfunction isURL(self) {\r\n  return Boolean(self?.href && self.protocol && self.auth === undefined && self.path === undefined);\r\n}\r\n\r\n/**\r\n * A unique symbol used as a private identifier to safely invoke the URL constructor\r\n * with a special parsing behavior. When passed as the third argument to the URL\r\n * constructor, it signals that the constructor should not throw an exception\r\n * for invalid URL inputs.\r\n */\r\nconst kParseURLSymbol = Symbol('kParseURL');\r\n\r\nclass URL {\r\n  #context = new URLContext();\r\n  #searchParams;\r\n  #searchParamsModified;\r\n\r\n  static {\r\n    setURLSearchParamsModified = (obj) => {\r\n      // When URLSearchParams changes, we lazily update URL on the next read/write for performance.\r\n      obj.#searchParamsModified = true;\r\n\r\n      // If URL has an existing search, remove it without cascading back to URLSearchParams.\r\n      // Do this to avoid any internal confusion about whether URLSearchParams or URL is up-to-date.\r\n      if (obj.#context.hasSearch) {\r\n        obj.#updateContext(bindingUrl.update(obj.#context.href, updateActions.kSearch, ''));\r\n      }\r\n    };\r\n  }\r\n\r\n  constructor(input, base = undefined, parseSymbol = undefined) {\r\n    markTransferMode(this, false, false);\r\n\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    // StringPrototypeToWellFormed is not needed.\r\n    input = `${input}`;\r\n\r\n    if (base !== undefined) {\r\n      base = `${base}`;\r\n    }\r\n\r\n    const raiseException = parseSymbol !== kParseURLSymbol;\r\n    const href = bindingUrl.parse(input, base, raiseException);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  static parse(input, base = undefined) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n    const parsedURLObject = new URL(input, base, kParseURLSymbol);\r\n    return parsedURLObject.href ? parsedURLObject : null;\r\n  }\r\n\r\n  [inspect.custom](depth, opts) {\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const constructor = getConstructorOf(this) || URL;\r\n    const obj = { __proto__: { constructor } };\r\n\r\n    obj.href = this.href;\r\n    obj.origin = this.origin;\r\n    obj.protocol = this.protocol;\r\n    obj.username = this.username;\r\n    obj.password = this.password;\r\n    obj.host = this.host;\r\n    obj.hostname = this.hostname;\r\n    obj.port = this.port;\r\n    obj.pathname = this.pathname;\r\n    obj.search = this.search;\r\n    obj.searchParams = this.searchParams;\r\n    obj.hash = this.hash;\r\n\r\n    if (opts.showHidden) {\r\n      obj[contextForInspect] = this.#context;\r\n    }\r\n\r\n    return `${constructor.name} ${inspect(obj, opts)}`;\r\n  }\r\n\r\n  #getSearchFromContext() {\r\n    if (!this.#context.hasSearch) return '';\r\n    let endsAt = this.#context.href.length;\r\n    if (this.#context.hasHash) endsAt = this.#context.hash_start;\r\n    if (endsAt - this.#context.search_start <= 1) return '';\r\n    return StringPrototypeSlice(this.#context.href, this.#context.search_start, endsAt);\r\n  }\r\n\r\n  #getSearchFromParams() {\r\n    if (!this.#searchParams?.size) return '';\r\n    return `?${this.#searchParams}`;\r\n  }\r\n\r\n  #ensureSearchParamsUpdated() {\r\n    // URL is updated lazily to greatly improve performance when URLSearchParams is updated repeatedly.\r\n    // If URLSearchParams has been modified, reflect that back into URL, without cascading back.\r\n    if (this.#searchParamsModified) {\r\n      this.#searchParamsModified = false;\r\n      this.#updateContext(bindingUrl.update(this.#context.href, updateActions.kSearch, this.#getSearchFromParams()));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the internal context state for URL.\r\n   * @param {string} href New href string from `bindingUrl.update`.\r\n   * @param {boolean} [shouldUpdateSearchParams] If the update has potential to update search params (href/search).\r\n   */\r\n  #updateContext(href, shouldUpdateSearchParams = false) {\r\n    const previousSearch = shouldUpdateSearchParams && this.#searchParams &&\r\n      (this.#searchParamsModified ? this.#getSearchFromParams() : this.#getSearchFromContext());\r\n\r\n    this.#context.href = href;\r\n\r\n    const {\r\n      0: protocol_end,\r\n      1: username_end,\r\n      2: host_start,\r\n      3: host_end,\r\n      4: port,\r\n      5: pathname_start,\r\n      6: search_start,\r\n      7: hash_start,\r\n      8: scheme_type,\r\n    } = bindingUrl.urlComponents;\r\n\r\n    this.#context.protocol_end = protocol_end;\r\n    this.#context.username_end = username_end;\r\n    this.#context.host_start = host_start;\r\n    this.#context.host_end = host_end;\r\n    this.#context.port = port;\r\n    this.#context.pathname_start = pathname_start;\r\n    this.#context.search_start = search_start;\r\n    this.#context.hash_start = hash_start;\r\n    this.#context.scheme_type = scheme_type;\r\n\r\n    if (this.#searchParams) {\r\n      // If the search string has updated, URL becomes the source of truth, and we update URLSearchParams.\r\n      // Only do this when we're expecting it to have changed, otherwise a change to hash etc.\r\n      // would incorrectly compare the URLSearchParams state to the empty URL search state.\r\n      if (shouldUpdateSearchParams) {\r\n        const currentSearch = this.#getSearchFromContext();\r\n        if (previousSearch !== currentSearch) {\r\n          setURLSearchParams(this.#searchParams, currentSearch);\r\n          this.#searchParamsModified = false;\r\n        }\r\n      }\r\n\r\n      // If we have a URLSearchParams, ensure that URL is up-to-date with any modification to it.\r\n      this.#ensureSearchParamsUpdated();\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  get href() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  set href(value) {\r\n    value = `${value}`;\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHref, value);\r\n    if (!href) { throw new ERR_INVALID_URL(value); }\r\n    this.#updateContext(href, true);\r\n  }\r\n\r\n  // readonly\r\n  get origin() {\r\n    const protocol = StringPrototypeSlice(this.#context.href, 0, this.#context.protocol_end);\r\n\r\n    // Check if scheme_type is not `NOT_SPECIAL`\r\n    if (this.#context.scheme_type !== 1) {\r\n      // Check if scheme_type is `FILE`\r\n      if (this.#context.scheme_type === 6) {\r\n        return 'null';\r\n      }\r\n      return `${protocol}//${this.host}`;\r\n    }\r\n\r\n    if (protocol === 'blob:') {\r\n      const path = this.pathname;\r\n      if (path.length > 0) {\r\n        try {\r\n          const out = new URL(path);\r\n          // Only return origin of scheme is `http` or `https`\r\n          // Otherwise return a new opaque origin (null).\r\n          if (out.#context.scheme_type === 0 || out.#context.scheme_type === 2) {\r\n            return `${out.protocol}//${out.host}`;\r\n          }\r\n        } catch {\r\n          // Do nothing.\r\n        }\r\n      }\r\n    }\r\n\r\n    return 'null';\r\n  }\r\n\r\n  get protocol() {\r\n    return StringPrototypeSlice(this.#context.href, 0, this.#context.protocol_end);\r\n  }\r\n\r\n  set protocol(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kProtocol, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get username() {\r\n    if (this.#context.protocol_end + 2 < this.#context.username_end) {\r\n      return StringPrototypeSlice(this.#context.href, this.#context.protocol_end + 2, this.#context.username_end);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set username(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kUsername, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get password() {\r\n    if (this.#context.host_start - this.#context.username_end > 0) {\r\n      return StringPrototypeSlice(this.#context.href, this.#context.username_end + 1, this.#context.host_start);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set password(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPassword, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get host() {\r\n    let startsAt = this.#context.host_start;\r\n    if (this.#context.href[startsAt] === '@') {\r\n      startsAt++;\r\n    }\r\n    // If we have an empty host, then the space between components.host_end and\r\n    // components.pathname_start may be occupied by /.\r\n    if (startsAt === this.#context.host_end) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, startsAt, this.#context.pathname_start);\r\n  }\r\n\r\n  set host(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHost, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get hostname() {\r\n    let startsAt = this.#context.host_start;\r\n    // host_start might be \"@\" if the URL has credentials\r\n    if (this.#context.href[startsAt] === '@') {\r\n      startsAt++;\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, startsAt, this.#context.host_end);\r\n  }\r\n\r\n  set hostname(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHostname, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get port() {\r\n    if (this.#context.hasPort) {\r\n      return `${this.#context.port}`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  set port(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPort, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get pathname() {\r\n    let endsAt;\r\n    if (this.#context.hasSearch) {\r\n      endsAt = this.#context.search_start;\r\n    } else if (this.#context.hasHash) {\r\n      endsAt = this.#context.hash_start;\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, this.#context.pathname_start, endsAt);\r\n  }\r\n\r\n  set pathname(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kPathname, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  get search() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#getSearchFromContext();\r\n  }\r\n\r\n  set search(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kSearch, StringPrototypeToWellFormed(`${value}`));\r\n    if (href) {\r\n      this.#updateContext(href, true);\r\n    }\r\n  }\r\n\r\n  // readonly\r\n  get searchParams() {\r\n    // Create URLSearchParams on demand to greatly improve the URL performance.\r\n    if (this.#searchParams == null) {\r\n      this.#searchParams = new URLSearchParams(this.#getSearchFromContext());\r\n      setURLSearchParamsContext(this.#searchParams, this);\r\n      this.#searchParamsModified = false;\r\n    }\r\n    return this.#searchParams;\r\n  }\r\n\r\n  get hash() {\r\n    if (!this.#context.hasHash || (this.#context.href.length - this.#context.hash_start <= 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(this.#context.href, this.#context.hash_start);\r\n  }\r\n\r\n  set hash(value) {\r\n    const href = bindingUrl.update(this.#context.href, updateActions.kHash, `${value}`);\r\n    if (href) {\r\n      this.#updateContext(href);\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    // Updates to URLSearchParams are lazily propagated to URL, so we need to check we're in sync.\r\n    this.#ensureSearchParamsUpdated();\r\n    return this.#context.href;\r\n  }\r\n\r\n  static canParse(url, base = undefined) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    url = `${url}`;\r\n\r\n    if (base !== undefined) {\r\n      return bindingUrl.canParse(url, `${base}`);\r\n    }\r\n\r\n    // It is important to differentiate the canParse call statements\r\n    // since they resolve into different v8 fast api overloads.\r\n    return bindingUrl.canParse(url);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(URL.prototype, {\r\n  [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'URL' },\r\n  toString: kEnumerableProperty,\r\n  href: kEnumerableProperty,\r\n  origin: kEnumerableProperty,\r\n  protocol: kEnumerableProperty,\r\n  username: kEnumerableProperty,\r\n  password: kEnumerableProperty,\r\n  host: kEnumerableProperty,\r\n  hostname: kEnumerableProperty,\r\n  port: kEnumerableProperty,\r\n  pathname: kEnumerableProperty,\r\n  search: kEnumerableProperty,\r\n  searchParams: kEnumerableProperty,\r\n  hash: kEnumerableProperty,\r\n  toJSON: kEnumerableProperty,\r\n});\r\n\r\nObjectDefineProperties(URL, {\r\n  canParse: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    writable: true,\r\n    enumerable: true,\r\n  },\r\n});\r\n\r\nfunction installObjectURLMethods() {\r\n  const bindingBlob = internalBinding('blob');\r\n\r\n  function createObjectURL(obj) {\r\n    const cryptoRandom = lazyCryptoRandom();\r\n    if (cryptoRandom === undefined)\r\n      throw new ERR_NO_CRYPTO();\r\n\r\n    const blob = lazyBlob();\r\n    if (!blob.isBlob(obj))\r\n      throw new ERR_INVALID_ARG_TYPE('obj', 'Blob', obj);\r\n\r\n    const id = cryptoRandom.randomUUID();\r\n\r\n    bindingBlob.storeDataObject(id, obj[blob.kHandle], obj.size, obj.type);\r\n\r\n    return `blob:nodedata:${id}`;\r\n  }\r\n\r\n  function revokeObjectURL(url) {\r\n    if (arguments.length === 0) {\r\n      throw new ERR_MISSING_ARGS('url');\r\n    }\r\n\r\n    bindingBlob.revokeObjectURL(`${url}`);\r\n  }\r\n\r\n  ObjectDefineProperties(URL, {\r\n    createObjectURL: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      writable: true,\r\n      enumerable: true,\r\n      value: createObjectURL,\r\n    },\r\n    revokeObjectURL: {\r\n      __proto__: null,\r\n      configurable: true,\r\n      writable: true,\r\n      enumerable: true,\r\n      value: revokeObjectURL,\r\n    },\r\n  });\r\n}\r\n\r\n// application/x-www-form-urlencoded parser\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\r\nfunction parseParams(qs) {\r\n  const out = [];\r\n  let seenSep = false;\r\n  let buf = '';\r\n  let encoded = false;\r\n  let encodeCheck = 0;\r\n  let i = qs[0] === '?' ? 1 : 0;\r\n  let pairStart = i;\r\n  let lastPos = i;\r\n  for (; i < qs.length; ++i) {\r\n    const code = StringPrototypeCharCodeAt(qs, i);\r\n\r\n    // Try matching key/value pair separator\r\n    if (code === CHAR_AMPERSAND) {\r\n      if (pairStart === i) {\r\n        // We saw an empty substring between pair separators\r\n        lastPos = pairStart = i + 1;\r\n        continue;\r\n      }\r\n\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      // If `buf` is the key, add an empty value.\r\n      if (!seenSep)\r\n        out.push('');\r\n\r\n      seenSep = false;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = pairStart = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Try matching key/value separator (e.g. '=') if we haven't already\r\n    if (!seenSep && code === CHAR_EQUAL) {\r\n      // Key/value separator match!\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      seenSep = true;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Handle + and percent decoding.\r\n    if (code === CHAR_PLUS) {\r\n      if (lastPos < i)\r\n        buf += StringPrototypeSlice(qs, lastPos, i);\r\n      buf += ' ';\r\n      lastPos = i + 1;\r\n    } else if (!encoded) {\r\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\r\n      // calls to string decoding functions\r\n      if (code === CHAR_PERCENT) {\r\n        encodeCheck = 1;\r\n      } else if (encodeCheck > 0) {\r\n        if (isHexTable[code] === 1) {\r\n          if (++encodeCheck === 3) {\r\n            encoded = true;\r\n          }\r\n        } else {\r\n          encodeCheck = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deal with any leftover key or value data\r\n\r\n  // There is a trailing &. No more processing is needed.\r\n  if (pairStart === i)\r\n    return out;\r\n\r\n  if (lastPos < i)\r\n    buf += StringPrototypeSlice(qs, lastPos, i);\r\n  if (encoded)\r\n    buf = querystring.unescape(buf);\r\n  ArrayPrototypePush(out, buf);\r\n\r\n  // If `buf` is the key, add an empty value.\r\n  if (!seenSep)\r\n    ArrayPrototypePush(out, '');\r\n\r\n  return out;\r\n}\r\n\r\n// Adapted from querystring's implementation.\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\r\nconst noEscape = new Int8Array([\r\n/*\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\r\n*/\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,  // 0x70 - 0x7F\r\n]);\r\n\r\n// Special version of hexTable that uses `+` for U+0020 SPACE.\r\nconst paramHexTable = hexTable.slice();\r\nparamHexTable[0x20] = '+';\r\n\r\n// application/x-www-form-urlencoded serializer\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\r\nfunction serializeParams(array) {\r\n  const len = array.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  const firstEncodedParam = encodeStr(array[0], noEscape, paramHexTable);\r\n  const firstEncodedValue = encodeStr(array[1], noEscape, paramHexTable);\r\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\r\n\r\n  for (let i = 2; i < len; i += 2) {\r\n    const encodedParam = encodeStr(array[i], noEscape, paramHexTable);\r\n    const encodedValue = encodeStr(array[i + 1], noEscape, paramHexTable);\r\n    output += `&${encodedParam}=${encodedValue}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// for merge sort\r\nfunction merge(out, start, mid, end, lBuffer, rBuffer) {\r\n  const sizeLeft = mid - start;\r\n  const sizeRight = end - mid;\r\n  let l, r, o;\r\n\r\n  for (l = 0; l < sizeLeft; l++)\r\n    lBuffer[l] = out[start + l];\r\n  for (r = 0; r < sizeRight; r++)\r\n    rBuffer[r] = out[mid + r];\r\n\r\n  l = 0;\r\n  r = 0;\r\n  o = start;\r\n  while (l < sizeLeft && r < sizeRight) {\r\n    if (lBuffer[l] <= rBuffer[r]) {\r\n      out[o++] = lBuffer[l++];\r\n      out[o++] = lBuffer[l++];\r\n    } else {\r\n      out[o++] = rBuffer[r++];\r\n      out[o++] = rBuffer[r++];\r\n    }\r\n  }\r\n  while (l < sizeLeft)\r\n    out[o++] = lBuffer[l++];\r\n  while (r < sizeRight)\r\n    out[o++] = rBuffer[r++];\r\n}\r\n\r\nfunction domainToASCII(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // StringPrototypeToWellFormed is not needed.\r\n  return bindingUrl.domainToASCII(`${domain}`);\r\n}\r\n\r\nfunction domainToUnicode(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // StringPrototypeToWellFormed is not needed.\r\n  return bindingUrl.domainToUnicode(`${domain}`);\r\n}\r\n\r\n/**\r\n * Utility function that converts a URL object into an ordinary options object\r\n * as expected by the `http.request` and `https.request` APIs.\r\n * @param {URL} url\r\n * @returns {Record<string, unknown>}\r\n */\r\nfunction urlToHttpOptions(url) {\r\n  const { hostname, pathname, port, username, password, search } = url;\r\n  const options = {\r\n    __proto__: null,\r\n    ...url, // In case the url object was extended by the user.\r\n    protocol: url.protocol,\r\n    hostname: hostname && StringPrototypeStartsWith(hostname, '[') ?\r\n      StringPrototypeSlice(hostname, 1, -1) :\r\n      hostname,\r\n    hash: url.hash,\r\n    search: search,\r\n    pathname: pathname,\r\n    path: `${pathname || ''}${search || ''}`,\r\n    href: url.href,\r\n  };\r\n  if (port !== '') {\r\n    options.port = Number(port);\r\n  }\r\n  if (username || password) {\r\n    options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction getPathFromURLWin32(url) {\r\n  const hostname = url.hostname;\r\n  let pathname = url.pathname;\r\n  for (let n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      const third = StringPrototypeCodePointAt(pathname, n + 2) | 0x20;\r\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\r\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded \\\\ or / characters',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  pathname = SideEffectFreeRegExpPrototypeSymbolReplace(FORWARD_SLASH, pathname, '\\\\');\r\n  pathname = decodeURIComponent(pathname);\r\n  if (hostname !== '') {\r\n    // If hostname is set, then we have a UNC path\r\n    // Pass the hostname through domainToUnicode just in case\r\n    // it is an IDN using punycode encoding. We do not need to worry\r\n    // about percent encoding because the URL parser will have\r\n    // already taken care of that for us. Note that this only\r\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\r\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\r\n  }\r\n  // Otherwise, it's a local path that requires a drive letter\r\n  const letter = StringPrototypeCodePointAt(pathname, 1) | 0x20;\r\n  const sep = StringPrototypeCharAt(pathname, 2);\r\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\r\n      (sep !== ':')) {\r\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\r\n  }\r\n  return StringPrototypeSlice(pathname, 1);\r\n}\r\n\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\r\n  }\r\n  const pathname = url.pathname;\r\n  for (let n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      const third = StringPrototypeCodePointAt(pathname, n + 2) | 0x20;\r\n      if (pathname[n + 1] === '2' && third === 102) {\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded / characters',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return decodeURIComponent(pathname);\r\n}\r\n\r\nfunction fileURLToPath(path, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if (typeof path === 'string')\r\n    path = new URL(path);\r\n  else if (!isURL(path))\r\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);\r\n  if (path.protocol !== 'file:')\r\n    throw new ERR_INVALID_URL_SCHEME('file');\r\n  return (windows ?? isWindows) ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\r\n}\r\n\r\n// The following characters are percent-encoded when converting from file path\r\n// to URL:\r\n// - %: The percent character is the only character not encoded by the\r\n//        `pathname` setter.\r\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\r\n//      character but the `pathname` setters replaces it by a forward slash.\r\n// - LF: The newline character is stripped out by the `pathname` setter.\r\n//       (See whatwg/url#419)\r\n// - CR: The carriage return character is also stripped out by the `pathname`\r\n//       setter.\r\n// - TAB: The tab character is also stripped out by the `pathname` setter.\r\nconst percentRegEx = /%/g;\r\nconst backslashRegEx = /\\\\/g;\r\nconst newlineRegEx = /\\n/g;\r\nconst carriageReturnRegEx = /\\r/g;\r\nconst tabRegEx = /\\t/g;\r\nconst questionRegex = /\\?/g;\r\nconst hashRegex = /#/g;\r\n\r\nfunction encodePathChars(filepath, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if (StringPrototypeIndexOf(filepath, '%') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(percentRegEx, filepath, '%25');\r\n  // In posix, backslash is a valid character in paths:\r\n  if (!(windows ?? isWindows) && StringPrototypeIndexOf(filepath, '\\\\') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(backslashRegEx, filepath, '%5C');\r\n  if (StringPrototypeIndexOf(filepath, '\\n') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(newlineRegEx, filepath, '%0A');\r\n  if (StringPrototypeIndexOf(filepath, '\\r') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(carriageReturnRegEx, filepath, '%0D');\r\n  if (StringPrototypeIndexOf(filepath, '\\t') !== -1)\r\n    filepath = RegExpPrototypeSymbolReplace(tabRegEx, filepath, '%09');\r\n  return filepath;\r\n}\r\n\r\nfunction pathToFileURL(filepath, options = kEmptyObject) {\r\n  const windows = options?.windows;\r\n  if ((windows ?? isWindows) && StringPrototypeStartsWith(filepath, '\\\\\\\\')) {\r\n    const outURL = new URL('file://');\r\n    // UNC path format: \\\\server\\share\\resource\r\n    const hostnameEndIndex = StringPrototypeIndexOf(filepath, '\\\\', 2);\r\n    if (hostnameEndIndex === -1) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'path',\r\n        filepath,\r\n        'Missing UNC resource path',\r\n      );\r\n    }\r\n    if (hostnameEndIndex === 2) {\r\n      throw new ERR_INVALID_ARG_VALUE(\r\n        'path',\r\n        filepath,\r\n        'Empty UNC servername',\r\n      );\r\n    }\r\n    const hostname = StringPrototypeSlice(filepath, 2, hostnameEndIndex);\r\n    outURL.hostname = domainToASCII(hostname);\r\n    outURL.pathname = encodePathChars(\r\n      RegExpPrototypeSymbolReplace(backslashRegEx, StringPrototypeSlice(filepath, hostnameEndIndex), '/'),\r\n      { windows },\r\n    );\r\n    return outURL;\r\n  }\r\n  let resolved = (windows ?? isWindows) ? path.win32.resolve(filepath) : path.posix.resolve(filepath);\r\n  // path.resolve strips trailing slashes so we must add them back\r\n  const filePathLast = StringPrototypeCharCodeAt(filepath,\r\n                                                 filepath.length - 1);\r\n  if ((filePathLast === CHAR_FORWARD_SLASH ||\r\n       ((windows ?? isWindows) && filePathLast === CHAR_BACKWARD_SLASH)) &&\r\n      resolved[resolved.length - 1] !== path.sep)\r\n    resolved += '/';\r\n\r\n  // Call encodePathChars first to avoid encoding % again for ? and #.\r\n  resolved = encodePathChars(resolved, { windows });\r\n\r\n  // Question and hash character should be included in pathname.\r\n  // Therefore, encoding is required to eliminate parsing them in different states.\r\n  // This is done as an optimization to not creating a URL instance and\r\n  // later triggering pathname setter, which impacts performance\r\n  if (StringPrototypeIndexOf(resolved, '?') !== -1)\r\n    resolved = RegExpPrototypeSymbolReplace(questionRegex, resolved, '%3F');\r\n  if (StringPrototypeIndexOf(resolved, '#') !== -1)\r\n    resolved = RegExpPrototypeSymbolReplace(hashRegex, resolved, '%23');\r\n  return new URL(`file://${resolved}`);\r\n}\r\n\r\nfunction toPathIfFileURL(fileURLOrPath) {\r\n  if (!isURL(fileURLOrPath))\r\n    return fileURLOrPath;\r\n  return fileURLToPath(fileURLOrPath);\r\n}\r\n\r\n/**\r\n * This util takes a string containing a URL and return the URL origin,\r\n * its meant to avoid calls to `new URL` constructor.\r\n * @param {string} url\r\n * @returns {URL['origin']}\r\n */\r\nfunction getURLOrigin(url) {\r\n  return bindingUrl.getOrigin(url);\r\n}\r\n\r\nmodule.exports = {\r\n  fileURLToPath,\r\n  pathToFileURL,\r\n  toPathIfFileURL,\r\n  installObjectURLMethods,\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  urlToHttpOptions,\r\n  encodeStr,\r\n  isURL,\r\n\r\n  urlUpdateActions: updateActions,\r\n  getURLOrigin,\r\n  unsafeProtocol,\r\n  hostlessProtocol,\r\n  slashedProtocol,\r\n};\r\n"
  },
  "29": {
    "metadata": {
      "scriptId": "29",
      "url": "node:internal/querystring",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 119,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "232d099da0545a596f975f2a041998a9543fb009c33cf257492e055a49a42d21",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3435,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/querystring"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  Int8Array,\r\n  NumberPrototypeToString,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToUpperCase,\r\n} = primordials;\r\n\r\nconst { ERR_INVALID_URI } = require('internal/errors').codes;\r\n\r\nconst hexTable = new Array(256);\r\nfor (let i = 0; i < 256; ++i)\r\n  hexTable[i] = '%' +\r\n                StringPrototypeToUpperCase((i < 16 ? '0' : '') +\r\n                                           NumberPrototypeToString(i, 16));\r\n\r\nconst isHexTable = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 64 - 79\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80 - 95\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 96 - 111\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 112 - 127\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 128 ...\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // ... 256\r\n]);\r\n\r\n/**\r\n * @param {string} str\r\n * @param {Int8Array} noEscapeTable\r\n * @param {string[]} hexTable\r\n * @returns {string}\r\n */\r\nfunction encodeStr(str, noEscapeTable, hexTable) {\r\n  const len = str.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  let out = '';\r\n  let lastPos = 0;\r\n  let i = 0;\r\n\r\n  outer:\r\n  for (; i < len; i++) {\r\n    let c = StringPrototypeCharCodeAt(str, i);\r\n\r\n    // ASCII\r\n    while (c < 0x80) {\r\n      if (noEscapeTable[c] !== 1) {\r\n        if (lastPos < i)\r\n          out += StringPrototypeSlice(str, lastPos, i);\r\n        lastPos = i + 1;\r\n        out += hexTable[c];\r\n      }\r\n\r\n      if (++i === len)\r\n        break outer;\r\n\r\n      c = StringPrototypeCharCodeAt(str, i);\r\n    }\r\n\r\n    if (lastPos < i)\r\n      out += StringPrototypeSlice(str, lastPos, i);\r\n\r\n    // Multi-byte characters ...\r\n    if (c < 0x800) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xC0 | (c >> 6)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    if (c < 0xD800 || c >= 0xE000) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xE0 | (c >> 12)] +\r\n             hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    // Surrogate pair\r\n    ++i;\r\n\r\n    // This branch should never happen because all URLSearchParams entries\r\n    // should already be converted to USVString. But, included for\r\n    // completion's sake anyway.\r\n    if (i >= len)\r\n      throw new ERR_INVALID_URI();\r\n\r\n    const c2 = StringPrototypeCharCodeAt(str, i) & 0x3FF;\r\n\r\n    lastPos = i + 1;\r\n    c = 0x10000 + (((c & 0x3FF) << 10) | c2);\r\n    out += hexTable[0xF0 | (c >> 18)] +\r\n           hexTable[0x80 | ((c >> 12) & 0x3F)] +\r\n           hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n           hexTable[0x80 | (c & 0x3F)];\r\n  }\r\n  if (lastPos === 0)\r\n    return str;\r\n  if (lastPos < len)\r\n    return out + StringPrototypeSlice(str, lastPos);\r\n  return out;\r\n}\r\n\r\nmodule.exports = {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n};\r\n"
  },
  "30": {
    "metadata": {
      "scriptId": "30",
      "url": "node:path",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1546,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "5fbac795a5cf1b110739d3512a8b5ec1e7dabdd8be012dbfba84de511f3cbc7c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 48405,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:path"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeReplace,\r\n  StringPrototypeSlice,\r\n  StringPrototypeToLowerCase,\r\n} = primordials;\r\n\r\nconst {\r\n  CHAR_UPPERCASE_A,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_UPPERCASE_Z,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_DOT,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON,\r\n  CHAR_QUESTION_MARK,\r\n} = require('internal/constants');\r\nconst {\r\n  validateObject,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nconst platformIsWin32 = (process.platform === 'win32');\r\n\r\nfunction isPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n}\r\n\r\nfunction isPosixPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH;\r\n}\r\n\r\nfunction isWindowsDeviceRoot(code) {\r\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\r\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\r\n}\r\n\r\n// Resolves . and .. elements in a path with directory names\r\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\r\n  let res = '';\r\n  let lastSegmentLength = 0;\r\n  let lastSlash = -1;\r\n  let dots = 0;\r\n  let code = 0;\r\n  for (let i = 0; i <= path.length; ++i) {\r\n    if (i < path.length)\r\n      code = StringPrototypeCharCodeAt(path, i);\r\n    else if (isPathSeparator(code))\r\n      break;\r\n    else\r\n      code = CHAR_FORWARD_SLASH;\r\n\r\n    if (isPathSeparator(code)) {\r\n      if (lastSlash === i - 1 || dots === 1) {\r\n        // NOOP\r\n      } else if (dots === 2) {\r\n        if (res.length < 2 || lastSegmentLength !== 2 ||\r\n            StringPrototypeCharCodeAt(res, res.length - 1) !== CHAR_DOT ||\r\n            StringPrototypeCharCodeAt(res, res.length - 2) !== CHAR_DOT) {\r\n          if (res.length > 2) {\r\n            const lastSlashIndex = StringPrototypeLastIndexOf(res, separator);\r\n            if (lastSlashIndex === -1) {\r\n              res = '';\r\n              lastSegmentLength = 0;\r\n            } else {\r\n              res = StringPrototypeSlice(res, 0, lastSlashIndex);\r\n              lastSegmentLength =\r\n                res.length - 1 - StringPrototypeLastIndexOf(res, separator);\r\n            }\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          } else if (res.length !== 0) {\r\n            res = '';\r\n            lastSegmentLength = 0;\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          }\r\n        }\r\n        if (allowAboveRoot) {\r\n          res += res.length > 0 ? `${separator}..` : '..';\r\n          lastSegmentLength = 2;\r\n        }\r\n      } else {\r\n        if (res.length > 0)\r\n          res += `${separator}${StringPrototypeSlice(path, lastSlash + 1, i)}`;\r\n        else\r\n          res = StringPrototypeSlice(path, lastSlash + 1, i);\r\n        lastSegmentLength = i - lastSlash - 1;\r\n      }\r\n      lastSlash = i;\r\n      dots = 0;\r\n    } else if (code === CHAR_DOT && dots !== -1) {\r\n      ++dots;\r\n    } else {\r\n      dots = -1;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction formatExt(ext) {\r\n  return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';\r\n}\r\n\r\n/**\r\n * @param {string} sep\r\n * @param {{\r\n *  dir?: string;\r\n *  root?: string;\r\n *  base?: string;\r\n *  name?: string;\r\n *  ext?: string;\r\n *  }} pathObject\r\n * @returns {string}\r\n */\r\nfunction _format(sep, pathObject) {\r\n  validateObject(pathObject, 'pathObject');\r\n  const dir = pathObject.dir || pathObject.root;\r\n  const base = pathObject.base ||\r\n    `${pathObject.name || ''}${formatExt(pathObject.ext)}`;\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\r\n}\r\n\r\nconst win32 = {\r\n  /**\r\n   * path.resolve([from ...], to)\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  resolve(...args) {\r\n    let resolvedDevice = '';\r\n    let resolvedTail = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (let i = args.length - 1; i >= -1; i--) {\r\n      let path;\r\n      if (i >= 0) {\r\n        path = args[i];\r\n        validateString(path, `paths[${i}]`);\r\n\r\n        // Skip empty entries\r\n        if (path.length === 0) {\r\n          continue;\r\n        }\r\n      } else if (resolvedDevice.length === 0) {\r\n        path = process.cwd();\r\n      } else {\r\n        // Windows has the concept of drive-specific current working\r\n        // directories. If we've resolved a drive letter but not yet an\r\n        // absolute path, get cwd for that drive, or the process cwd if\r\n        // the drive cwd is not available. We're sure the device is not\r\n        // a UNC path at this points, because UNC paths are always absolute.\r\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\r\n\r\n        // Verify that a cwd was found and that it actually points\r\n        // to our drive. If not, default to the drive's root.\r\n        if (path === undefined ||\r\n            (StringPrototypeToLowerCase(StringPrototypeSlice(path, 0, 2)) !==\r\n            StringPrototypeToLowerCase(resolvedDevice) &&\r\n            StringPrototypeCharCodeAt(path, 2) === CHAR_BACKWARD_SLASH)) {\r\n          path = `${resolvedDevice}\\\\`;\r\n        }\r\n      }\r\n\r\n      const len = path.length;\r\n      let rootEnd = 0;\r\n      let device = '';\r\n      let isAbsolute = false;\r\n      const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n      // Try to match a root\r\n      if (len === 1) {\r\n        if (isPathSeparator(code)) {\r\n          // `path` contains just a path separator\r\n          rootEnd = 1;\r\n          isAbsolute = true;\r\n        }\r\n      } else if (isPathSeparator(code)) {\r\n        // Possible UNC root\r\n\r\n        // If we started with a separator, we know we at least have an\r\n        // absolute path of some kind (UNC or otherwise)\r\n        isAbsolute = true;\r\n\r\n        if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n          // Matched double path separator at beginning\r\n          let j = 2;\r\n          let last = j;\r\n          // Match 1 or more non-path separators\r\n          while (j < len &&\r\n                 !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            const firstPart = StringPrototypeSlice(path, last, j);\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more path separators\r\n            while (j < len &&\r\n                   isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j < len && j !== last) {\r\n              // Matched!\r\n              last = j;\r\n              // Match 1 or more non-path separators\r\n              while (j < len &&\r\n                     !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n                j++;\r\n              }\r\n              if (j === len || j !== last) {\r\n                // We matched a UNC root\r\n                device =\r\n                  `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last, j)}`;\r\n                rootEnd = j;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          rootEnd = 1;\r\n        }\r\n      } else if (isWindowsDeviceRoot(code) &&\r\n                  StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n        // Possible device root\r\n        device = StringPrototypeSlice(path, 0, 2);\r\n        rootEnd = 2;\r\n        if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n          // Treat separator following drive name as an absolute path\r\n          // indicator\r\n          isAbsolute = true;\r\n          rootEnd = 3;\r\n        }\r\n      }\r\n\r\n      if (device.length > 0) {\r\n        if (resolvedDevice.length > 0) {\r\n          if (StringPrototypeToLowerCase(device) !==\r\n              StringPrototypeToLowerCase(resolvedDevice))\r\n            // This path points to another device so it is not applicable\r\n            continue;\r\n        } else {\r\n          resolvedDevice = device;\r\n        }\r\n      }\r\n\r\n      if (resolvedAbsolute) {\r\n        if (resolvedDevice.length > 0)\r\n          break;\r\n      } else {\r\n        resolvedTail =\r\n          `${StringPrototypeSlice(path, rootEnd)}\\\\${resolvedTail}`;\r\n        resolvedAbsolute = isAbsolute;\r\n        if (isAbsolute && resolvedDevice.length > 0) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path,\r\n    // but handle relative paths to be safe (might happen when process.cwd()\r\n    // fails)\r\n\r\n    // Normalize the tail path\r\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\r\n                                   isPathSeparator);\r\n\r\n    return resolvedAbsolute ?\r\n      `${resolvedDevice}\\\\${resolvedTail}` :\r\n      `${resolvedDevice}${resolvedTail}` || '.';\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = 0;\r\n    let device;\r\n    let isAbsolute = false;\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    // Try to match a root\r\n    if (len === 1) {\r\n      // `path` contains just a single char, exit early to avoid\r\n      // unnecessary work\r\n      return isPosixPathSeparator(code) ? '\\\\' : path;\r\n    }\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      // If we started with a separator, we know we at least have an absolute\r\n      // path of some kind (UNC or otherwise)\r\n      isAbsolute = true;\r\n\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          const firstPart = StringPrototypeSlice(path, last, j);\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              // Return the normalized version of the UNC root since there\r\n              // is nothing left to process\r\n              return `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last)}\\\\`;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              device =\r\n                `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path, last, j)}`;\r\n              rootEnd = j;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        rootEnd = 1;\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      // Possible device root\r\n      device = StringPrototypeSlice(path, 0, 2);\r\n      rootEnd = 2;\r\n      if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n        // Treat separator following drive name as an absolute path\r\n        // indicator\r\n        isAbsolute = true;\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n\r\n    let tail = rootEnd < len ?\r\n      normalizeString(StringPrototypeSlice(path, rootEnd),\r\n                      !isAbsolute, '\\\\', isPathSeparator) :\r\n      '';\r\n    if (tail.length === 0 && !isAbsolute)\r\n      tail = '.';\r\n    if (tail.length > 0 &&\r\n        isPathSeparator(StringPrototypeCharCodeAt(path, len - 1)))\r\n      tail += '\\\\';\r\n    if (device === undefined) {\r\n      return isAbsolute ? `\\\\${tail}` : tail;\r\n    }\r\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {boolean}\r\n   */\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return false;\r\n\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n    return isPathSeparator(code) ||\r\n      // Possible device root\r\n      (len > 2 &&\r\n      isWindowsDeviceRoot(code) &&\r\n      StringPrototypeCharCodeAt(path, 1) === CHAR_COLON &&\r\n      isPathSeparator(StringPrototypeCharCodeAt(path, 2)));\r\n  },\r\n\r\n  /**\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n\r\n    let joined;\r\n    let firstPart;\r\n    for (let i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = firstPart = arg;\r\n        else\r\n          joined += `\\\\${arg}`;\r\n      }\r\n    }\r\n\r\n    if (joined === undefined)\r\n      return '.';\r\n\r\n    // Make sure that the joined path doesn't start with two slashes, because\r\n    // normalize() will mistake it for a UNC path then.\r\n    //\r\n    // This step is skipped when it is very clear that the user actually\r\n    // intended to point at a UNC path. This is assumed when the first\r\n    // non-empty string arguments starts with exactly two slashes followed by\r\n    // at least one more non-slash character.\r\n    //\r\n    // Note that for normalize() to treat a path as a UNC path it needs to\r\n    // have at least 2 components, so we don't filter for that here.\r\n    // This means that the user can use join to construct UNC paths from\r\n    // a server name and a share name; for example:\r\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\r\n    let needsReplace = true;\r\n    let slashCount = 0;\r\n    if (isPathSeparator(StringPrototypeCharCodeAt(firstPart, 0))) {\r\n      ++slashCount;\r\n      const firstLen = firstPart.length;\r\n      if (firstLen > 1 &&\r\n          isPathSeparator(StringPrototypeCharCodeAt(firstPart, 1))) {\r\n        ++slashCount;\r\n        if (firstLen > 2) {\r\n          if (isPathSeparator(StringPrototypeCharCodeAt(firstPart, 2)))\r\n            ++slashCount;\r\n          else {\r\n            // We matched a UNC path in the first part\r\n            needsReplace = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (needsReplace) {\r\n      // Find any more consecutive slashes we need to replace\r\n      while (slashCount < joined.length &&\r\n             isPathSeparator(StringPrototypeCharCodeAt(joined, slashCount))) {\r\n        slashCount++;\r\n      }\r\n\r\n      // Replace the slashes if needed\r\n      if (slashCount >= 2)\r\n        joined = `\\\\${StringPrototypeSlice(joined, slashCount)}`;\r\n    }\r\n\r\n    return win32.normalize(joined);\r\n  },\r\n\r\n  /**\r\n   * It will solve the relative path from `from` to `to`, for instance\r\n   * from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n   * to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n   * The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @returns {string}\r\n   */\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromOrig = win32.resolve(from);\r\n    const toOrig = win32.resolve(to);\r\n\r\n    if (fromOrig === toOrig)\r\n      return '';\r\n\r\n    from = StringPrototypeToLowerCase(fromOrig);\r\n    to = StringPrototypeToLowerCase(toOrig);\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim any leading backslashes\r\n    let fromStart = 0;\r\n    while (fromStart < from.length &&\r\n           StringPrototypeCharCodeAt(from, fromStart) === CHAR_BACKWARD_SLASH) {\r\n      fromStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let fromEnd = from.length;\r\n    while (\r\n      fromEnd - 1 > fromStart &&\r\n      StringPrototypeCharCodeAt(from, fromEnd - 1) === CHAR_BACKWARD_SLASH\r\n    ) {\r\n      fromEnd--;\r\n    }\r\n    const fromLen = fromEnd - fromStart;\r\n\r\n    // Trim any leading backslashes\r\n    let toStart = 0;\r\n    while (toStart < to.length &&\r\n           StringPrototypeCharCodeAt(to, toStart) === CHAR_BACKWARD_SLASH) {\r\n      toStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let toEnd = to.length;\r\n    while (toEnd - 1 > toStart &&\r\n           StringPrototypeCharCodeAt(to, toEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n      toEnd--;\r\n    }\r\n    const toLen = toEnd - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = fromLen < toLen ? fromLen : toLen;\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = StringPrototypeCharCodeAt(from, fromStart + i);\r\n      if (fromCode !== StringPrototypeCharCodeAt(to, toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_BACKWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n\r\n    // We found a mismatch before the first common path separator was seen, so\r\n    // return the original `to`.\r\n    if (i !== length) {\r\n      if (lastCommonSep === -1)\r\n        return toOrig;\r\n    } else {\r\n      if (toLen > length) {\r\n        if (StringPrototypeCharCodeAt(to, toStart + i) ===\r\n            CHAR_BACKWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\r\n          return StringPrototypeSlice(toOrig, toStart + i + 1);\r\n        }\r\n        if (i === 2) {\r\n          // We get here if `from` is the device root.\r\n          // For example: from='C:\\\\'; to='C:\\\\foo'\r\n          return StringPrototypeSlice(toOrig, toStart + i);\r\n        }\r\n      }\r\n      if (fromLen > length) {\r\n        if (StringPrototypeCharCodeAt(from, fromStart + i) ===\r\n            CHAR_BACKWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\r\n          lastCommonSep = i;\r\n        } else if (i === 2) {\r\n          // We get here if `to` is the device root.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\r\n          lastCommonSep = 3;\r\n        }\r\n      }\r\n      if (lastCommonSep === -1)\r\n        lastCommonSep = 0;\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to` and\r\n    // `from`\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd ||\r\n          StringPrototypeCharCodeAt(from, i) === CHAR_BACKWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '\\\\..';\r\n      }\r\n    }\r\n\r\n    toStart += lastCommonSep;\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts\r\n    if (out.length > 0)\r\n      return `${out}${StringPrototypeSlice(toOrig, toStart, toEnd)}`;\r\n\r\n    if (StringPrototypeCharCodeAt(toOrig, toStart) === CHAR_BACKWARD_SLASH)\r\n      ++toStart;\r\n    return StringPrototypeSlice(toOrig, toStart, toEnd);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  toNamespacedPath(path) {\r\n    // Note: this will *probably* throw somewhere.\r\n    if (typeof path !== 'string' || path.length === 0)\r\n      return path;\r\n\r\n    const resolvedPath = win32.resolve(path);\r\n\r\n    if (resolvedPath.length <= 2)\r\n      return path;\r\n\r\n    if (StringPrototypeCharCodeAt(resolvedPath, 0) === CHAR_BACKWARD_SLASH) {\r\n      // Possible UNC root\r\n      if (StringPrototypeCharCodeAt(resolvedPath, 1) === CHAR_BACKWARD_SLASH) {\r\n        const code = StringPrototypeCharCodeAt(resolvedPath, 2);\r\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\r\n          // Matched non-long UNC root, convert the path to a long UNC path\r\n          return `\\\\\\\\?\\\\UNC\\\\${StringPrototypeSlice(resolvedPath, 2)}`;\r\n        }\r\n      }\r\n    } else if (\r\n      isWindowsDeviceRoot(StringPrototypeCharCodeAt(resolvedPath, 0)) &&\r\n      StringPrototypeCharCodeAt(resolvedPath, 1) === CHAR_COLON &&\r\n      StringPrototypeCharCodeAt(resolvedPath, 2) === CHAR_BACKWARD_SLASH\r\n    ) {\r\n      // Matched device root, convert the path to a long UNC path\r\n      return `\\\\\\\\?\\\\${resolvedPath}`;\r\n    }\r\n\r\n    return resolvedPath;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = -1;\r\n    let offset = 0;\r\n    const code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    if (len === 1) {\r\n      // `path` contains just a path separator, exit early to avoid\r\n      // unnecessary work or a dot.\r\n      return isPathSeparator(code) ? path : '.';\r\n    }\r\n\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = offset = 1;\r\n\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              return path;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n\r\n              // Offset by 1 to include the separator after the UNC root to\r\n              // treat it as a \"normal root\" on top of a (UNC) root\r\n              rootEnd = offset = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    // Possible device root\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      rootEnd =\r\n        len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path, 2)) ? 3 : 2;\r\n      offset = rootEnd;\r\n    }\r\n\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    for (let i = len - 1; i >= offset; --i) {\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, i))) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1) {\r\n      if (rootEnd === -1)\r\n        return '.';\r\n\r\n      end = rootEnd;\r\n    }\r\n    return StringPrototypeSlice(path, 0, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {string} [suffix]\r\n   * @returns {string}\r\n   */\r\n  basename(path, suffix) {\r\n    if (suffix !== undefined)\r\n      validateString(suffix, 'ext');\r\n    validateString(path, 'path');\r\n    let start = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n    if (path.length >= 2 &&\r\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path, 0)) &&\r\n        StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      start = 2;\r\n    }\r\n\r\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\r\n      if (suffix === path)\r\n        return '';\r\n      let extIdx = suffix.length - 1;\r\n      let firstNonSlashEnd = -1;\r\n      for (let i = path.length - 1; i >= start; --i) {\r\n        const code = StringPrototypeCharCodeAt(path, i);\r\n        if (isPathSeparator(code)) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === StringPrototypeCharCodeAt(suffix, extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return StringPrototypeSlice(path, start, end);\r\n    }\r\n    for (let i = path.length - 1; i >= start; --i) {\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, i))) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return StringPrototypeSlice(path, start, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    let start = 0;\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n\r\n    if (path.length >= 2 &&\r\n        StringPrototypeCharCodeAt(path, 1) === CHAR_COLON &&\r\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path, 0))) {\r\n      start = startPart = 2;\r\n    }\r\n\r\n    for (let i = path.length - 1; i >= start; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(path, startDot, end);\r\n  },\r\n\r\n  format: FunctionPrototypeBind(_format, null, '\\\\'),\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {{\r\n   *  dir: string;\r\n   *  root: string;\r\n   *  base: string;\r\n   *  name: string;\r\n   *  ext: string;\r\n   *  }}\r\n   */\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n\r\n    const len = path.length;\r\n    let rootEnd = 0;\r\n    let code = StringPrototypeCharCodeAt(path, 0);\r\n\r\n    if (len === 1) {\r\n      if (isPathSeparator(code)) {\r\n        // `path` contains just a path separator, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      ret.base = ret.name = path;\r\n      return ret;\r\n    }\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = 1;\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len &&\r\n               !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len &&\r\n                 isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len &&\r\n                   !isPathSeparator(StringPrototypeCharCodeAt(path, j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              rootEnd = j;\r\n            } else if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              rootEnd = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) &&\r\n               StringPrototypeCharCodeAt(path, 1) === CHAR_COLON) {\r\n      // Possible device root\r\n      if (len <= 2) {\r\n        // `path` contains just a drive root, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      rootEnd = 2;\r\n      if (isPathSeparator(StringPrototypeCharCodeAt(path, 2))) {\r\n        if (len === 3) {\r\n          // `path` contains just a drive root, exit early to avoid\r\n          // unnecessary work\r\n          ret.root = ret.dir = path;\r\n          return ret;\r\n        }\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n    if (rootEnd > 0)\r\n      ret.root = StringPrototypeSlice(path, 0, rootEnd);\r\n\r\n    let startDot = -1;\r\n    let startPart = rootEnd;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    let i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= rootEnd; --i) {\r\n      code = StringPrototypeCharCodeAt(path, i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n           startDot === end - 1 &&\r\n           startDot === startPart + 1)) {\r\n        ret.base = ret.name = StringPrototypeSlice(path, startPart, end);\r\n      } else {\r\n        ret.name = StringPrototypeSlice(path, startPart, startDot);\r\n        ret.base = StringPrototypeSlice(path, startPart, end);\r\n        ret.ext = StringPrototypeSlice(path, startDot, end);\r\n      }\r\n    }\r\n\r\n    // If the directory is the root, use the entire root as the `dir` including\r\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\r\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\r\n    if (startPart > 0 && startPart !== rootEnd)\r\n      ret.dir = StringPrototypeSlice(path, 0, startPart - 1);\r\n    else\r\n      ret.dir = ret.root;\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '\\\\',\r\n  delimiter: ';',\r\n  win32: null,\r\n  posix: null,\r\n};\r\n\r\nconst posixCwd = (() => {\r\n  if (platformIsWin32) {\r\n    // Converts Windows' backslash path separators to POSIX forward slashes\r\n    // and truncates any drive indicator\r\n    const regexp = /\\\\/g;\r\n    return () => {\r\n      const cwd = StringPrototypeReplace(process.cwd(), regexp, '/');\r\n      return StringPrototypeSlice(cwd, StringPrototypeIndexOf(cwd, '/'));\r\n    };\r\n  }\r\n\r\n  // We're already on POSIX, no need for any transformations\r\n  return () => process.cwd();\r\n})();\r\n\r\nconst posix = {\r\n  /**\r\n   * path.resolve([from ...], to)\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  resolve(...args) {\r\n    let resolvedPath = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n      const path = i >= 0 ? args[i] : posixCwd();\r\n      validateString(path, `paths[${i}]`);\r\n\r\n      // Skip empty entries\r\n      if (path.length === 0) {\r\n        continue;\r\n      }\r\n\r\n      resolvedPath = `${path}/${resolvedPath}`;\r\n      resolvedAbsolute =\r\n        StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path, but\r\n    // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n    // Normalize the path\r\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\r\n                                   isPosixPathSeparator);\r\n\r\n    if (resolvedAbsolute) {\r\n      return `/${resolvedPath}`;\r\n    }\r\n    return resolvedPath.length > 0 ? resolvedPath : '.';\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n\r\n    if (path.length === 0)\r\n      return '.';\r\n\r\n    const isAbsolute =\r\n      StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    const trailingSeparator =\r\n      StringPrototypeCharCodeAt(path, path.length - 1) === CHAR_FORWARD_SLASH;\r\n\r\n    // Normalize the path\r\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\r\n\r\n    if (path.length === 0) {\r\n      if (isAbsolute)\r\n        return '/';\r\n      return trailingSeparator ? './' : '.';\r\n    }\r\n    if (trailingSeparator)\r\n      path += '/';\r\n\r\n    return isAbsolute ? `/${path}` : path;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {boolean}\r\n   */\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    return path.length > 0 &&\r\n           StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n  },\r\n\r\n  /**\r\n   * @param {...string} args\r\n   * @returns {string}\r\n   */\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n    let joined;\r\n    for (let i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = arg;\r\n        else\r\n          joined += `/${arg}`;\r\n      }\r\n    }\r\n    if (joined === undefined)\r\n      return '.';\r\n    return posix.normalize(joined);\r\n  },\r\n\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @returns {string}\r\n   */\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim leading forward slashes.\r\n    from = posix.resolve(from);\r\n    to = posix.resolve(to);\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromStart = 1;\r\n    const fromEnd = from.length;\r\n    const fromLen = fromEnd - fromStart;\r\n    const toStart = 1;\r\n    const toLen = to.length - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = (fromLen < toLen ? fromLen : toLen);\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = StringPrototypeCharCodeAt(from, fromStart + i);\r\n      if (fromCode !== StringPrototypeCharCodeAt(to, toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_FORWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n    if (i === length) {\r\n      if (toLen > length) {\r\n        if (StringPrototypeCharCodeAt(to, toStart + i) === CHAR_FORWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\r\n          return StringPrototypeSlice(to, toStart + i + 1);\r\n        }\r\n        if (i === 0) {\r\n          // We get here if `from` is the root\r\n          // For example: from='/'; to='/foo'\r\n          return StringPrototypeSlice(to, toStart + i);\r\n        }\r\n      } else if (fromLen > length) {\r\n        if (StringPrototypeCharCodeAt(from, fromStart + i) ===\r\n            CHAR_FORWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\r\n          lastCommonSep = i;\r\n        } else if (i === 0) {\r\n          // We get here if `to` is the root.\r\n          // For example: from='/foo/bar'; to='/'\r\n          lastCommonSep = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to`\r\n    // and `from`.\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd ||\r\n          StringPrototypeCharCodeAt(from, i) === CHAR_FORWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '/..';\r\n      }\r\n    }\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts.\r\n    return `${out}${StringPrototypeSlice(to, toStart + lastCommonSep)}`;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  toNamespacedPath(path) {\r\n    // Non-op on posix systems\r\n    return path;\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    if (path.length === 0)\r\n      return '.';\r\n    const hasRoot = StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    for (let i = path.length - 1; i >= 1; --i) {\r\n      if (StringPrototypeCharCodeAt(path, i) === CHAR_FORWARD_SLASH) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return hasRoot ? '/' : '.';\r\n    if (hasRoot && end === 1)\r\n      return '//';\r\n    return StringPrototypeSlice(path, 0, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {string} [suffix]\r\n   * @returns {string}\r\n   */\r\n  basename(path, suffix) {\r\n    if (suffix !== undefined)\r\n      validateString(suffix, 'ext');\r\n    validateString(path, 'path');\r\n\r\n    let start = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n\r\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\r\n      if (suffix === path)\r\n        return '';\r\n      let extIdx = suffix.length - 1;\r\n      let firstNonSlashEnd = -1;\r\n      for (let i = path.length - 1; i >= 0; --i) {\r\n        const code = StringPrototypeCharCodeAt(path, i);\r\n        if (code === CHAR_FORWARD_SLASH) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === StringPrototypeCharCodeAt(suffix, extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return StringPrototypeSlice(path, start, end);\r\n    }\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n      if (StringPrototypeCharCodeAt(path, i) === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return StringPrototypeSlice(path, start, end);\r\n  },\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {string}\r\n   */\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return StringPrototypeSlice(path, startDot, end);\r\n  },\r\n\r\n  format: FunctionPrototypeBind(_format, null, '/'),\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @returns {{\r\n   *   dir: string;\r\n   *   root: string;\r\n   *   base: string;\r\n   *   name: string;\r\n   *   ext: string;\r\n   *   }}\r\n   */\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n    const isAbsolute =\r\n      StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;\r\n    let start;\r\n    if (isAbsolute) {\r\n      ret.root = '/';\r\n      start = 1;\r\n    } else {\r\n      start = 0;\r\n    }\r\n    let startDot = -1;\r\n    let startPart = 0;\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    let i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    let preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= start; --i) {\r\n      const code = StringPrototypeCharCodeAt(path, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n          startDot === end - 1 &&\r\n          startDot === startPart + 1)) {\r\n        ret.base = ret.name = StringPrototypeSlice(path, start, end);\r\n      } else {\r\n        ret.name = StringPrototypeSlice(path, start, startDot);\r\n        ret.base = StringPrototypeSlice(path, start, end);\r\n        ret.ext = StringPrototypeSlice(path, startDot, end);\r\n      }\r\n    }\r\n\r\n    if (startPart > 0)\r\n      ret.dir = StringPrototypeSlice(path, 0, startPart - 1);\r\n    else if (isAbsolute)\r\n      ret.dir = '/';\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '/',\r\n  delimiter: ':',\r\n  win32: null,\r\n  posix: null,\r\n};\r\n\r\nposix.win32 = win32.win32 = win32;\r\nposix.posix = win32.posix = posix;\r\n\r\n// Legacy internal API, docs-only deprecated: DEP0080\r\nwin32._makeLong = win32.toNamespacedPath;\r\nposix._makeLong = posix.toNamespacedPath;\r\n\r\nmodule.exports = platformIsWin32 ? win32 : posix;\r\n"
  },
  "31": {
    "metadata": {
      "scriptId": "31",
      "url": "node:querystring",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 484,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "577391ab3f70ba30bde6c0a37a934d7feb60120d795cbe4c60dc84dbf9a74814",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 15067,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:querystring"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Query String Utilities\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Array,\r\n  ArrayIsArray,\r\n  Int8Array,\r\n  MathAbs,\r\n  NumberIsFinite,\r\n  ObjectKeys,\r\n  String,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeSlice,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { Buffer } = require('buffer');\r\nconst {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable,\r\n} = require('internal/querystring');\r\nconst QueryString = module.exports = {\r\n  unescapeBuffer,\r\n  // `unescape()` is a JS global, so we need to use a different local name\r\n  unescape: qsUnescape,\r\n\r\n  // `escape()` is a JS global, so we need to use a different local name\r\n  escape: qsEscape,\r\n\r\n  stringify,\r\n  encode: stringify,\r\n\r\n  parse,\r\n  decode: parse,\r\n};\r\n\r\nconst unhexTable = new Int8Array([\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 0 - 15\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 16 - 31\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 32 - 47\r\n  +0, +1, +2, +3, +4, +5, +6, +7, +8, +9, -1, -1, -1, -1, -1, -1, // 48 - 63\r\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 64 - 79\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 80 - 95\r\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 96 - 111\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 112 - 127\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 128 ...\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // ... 255\r\n]);\r\n/**\r\n * A safe fast alternative to decodeURIComponent\r\n * @param {string} s\r\n * @param {boolean} decodeSpaces\r\n * @returns {string}\r\n */\r\nfunction unescapeBuffer(s, decodeSpaces) {\r\n  const out = Buffer.allocUnsafe(s.length);\r\n  let index = 0;\r\n  let outIndex = 0;\r\n  let currentChar;\r\n  let nextChar;\r\n  let hexHigh;\r\n  let hexLow;\r\n  const maxLength = s.length - 2;\r\n  // Flag to know if some hex chars have been decoded\r\n  let hasHex = false;\r\n  while (index < s.length) {\r\n    currentChar = StringPrototypeCharCodeAt(s, index);\r\n    if (currentChar === 43 /* '+' */ && decodeSpaces) {\r\n      out[outIndex++] = 32; // ' '\r\n      index++;\r\n      continue;\r\n    }\r\n    if (currentChar === 37 /* '%' */ && index < maxLength) {\r\n      currentChar = StringPrototypeCharCodeAt(s, ++index);\r\n      hexHigh = unhexTable[currentChar];\r\n      if (!(hexHigh >= 0)) {\r\n        out[outIndex++] = 37; // '%'\r\n        continue;\r\n      } else {\r\n        nextChar = StringPrototypeCharCodeAt(s, ++index);\r\n        hexLow = unhexTable[nextChar];\r\n        if (!(hexLow >= 0)) {\r\n          out[outIndex++] = 37; // '%'\r\n          index--;\r\n        } else {\r\n          hasHex = true;\r\n          currentChar = hexHigh * 16 + hexLow;\r\n        }\r\n      }\r\n    }\r\n    out[outIndex++] = currentChar;\r\n    index++;\r\n  }\r\n  return hasHex ? out.slice(0, outIndex) : out;\r\n}\r\n\r\n/**\r\n * @param {string} s\r\n * @param {boolean} decodeSpaces\r\n * @returns {string}\r\n */\r\nfunction qsUnescape(s, decodeSpaces) {\r\n  try {\r\n    return decodeURIComponent(s);\r\n  } catch {\r\n    return QueryString.unescapeBuffer(s, decodeSpaces).toString();\r\n  }\r\n}\r\n\r\n\r\n// These characters do not need escaping when generating query strings:\r\n// ! - . _ ~\r\n// ' ( ) *\r\n// digits\r\n// alpha (uppercase)\r\n// alpha (lowercase)\r\nconst noEscape = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 80 - 95\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,  // 112 - 127\r\n]);\r\n\r\n/**\r\n * QueryString.escape() replaces encodeURIComponent()\r\n * @see https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4\r\n * @param {any} str\r\n * @returns {string}\r\n */\r\nfunction qsEscape(str) {\r\n  if (typeof str !== 'string') {\r\n    if (typeof str === 'object')\r\n      str = String(str);\r\n    else\r\n      str += '';\r\n  }\r\n\r\n  return encodeStr(str, noEscape, hexTable);\r\n}\r\n\r\n/**\r\n * @param {string | number | bigint | boolean | symbol | undefined | null} v\r\n * @returns {string}\r\n */\r\nfunction stringifyPrimitive(v) {\r\n  if (typeof v === 'string')\r\n    return v;\r\n  if (typeof v === 'number' && NumberIsFinite(v))\r\n    return '' + v;\r\n  if (typeof v === 'bigint')\r\n    return '' + v;\r\n  if (typeof v === 'boolean')\r\n    return v ? 'true' : 'false';\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string | number | bigint | boolean} v\r\n * @param {(v: string) => string} encode\r\n * @returns {string}\r\n */\r\nfunction encodeStringified(v, encode) {\r\n  if (typeof v === 'string')\r\n    return (v.length ? encode(v) : '');\r\n  if (typeof v === 'number' && NumberIsFinite(v)) {\r\n    // Values >= 1e21 automatically switch to scientific notation which requires\r\n    // escaping due to the inclusion of a '+' in the output\r\n    return (MathAbs(v) < 1e21 ? '' + v : encode('' + v));\r\n  }\r\n  if (typeof v === 'bigint')\r\n    return '' + v;\r\n  if (typeof v === 'boolean')\r\n    return v ? 'true' : 'false';\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string | number | boolean | null} v\r\n * @param {(v: string) => string} encode\r\n * @returns {string}\r\n */\r\nfunction encodeStringifiedCustom(v, encode) {\r\n  return encode(stringifyPrimitive(v));\r\n}\r\n\r\n/**\r\n * @param {Record<string, string | number | boolean\r\n * | ReadonlyArray<string | number | boolean> | null>} obj\r\n * @param {string} [sep]\r\n * @param {string} [eq]\r\n * @param {{ encodeURIComponent?: (v: string) => string }} [options]\r\n * @returns {string}\r\n */\r\nfunction stringify(obj, sep, eq, options) {\r\n  sep = sep || '&';\r\n  eq = eq || '=';\r\n\r\n  let encode = QueryString.escape;\r\n  if (options && typeof options.encodeURIComponent === 'function') {\r\n    encode = options.encodeURIComponent;\r\n  }\r\n  const convert =\r\n    (encode === qsEscape ? encodeStringified : encodeStringifiedCustom);\r\n\r\n  if (obj !== null && typeof obj === 'object') {\r\n    const keys = ObjectKeys(obj);\r\n    const len = keys.length;\r\n    let fields = '';\r\n    for (let i = 0; i < len; ++i) {\r\n      const k = keys[i];\r\n      const v = obj[k];\r\n      let ks = convert(k, encode);\r\n      ks += eq;\r\n\r\n      if (ArrayIsArray(v)) {\r\n        const vlen = v.length;\r\n        if (vlen === 0) continue;\r\n        if (fields)\r\n          fields += sep;\r\n        for (let j = 0; j < vlen; ++j) {\r\n          if (j)\r\n            fields += sep;\r\n          fields += ks;\r\n          fields += convert(v[j], encode);\r\n        }\r\n      } else {\r\n        if (fields)\r\n          fields += sep;\r\n        fields += ks;\r\n        fields += convert(v, encode);\r\n      }\r\n    }\r\n    return fields;\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n * @returns {number[]}\r\n */\r\nfunction charCodes(str) {\r\n  if (str.length === 0) return [];\r\n  if (str.length === 1) return [StringPrototypeCharCodeAt(str, 0)];\r\n  const ret = new Array(str.length);\r\n  for (let i = 0; i < str.length; ++i)\r\n    ret[i] = StringPrototypeCharCodeAt(str, i);\r\n  return ret;\r\n}\r\nconst defSepCodes = [38]; // &\r\nconst defEqCodes = [61]; // =\r\n\r\nfunction addKeyVal(obj, key, value, keyEncoded, valEncoded, decode) {\r\n  if (key.length > 0 && keyEncoded)\r\n    key = decodeStr(key, decode);\r\n  if (value.length > 0 && valEncoded)\r\n    value = decodeStr(value, decode);\r\n\r\n  if (obj[key] === undefined) {\r\n    obj[key] = value;\r\n  } else {\r\n    const curValue = obj[key];\r\n    // A simple Array-specific property check is enough here to\r\n    // distinguish from a string value and is faster and still safe\r\n    // since we are generating all of the values being assigned.\r\n    if (curValue.pop)\r\n      curValue[curValue.length] = value;\r\n    else\r\n      obj[key] = [curValue, value];\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a key/val string.\r\n * @param {string} qs\r\n * @param {string} sep\r\n * @param {string} eq\r\n * @param {{\r\n *   maxKeys?: number;\r\n *   decodeURIComponent?(v: string): string;\r\n *   }} [options]\r\n * @returns {Record<string, string | string[]>}\r\n */\r\nfunction parse(qs, sep, eq, options) {\r\n  const obj = { __proto__: null };\r\n\r\n  if (typeof qs !== 'string' || qs.length === 0) {\r\n    return obj;\r\n  }\r\n\r\n  const sepCodes = (!sep ? defSepCodes : charCodes(String(sep)));\r\n  const eqCodes = (!eq ? defEqCodes : charCodes(String(eq)));\r\n  const sepLen = sepCodes.length;\r\n  const eqLen = eqCodes.length;\r\n\r\n  let pairs = 1000;\r\n  if (options && typeof options.maxKeys === 'number') {\r\n    // -1 is used in place of a value like Infinity for meaning\r\n    // \"unlimited pairs\" because of additional checks V8 (at least as of v5.4)\r\n    // has to do when using variables that contain values like Infinity. Since\r\n    // `pairs` is always decremented and checked explicitly for 0, -1 works\r\n    // effectively the same as Infinity, while providing a significant\r\n    // performance boost.\r\n    pairs = (options.maxKeys > 0 ? options.maxKeys : -1);\r\n  }\r\n\r\n  let decode = QueryString.unescape;\r\n  if (options && typeof options.decodeURIComponent === 'function') {\r\n    decode = options.decodeURIComponent;\r\n  }\r\n  const customDecode = (decode !== qsUnescape);\r\n\r\n  let lastPos = 0;\r\n  let sepIdx = 0;\r\n  let eqIdx = 0;\r\n  let key = '';\r\n  let value = '';\r\n  let keyEncoded = customDecode;\r\n  let valEncoded = customDecode;\r\n  const plusChar = (customDecode ? '%20' : ' ');\r\n  let encodeCheck = 0;\r\n  for (let i = 0; i < qs.length; ++i) {\r\n    const code = StringPrototypeCharCodeAt(qs, i);\r\n\r\n    // Try matching key/value pair separator (e.g. '&')\r\n    if (code === sepCodes[sepIdx]) {\r\n      if (++sepIdx === sepLen) {\r\n        // Key/value pair separator match!\r\n        const end = i - sepIdx + 1;\r\n        if (eqIdx < eqLen) {\r\n          // We didn't find the (entire) key/value separator\r\n          if (lastPos < end) {\r\n            // Treat the substring as part of the key instead of the value\r\n            key += StringPrototypeSlice(qs, lastPos, end);\r\n          } else if (key.length === 0) {\r\n            // We saw an empty substring between separators\r\n            if (--pairs === 0)\r\n              return obj;\r\n            lastPos = i + 1;\r\n            sepIdx = eqIdx = 0;\r\n            continue;\r\n          }\r\n        } else if (lastPos < end) {\r\n          value += StringPrototypeSlice(qs, lastPos, end);\r\n        }\r\n\r\n        addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);\r\n\r\n        if (--pairs === 0)\r\n          return obj;\r\n        keyEncoded = valEncoded = customDecode;\r\n        key = value = '';\r\n        encodeCheck = 0;\r\n        lastPos = i + 1;\r\n        sepIdx = eqIdx = 0;\r\n      }\r\n    } else {\r\n      sepIdx = 0;\r\n      // Try matching key/value separator (e.g. '=') if we haven't already\r\n      if (eqIdx < eqLen) {\r\n        if (code === eqCodes[eqIdx]) {\r\n          if (++eqIdx === eqLen) {\r\n            // Key/value separator match!\r\n            const end = i - eqIdx + 1;\r\n            if (lastPos < end)\r\n              key += StringPrototypeSlice(qs, lastPos, end);\r\n            encodeCheck = 0;\r\n            lastPos = i + 1;\r\n          }\r\n          continue;\r\n        } else {\r\n          eqIdx = 0;\r\n          if (!keyEncoded) {\r\n            // Try to match an (valid) encoded byte once to minimize unnecessary\r\n            // calls to string decoding functions\r\n            if (code === 37/* % */) {\r\n              encodeCheck = 1;\r\n              continue;\r\n            } else if (encodeCheck > 0) {\r\n              if (isHexTable[code] === 1) {\r\n                if (++encodeCheck === 3)\r\n                  keyEncoded = true;\r\n                continue;\r\n              } else {\r\n                encodeCheck = 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (code === 43/* + */) {\r\n          if (lastPos < i)\r\n            key += StringPrototypeSlice(qs, lastPos, i);\r\n          key += plusChar;\r\n          lastPos = i + 1;\r\n          continue;\r\n        }\r\n      }\r\n      if (code === 43/* + */) {\r\n        if (lastPos < i)\r\n          value += StringPrototypeSlice(qs, lastPos, i);\r\n        value += plusChar;\r\n        lastPos = i + 1;\r\n      } else if (!valEncoded) {\r\n        // Try to match an (valid) encoded byte (once) to minimize unnecessary\r\n        // calls to string decoding functions\r\n        if (code === 37/* % */) {\r\n          encodeCheck = 1;\r\n        } else if (encodeCheck > 0) {\r\n          if (isHexTable[code] === 1) {\r\n            if (++encodeCheck === 3)\r\n              valEncoded = true;\r\n          } else {\r\n            encodeCheck = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deal with any leftover key or value data\r\n  if (lastPos < qs.length) {\r\n    if (eqIdx < eqLen)\r\n      key += StringPrototypeSlice(qs, lastPos);\r\n    else if (sepIdx < sepLen)\r\n      value += StringPrototypeSlice(qs, lastPos);\r\n  } else if (eqIdx === 0 && key.length === 0) {\r\n    // We ended on an empty substring\r\n    return obj;\r\n  }\r\n\r\n  addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * V8 does not optimize functions with try-catch blocks, so we isolate them here\r\n * to minimize the damage (Note: no longer true as of V8 5.4 -- but still will\r\n * not be inlined).\r\n * @param {string} s\r\n * @param {(v: string) => string} decoder\r\n * @returns {string}\r\n */\r\nfunction decodeStr(s, decoder) {\r\n  try {\r\n    return decoder(s);\r\n  } catch {\r\n    return QueryString.unescape(s, true);\r\n  }\r\n}\r\n"
  },
  "32": {
    "metadata": {
      "scriptId": "32",
      "url": "node:internal/process/task_queues",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 173,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c7fdefcb4ea307b3a57830a80a6851717d37210c92f50b1bd6b5a46a5ca293b6",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4458,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/task_queues"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n  FunctionPrototypeBind,\r\n} = primordials;\r\n\r\nconst {\r\n  // For easy access to the nextTick state in the C++ land,\r\n  // and to avoid unnecessary calls into JS land.\r\n  tickInfo,\r\n  // Used to run V8's micro task queue.\r\n  runMicrotasks,\r\n  setTickCallback,\r\n  enqueueMicrotask,\r\n} = internalBinding('task_queue');\r\n\r\nconst {\r\n  setHasRejectionToWarn,\r\n  hasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections,\r\n} = require('internal/process/promises');\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n  symbols: { async_id_symbol, trigger_async_id_symbol },\r\n} = require('internal/async_hooks');\r\nconst FixedQueue = require('internal/fixed_queue');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst { AsyncResource } = require('async_hooks');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasTickScheduled = 0;\r\n\r\nfunction hasTickScheduled() {\r\n  return tickInfo[kHasTickScheduled] === 1;\r\n}\r\n\r\nfunction setHasTickScheduled(value) {\r\n  tickInfo[kHasTickScheduled] = value ? 1 : 0;\r\n}\r\n\r\nconst queue = new FixedQueue();\r\n\r\n// Should be in sync with RunNextTicksNative in node_task_queue.cc\r\nfunction runNextTicks() {\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    runMicrotasks();\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    return;\r\n\r\n  processTicksAndRejections();\r\n}\r\n\r\nfunction processTicksAndRejections() {\r\n  let tock;\r\n  do {\r\n    while ((tock = queue.shift()) !== null) {\r\n      const asyncId = tock[async_id_symbol];\r\n      emitBefore(asyncId, tock[trigger_async_id_symbol], tock);\r\n\r\n      try {\r\n        const callback = tock.callback;\r\n        if (tock.args === undefined) {\r\n          callback();\r\n        } else {\r\n          const args = tock.args;\r\n          switch (args.length) {\r\n            case 1: callback(args[0]); break;\r\n            case 2: callback(args[0], args[1]); break;\r\n            case 3: callback(args[0], args[1], args[2]); break;\r\n            case 4: callback(args[0], args[1], args[2], args[3]); break;\r\n            default: callback(...args);\r\n          }\r\n        }\r\n      } finally {\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n    runMicrotasks();\r\n  } while (!queue.isEmpty() || processPromiseRejections());\r\n  setHasTickScheduled(false);\r\n  setHasRejectionToWarn(false);\r\n}\r\n\r\n// `nextTick()` will not enqueue any callback when the process is about to\r\n// exit since the callback would not have a chance to be executed.\r\nfunction nextTick(callback) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  if (process._exiting)\r\n    return;\r\n\r\n  let args;\r\n  switch (arguments.length) {\r\n    case 1: break;\r\n    case 2: args = [arguments[1]]; break;\r\n    case 3: args = [arguments[1], arguments[2]]; break;\r\n    case 4: args = [arguments[1], arguments[2], arguments[3]]; break;\r\n    default:\r\n      args = new Array(arguments.length - 1);\r\n      for (let i = 1; i < arguments.length; i++)\r\n        args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (queue.isEmpty())\r\n    setHasTickScheduled(true);\r\n  const asyncId = newAsyncId();\r\n  const triggerAsyncId = getDefaultTriggerAsyncId();\r\n  const tickObject = {\r\n    [async_id_symbol]: asyncId,\r\n    [trigger_async_id_symbol]: triggerAsyncId,\r\n    callback,\r\n    args,\r\n  };\r\n  if (initHooksExist())\r\n    emitInit(asyncId, 'TickObject', triggerAsyncId, tickObject);\r\n  queue.push(tickObject);\r\n}\r\n\r\nfunction runMicrotask() {\r\n  this.runInAsyncScope(() => {\r\n    const callback = this.callback;\r\n    try {\r\n      callback();\r\n    } finally {\r\n      this.emitDestroy();\r\n    }\r\n  });\r\n}\r\n\r\nconst defaultMicrotaskResourceOpts = { requireManualDestroy: true };\r\n\r\nfunction queueMicrotask(callback) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  const asyncResource = new AsyncResource(\r\n    'Microtask',\r\n    defaultMicrotaskResourceOpts,\r\n  );\r\n  asyncResource.callback = callback;\r\n\r\n  enqueueMicrotask(FunctionPrototypeBind(runMicrotask, asyncResource));\r\n}\r\n\r\nmodule.exports = {\r\n  setupTaskQueue() {\r\n    // Sets the per-isolate promise rejection callback\r\n    listenForRejections();\r\n    // Sets the callback to be run in every tick.\r\n    setTickCallback(processTicksAndRejections);\r\n    return {\r\n      nextTick,\r\n      runNextTicks,\r\n    };\r\n  },\r\n  queueMicrotask,\r\n};\r\n"
  },
  "33": {
    "metadata": {
      "scriptId": "33",
      "url": "node:internal/process/promises",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 491,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "32d3eb8ccd8b91b3780b90ca6b4fa043d8b0705073e0ef525deb8d578bd8f18b",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 14085,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/promises"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  Error,\r\n  ObjectPrototypeHasOwnProperty,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst {\r\n  tickInfo,\r\n  promiseRejectEvents: {\r\n    kPromiseRejectWithNoHandler,\r\n    kPromiseHandlerAddedAfterReject,\r\n    kPromiseRejectAfterResolved,\r\n    kPromiseResolveAfterResolved,\r\n  },\r\n  setPromiseRejectCallback,\r\n} = internalBinding('task_queue');\r\n\r\nconst { deprecate } = require('internal/util');\r\n\r\nconst {\r\n  noSideEffectsToString,\r\n  triggerUncaughtException,\r\n  exitCodes: { kGenericUserError },\r\n} = internalBinding('errors');\r\n\r\nconst {\r\n  pushAsyncContext,\r\n  popAsyncContext,\r\n  symbols: {\r\n    async_id_symbol: kAsyncIdSymbol,\r\n    trigger_async_id_symbol: kTriggerAsyncIdSymbol,\r\n  },\r\n} = require('internal/async_hooks');\r\nconst { isErrorStackTraceLimitWritable } = require('internal/errors');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasRejectionToWarn = 1;\r\n\r\n// By default true because in cases where process is not a global\r\n// it is not possible to determine if the user has added a listener\r\n// to the process object.\r\nlet hasMultipleResolvesListener = true;\r\n\r\nif (process.on) {\r\n  hasMultipleResolvesListener = process.listenerCount('multipleResolves') !== 0;\r\n\r\n  process.on('newListener', (eventName) => {\r\n    if (eventName === 'multipleResolves') {\r\n      hasMultipleResolvesListener = true;\r\n    }\r\n  });\r\n\r\n  process.on('removeListener', (eventName) => {\r\n    if (eventName === 'multipleResolves') {\r\n      hasMultipleResolvesListener = process.listenerCount('multipleResolves') !== 0;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Errors & Warnings\r\n */\r\n\r\nclass UnhandledPromiseRejection extends Error {\r\n  code = 'ERR_UNHANDLED_REJECTION';\r\n  name = 'UnhandledPromiseRejection';\r\n  /**\r\n   * @param {Error} reason\r\n   */\r\n  constructor(reason) {\r\n    super('This error originated either by throwing inside of an ' +\r\n    'async function without a catch block, or by rejecting a promise which ' +\r\n    'was not handled with .catch(). The promise rejected with the reason \"' +\r\n    noSideEffectsToString(reason) + '\".');\r\n  }\r\n}\r\n\r\nclass UnhandledPromiseRejectionWarning extends Error {\r\n  name = 'UnhandledPromiseRejectionWarning';\r\n  /**\r\n   * @param {number} uid\r\n   */\r\n  constructor(uid) {\r\n    const message = 'Unhandled promise rejection. This error originated either by ' +\r\n    'throwing inside of an async function without a catch block, ' +\r\n    'or by rejecting a promise which was not handled with .catch(). ' +\r\n    'To terminate the node process on unhandled promise ' +\r\n    'rejection, use the CLI flag `--unhandled-rejections=strict` (see ' +\r\n    'https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). ' +\r\n    `(rejection id: ${uid})`;\r\n\r\n    // UnhandledPromiseRejectionWarning will get the stack trace from the\r\n    // reason, so we can disable the stack trace limit temporarily for better\r\n    // performance.\r\n    if (isErrorStackTraceLimitWritable()) {\r\n      const stackTraceLimit = Error.stackTraceLimit;\r\n      Error.stackTraceLimit = 0;\r\n      super(message);\r\n      Error.stackTraceLimit = stackTraceLimit;\r\n    } else {\r\n      super(message);\r\n    }\r\n  }\r\n}\r\n\r\nclass PromiseRejectionHandledWarning extends Error {\r\n  name = 'PromiseRejectionHandledWarning';\r\n\r\n  /**\r\n   * @param {number} uid\r\n   */\r\n  constructor(uid) {\r\n    super(`Promise rejection was handled asynchronously (rejection id: ${uid})`);\r\n    this.id = uid;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef PromiseInfo\r\n * @property {*} reason the reason for the rejection\r\n * @property {number} uid the unique id of the promise\r\n * @property {boolean} warned whether the rejection has been warned\r\n * @property {object} [domain] the domain the promise was created in\r\n */\r\n\r\n/**\r\n * @type {WeakMap<Promise, PromiseInfo>}\r\n */\r\nconst maybeUnhandledPromises = new SafeWeakMap();\r\n\r\n/**\r\n * Using a Mp causes the promise to be referenced at least for one tick.\r\n * @type {Map<Promise, PromiseInfo>}\r\n */\r\nlet pendingUnhandledRejections = new SafeMap();\r\n\r\n/**\r\n * @type {Array<{promise: Promise, warning: Error}>}\r\n */\r\nconst asyncHandledRejections = [];\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet lastPromiseId = 0;\r\n\r\n/**\r\n * @param {boolean} value\r\n */\r\nfunction setHasRejectionToWarn(value) {\r\n  tickInfo[kHasRejectionToWarn] = value ? 1 : 0;\r\n}\r\n\r\n/**\r\n * @returns {boolean}\r\n */\r\nfunction hasRejectionToWarn() {\r\n  return tickInfo[kHasRejectionToWarn] === 1;\r\n}\r\n\r\n/**\r\n * @param {string|Error} obj\r\n * @returns {obj is Error}\r\n */\r\nfunction isErrorLike(obj) {\r\n  return typeof obj === 'object' &&\r\n         obj !== null &&\r\n         ObjectPrototypeHasOwnProperty(obj, 'stack');\r\n}\r\n\r\n/**\r\n * @param {0|1|2|3} type\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction promiseRejectHandler(type, promise, reason) {\r\n  if (unhandledRejectionsMode === undefined) {\r\n    unhandledRejectionsMode = getUnhandledRejectionsMode();\r\n  }\r\n  switch (type) {\r\n    case kPromiseRejectWithNoHandler: // 0\r\n      unhandledRejection(promise, reason);\r\n      break;\r\n    case kPromiseHandlerAddedAfterReject: // 1\r\n      handledRejection(promise);\r\n      break;\r\n    case kPromiseRejectAfterResolved: // 2\r\n      if (hasMultipleResolvesListener) {\r\n        resolveErrorReject(promise, reason);\r\n      }\r\n      break;\r\n    case kPromiseResolveAfterResolved: // 3\r\n      if (hasMultipleResolvesListener) {\r\n        resolveErrorResolve(promise, reason);\r\n      }\r\n      break;\r\n  }\r\n}\r\n\r\nconst multipleResolvesDeprecate = deprecate(\r\n  () => {},\r\n  'The multipleResolves event has been deprecated.',\r\n  'DEP0160',\r\n);\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction resolveErrorResolve(promise, reason) {\r\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\r\n  // the executed promise.\r\n  process.nextTick(() => {\r\n    // Emit the multipleResolves event.\r\n    // This is a deprecated event, so we have to check if it's being listened to.\r\n    if (process.emit('multipleResolves', 'resolve', promise, reason)) {\r\n      // If the event is being listened to, emit a deprecation warning.\r\n      multipleResolvesDeprecate();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction resolveErrorReject(promise, reason) {\r\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\r\n  // the executed promise.\r\n  process.nextTick(() => {\r\n    if (process.emit('multipleResolves', 'reject', promise, reason)) {\r\n      multipleResolvesDeprecate();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {PromiseInfo} promiseInfo\r\n * @returns {boolean}\r\n */\r\nconst emitUnhandledRejection = (promise, promiseInfo) => {\r\n  return promiseInfo.domain ?\r\n    promiseInfo.domain.emit('error', promiseInfo.reason) :\r\n    process.emit('unhandledRejection', promiseInfo.reason, promise);\r\n};\r\n\r\n/**\r\n * @param {Promise} promise\r\n * @param {Error} reason\r\n */\r\nfunction unhandledRejection(promise, reason) {\r\n  pendingUnhandledRejections.set(promise, {\r\n    reason,\r\n    uid: ++lastPromiseId,\r\n    warned: false,\r\n    domain: process.domain,\r\n  });\r\n  setHasRejectionToWarn(true);\r\n}\r\n\r\n/**\r\n * @param {Promise} promise\r\n */\r\nfunction handledRejection(promise) {\r\n  if (pendingUnhandledRejections.has(promise)) {\r\n    pendingUnhandledRejections.delete(promise);\r\n    return;\r\n  }\r\n  const promiseInfo = maybeUnhandledPromises.get(promise);\r\n  if (promiseInfo !== undefined) {\r\n    maybeUnhandledPromises.delete(promise);\r\n    if (promiseInfo.warned) {\r\n      // Generate the warning object early to get a good stack trace.\r\n      const warning = new PromiseRejectionHandledWarning(promiseInfo.uid);\r\n      ArrayPrototypePush(asyncHandledRejections, { promise, warning });\r\n      setHasRejectionToWarn(true);\r\n    }\r\n  }\r\n}\r\n\r\nconst unhandledRejectionErrName = UnhandledPromiseRejectionWarning.name;\r\n\r\n/**\r\n * @param {PromiseInfo} promiseInfo\r\n */\r\nfunction emitUnhandledRejectionWarning(promiseInfo) {\r\n  const warning = new UnhandledPromiseRejectionWarning(promiseInfo.uid);\r\n  const reason = promiseInfo.reason;\r\n  try {\r\n    if (isErrorLike(reason)) {\r\n      warning.stack = reason.stack;\r\n      process.emitWarning(reason.stack, unhandledRejectionErrName);\r\n    } else {\r\n      process.emitWarning(\r\n        noSideEffectsToString(reason), unhandledRejectionErrName);\r\n    }\r\n  } catch {\r\n    try {\r\n      process.emitWarning(\r\n        noSideEffectsToString(reason), unhandledRejectionErrName);\r\n    } catch {\r\n      // Ignore.\r\n    }\r\n  }\r\n\r\n  process.emitWarning(warning);\r\n}\r\n\r\n/**\r\n * @callback UnhandledRejectionsModeHandler\r\n * @param {Promise} promise\r\n * @param {PromiseInfo} promiseInfo\r\n * @param {number} [promiseAsyncId]\r\n * @returns {boolean}\r\n */\r\n\r\n/**\r\n * The mode of unhandled rejections.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nlet unhandledRejectionsMode;\r\n\r\n/**\r\n * --unhandled-rejections=strict:\r\n * Emit 'uncaughtException'. If it's not handled, print the error to stderr\r\n * and exit the process.\r\n * Otherwise, emit 'unhandledRejection'. If 'unhandledRejection' is not\r\n * handled, emit 'UnhandledPromiseRejectionWarning'.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction strictUnhandledRejectionsMode(promise, promiseInfo, promiseAsyncId) {\r\n  const reason = promiseInfo.reason;\r\n  const err = isErrorLike(reason) ?\r\n    reason : new UnhandledPromiseRejection(reason);\r\n  // This destroys the async stack, don't clear it after\r\n  triggerUncaughtException(err, true /* fromPromise */);\r\n  if (promiseAsyncId === undefined) {\r\n    pushAsyncContext(\r\n      promise[kAsyncIdSymbol],\r\n      promise[kTriggerAsyncIdSymbol],\r\n      promise,\r\n    );\r\n  }\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) emitUnhandledRejectionWarning(promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=none:\r\n * Emit 'unhandledRejection', but do not emit any warning.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction ignoreUnhandledRejectionsMode(promise, promiseInfo) {\r\n  emitUnhandledRejection(promise, promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=warn:\r\n * Emit 'unhandledRejection', then emit 'UnhandledPromiseRejectionWarning'.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction alwaysWarnUnhandledRejectionsMode(promise, promiseInfo) {\r\n  emitUnhandledRejection(promise, promiseInfo);\r\n  emitUnhandledRejectionWarning(promiseInfo);\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=throw:\r\n * Emit 'unhandledRejection', if it's unhandled, emit\r\n * 'uncaughtException'. If it's not handled, print the error to stderr\r\n * and exit the process.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction throwUnhandledRejectionsMode(promise, promiseInfo) {\r\n  const reason = promiseInfo.reason;\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) {\r\n    const err = isErrorLike(reason) ?\r\n      reason :\r\n      new UnhandledPromiseRejection(reason);\r\n    // This destroys the async stack, don't clear it after\r\n    triggerUncaughtException(err, true /* fromPromise */);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * --unhandled-rejections=warn-with-error-code:\r\n * Emit 'unhandledRejection', if it's unhandled, emit\r\n * 'UnhandledPromiseRejectionWarning', then set process exit code to 1.\r\n * @type {UnhandledRejectionsModeHandler}\r\n */\r\nfunction warnWithErrorCodeUnhandledRejectionsMode(promise, promiseInfo) {\r\n  const handled = emitUnhandledRejection(promise, promiseInfo);\r\n  if (!handled) {\r\n    emitUnhandledRejectionWarning(promiseInfo);\r\n    process.exitCode = kGenericUserError;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @returns {UnhandledRejectionsModeHandler}\r\n */\r\nfunction getUnhandledRejectionsMode() {\r\n  const { getOptionValue } = require('internal/options');\r\n  switch (getOptionValue('--unhandled-rejections')) {\r\n    case 'none':\r\n      return ignoreUnhandledRejectionsMode;\r\n    case 'warn':\r\n      return alwaysWarnUnhandledRejectionsMode;\r\n    case 'strict':\r\n      return strictUnhandledRejectionsMode;\r\n    case 'throw':\r\n      return throwUnhandledRejectionsMode;\r\n    case 'warn-with-error-code':\r\n      return warnWithErrorCodeUnhandledRejectionsMode;\r\n    default:\r\n      return throwUnhandledRejectionsMode;\r\n  }\r\n}\r\n\r\n// If this method returns true, we've executed user code or triggered\r\n// a warning to be emitted which requires the microtask and next tick\r\n// queues to be drained again.\r\nfunction processPromiseRejections() {\r\n  let maybeScheduledTicksOrMicrotasks = asyncHandledRejections.length > 0;\r\n\r\n  while (asyncHandledRejections.length !== 0) {\r\n    const { promise, warning } = ArrayPrototypeShift(asyncHandledRejections);\r\n    if (!process.emit('rejectionHandled', promise)) {\r\n      process.emitWarning(warning);\r\n    }\r\n  }\r\n\r\n  let needPop = true;\r\n  let promiseAsyncId;\r\n\r\n  const pending = pendingUnhandledRejections;\r\n  pendingUnhandledRejections = new SafeMap();\r\n\r\n  for (const { 0: promise, 1: promiseInfo } of pending.entries()) {\r\n    maybeUnhandledPromises.set(promise, promiseInfo);\r\n\r\n    promiseInfo.warned = true;\r\n\r\n    // We need to check if async_hooks are enabled\r\n    // don't use enabledHooksExist as a Promise could\r\n    // come from a vm.* context and not have an async id\r\n    promiseAsyncId = promise[kAsyncIdSymbol];\r\n    if (promiseAsyncId !== undefined) {\r\n      pushAsyncContext(\r\n        promiseAsyncId,\r\n        promise[kTriggerAsyncIdSymbol],\r\n        promise,\r\n      );\r\n    }\r\n\r\n    try {\r\n      needPop = unhandledRejectionsMode(promise, promiseInfo, promiseAsyncId);\r\n    } finally {\r\n      needPop &&\r\n      promiseAsyncId !== undefined &&\r\n      popAsyncContext(promiseAsyncId);\r\n    }\r\n    maybeScheduledTicksOrMicrotasks = true;\r\n  }\r\n  return maybeScheduledTicksOrMicrotasks ||\r\n         pendingUnhandledRejections.size !== 0;\r\n}\r\n\r\nfunction listenForRejections() {\r\n  setPromiseRejectCallback(promiseRejectHandler);\r\n}\r\n\r\nmodule.exports = {\r\n  hasRejectionToWarn,\r\n  setHasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections,\r\n};\r\n"
  },
  "34": {
    "metadata": {
      "scriptId": "34",
      "url": "node:internal/fixed_queue",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 118,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c5a69bb9ab52fc28f80521fd1414890a5f3a7a8a51bfc335695506e1b3de4707",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4326,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/fixed_queue"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  Array,\r\n} = primordials;\r\n\r\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\r\nconst kSize = 2048;\r\nconst kMask = kSize - 1;\r\n\r\n// The FixedQueue is implemented as a singly-linked list of fixed-size\r\n// circular buffers. It looks something like this:\r\n//\r\n//  head                                                       tail\r\n//    |                                                          |\r\n//    v                                                          v\r\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\r\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\r\n// +-----------+               +-----------+                  +-----------+\r\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |       bottom --> |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |    ...    |               |    ...    |                  |    ...    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |  [empty]  | <-- top       |   item    |                  |   item    |\r\n// |  [empty]  |               |   item    |                  |   item    |\r\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\r\n// +-----------+               +-----------+                  +-----------+\r\n//\r\n// Or, if there is only one circular buffer, it looks something\r\n// like either of these:\r\n//\r\n//  head   tail                                 head   tail\r\n//    |     |                                     |     |\r\n//    v     v                                     v     v\r\n// +-----------+                               +-----------+\r\n// |  [null]   |                               |  [null]   |\r\n// +-----------+                               +-----------+\r\n// |  [empty]  |                               |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// |   item    | <-- bottom            top --> |  [empty]  |\r\n// |   item    |                               |  [empty]  |\r\n// |  [empty]  | <-- top            bottom --> |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// +-----------+                               +-----------+\r\n//\r\n// Adding a value means moving `top` forward by one, removing means\r\n// moving `bottom` forward by one. After reaching the end, the queue\r\n// wraps around.\r\n//\r\n// When `top === bottom` the current queue is empty and when\r\n// `top + 1 === bottom` it's full. This wastes a single space of storage\r\n// but allows much quicker checks.\r\n\r\nclass FixedCircularBuffer {\r\n  constructor() {\r\n    this.bottom = 0;\r\n    this.top = 0;\r\n    this.list = new Array(kSize);\r\n    this.next = null;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.top === this.bottom;\r\n  }\r\n\r\n  isFull() {\r\n    return ((this.top + 1) & kMask) === this.bottom;\r\n  }\r\n\r\n  push(data) {\r\n    this.list[this.top] = data;\r\n    this.top = (this.top + 1) & kMask;\r\n  }\r\n\r\n  shift() {\r\n    const nextItem = this.list[this.bottom];\r\n    if (nextItem === undefined)\r\n      return null;\r\n    this.list[this.bottom] = undefined;\r\n    this.bottom = (this.bottom + 1) & kMask;\r\n    return nextItem;\r\n  }\r\n}\r\n\r\nmodule.exports = class FixedQueue {\r\n  constructor() {\r\n    this.head = this.tail = new FixedCircularBuffer();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.head.isEmpty();\r\n  }\r\n\r\n  push(data) {\r\n    if (this.head.isFull()) {\r\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\r\n      // and sets it as the new main queue.\r\n      this.head = this.head.next = new FixedCircularBuffer();\r\n    }\r\n    this.head.push(data);\r\n  }\r\n\r\n  shift() {\r\n    const tail = this.tail;\r\n    const next = tail.shift();\r\n    if (tail.isEmpty() && tail.next !== null) {\r\n      // If there is another queue, it forms the new tail.\r\n      this.tail = tail.next;\r\n      tail.next = null;\r\n    }\r\n    return next;\r\n  }\r\n};\r\n"
  },
  "35": {
    "metadata": {
      "scriptId": "35",
      "url": "node:async_hooks",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 384,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "c9c963f1b853b4bc8801a1491e797ea2422dd655fb787dd3fc94aae53887c716",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10679,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:async_hooks"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  FunctionPrototypeBind,\r\n  NumberIsSafeInteger,\r\n  ObjectDefineProperties,\r\n  ObjectFreeze,\r\n  ObjectIs,\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_ASYNC_CALLBACK,\r\n  ERR_ASYNC_TYPE,\r\n  ERR_INVALID_ASYNC_ID,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  deprecate,\r\n  kEmptyObject,\r\n} = require('internal/util');\r\nconst {\r\n  validateFunction,\r\n  validateString,\r\n} = require('internal/validators');\r\nconst internal_async_hooks = require('internal/async_hooks');\r\n\r\n// Get functions\r\n// For userland AsyncResources, make sure to emit a destroy event when the\r\n// resource gets gced.\r\nconst { registerDestroyHook } = internal_async_hooks;\r\nconst {\r\n  asyncWrap,\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  // Private API\r\n  hasAsyncIdStack,\r\n  getHookArrays,\r\n  enableHooks,\r\n  disableHooks,\r\n  updatePromiseHookMode,\r\n  executionAsyncResource,\r\n  // Internal Embedder API\r\n  newAsyncId,\r\n  getDefaultTriggerAsyncId,\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n  enabledHooksExist,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n} = internal_async_hooks;\r\n\r\n// Get symbols\r\nconst {\r\n  async_id_symbol, trigger_async_id_symbol,\r\n  init_symbol, before_symbol, after_symbol, destroy_symbol,\r\n  promise_resolve_symbol,\r\n} = internal_async_hooks.symbols;\r\n\r\n// Get constants\r\nconst {\r\n  kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n} = internal_async_hooks.constants;\r\n\r\n// Listener API //\r\n\r\nclass AsyncHook {\r\n  constructor({ init, before, after, destroy, promiseResolve }) {\r\n    if (init !== undefined && typeof init !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.init');\r\n    if (before !== undefined && typeof before !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.before');\r\n    if (after !== undefined && typeof after !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.after');\r\n    if (destroy !== undefined && typeof destroy !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.destroy');\r\n    if (promiseResolve !== undefined && typeof promiseResolve !== 'function')\r\n      throw new ERR_ASYNC_CALLBACK('hook.promiseResolve');\r\n\r\n    this[init_symbol] = init;\r\n    this[before_symbol] = before;\r\n    this[after_symbol] = after;\r\n    this[destroy_symbol] = destroy;\r\n    this[promise_resolve_symbol] = promiseResolve;\r\n  }\r\n\r\n  enable() {\r\n    // The set of callbacks for a hook should be the same regardless of whether\r\n    // enable()/disable() are run during their execution. The following\r\n    // references are reassigned to the tmp arrays if a hook is currently being\r\n    // processed.\r\n    const { 0: hooks_array, 1: hook_fields } = getHookArrays();\r\n\r\n    // Each hook is only allowed to be added once.\r\n    if (ArrayPrototypeIncludes(hooks_array, this))\r\n      return this;\r\n\r\n    const prev_kTotals = hook_fields[kTotals];\r\n\r\n    // createHook() has already enforced that the callbacks are all functions,\r\n    // so here simply increment the count of whether each callbacks exists or\r\n    // not.\r\n    hook_fields[kTotals] = hook_fields[kInit] += +!!this[init_symbol];\r\n    hook_fields[kTotals] += hook_fields[kBefore] += +!!this[before_symbol];\r\n    hook_fields[kTotals] += hook_fields[kAfter] += +!!this[after_symbol];\r\n    hook_fields[kTotals] += hook_fields[kDestroy] += +!!this[destroy_symbol];\r\n    hook_fields[kTotals] +=\r\n        hook_fields[kPromiseResolve] += +!!this[promise_resolve_symbol];\r\n    ArrayPrototypePush(hooks_array, this);\r\n\r\n    if (prev_kTotals === 0 && hook_fields[kTotals] > 0) {\r\n      enableHooks();\r\n    }\r\n\r\n    updatePromiseHookMode();\r\n\r\n    return this;\r\n  }\r\n\r\n  disable() {\r\n    const { 0: hooks_array, 1: hook_fields } = getHookArrays();\r\n\r\n    const index = ArrayPrototypeIndexOf(hooks_array, this);\r\n    if (index === -1)\r\n      return this;\r\n\r\n    const prev_kTotals = hook_fields[kTotals];\r\n\r\n    hook_fields[kTotals] = hook_fields[kInit] -= +!!this[init_symbol];\r\n    hook_fields[kTotals] += hook_fields[kBefore] -= +!!this[before_symbol];\r\n    hook_fields[kTotals] += hook_fields[kAfter] -= +!!this[after_symbol];\r\n    hook_fields[kTotals] += hook_fields[kDestroy] -= +!!this[destroy_symbol];\r\n    hook_fields[kTotals] +=\r\n        hook_fields[kPromiseResolve] -= +!!this[promise_resolve_symbol];\r\n    ArrayPrototypeSplice(hooks_array, index, 1);\r\n\r\n    if (prev_kTotals > 0 && hook_fields[kTotals] === 0) {\r\n      disableHooks();\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nfunction createHook(fns) {\r\n  return new AsyncHook(fns);\r\n}\r\n\r\n\r\n// Embedder API //\r\n\r\nconst destroyedSymbol = Symbol('destroyed');\r\n\r\nclass AsyncResource {\r\n  constructor(type, opts = kEmptyObject) {\r\n    validateString(type, 'type');\r\n\r\n    let triggerAsyncId = opts;\r\n    let requireManualDestroy = false;\r\n    if (typeof opts !== 'number') {\r\n      triggerAsyncId = opts.triggerAsyncId === undefined ?\r\n        getDefaultTriggerAsyncId() : opts.triggerAsyncId;\r\n      requireManualDestroy = !!opts.requireManualDestroy;\r\n    }\r\n\r\n    // Unlike emitInitScript, AsyncResource doesn't supports null as the\r\n    // triggerAsyncId.\r\n    if (!NumberIsSafeInteger(triggerAsyncId) || triggerAsyncId < -1) {\r\n      throw new ERR_INVALID_ASYNC_ID('triggerAsyncId', triggerAsyncId);\r\n    }\r\n\r\n    const asyncId = newAsyncId();\r\n    this[async_id_symbol] = asyncId;\r\n    this[trigger_async_id_symbol] = triggerAsyncId;\r\n\r\n    if (initHooksExist()) {\r\n      if (enabledHooksExist() && type.length === 0) {\r\n        throw new ERR_ASYNC_TYPE(type);\r\n      }\r\n\r\n      emitInit(asyncId, type, triggerAsyncId, this);\r\n    }\r\n\r\n    if (!requireManualDestroy && destroyHooksExist()) {\r\n      // This prop name (destroyed) has to be synchronized with C++\r\n      const destroyed = { destroyed: false };\r\n      this[destroyedSymbol] = destroyed;\r\n      registerDestroyHook(this, asyncId, destroyed);\r\n    }\r\n  }\r\n\r\n  runInAsyncScope(fn, thisArg, ...args) {\r\n    const asyncId = this[async_id_symbol];\r\n    emitBefore(asyncId, this[trigger_async_id_symbol], this);\r\n\r\n    try {\r\n      const ret =\r\n        ReflectApply(fn, thisArg, args);\r\n\r\n      return ret;\r\n    } finally {\r\n      if (hasAsyncIdStack())\r\n        emitAfter(asyncId);\r\n    }\r\n  }\r\n\r\n  emitDestroy() {\r\n    if (this[destroyedSymbol] !== undefined) {\r\n      this[destroyedSymbol].destroyed = true;\r\n    }\r\n    emitDestroy(this[async_id_symbol]);\r\n    return this;\r\n  }\r\n\r\n  asyncId() {\r\n    return this[async_id_symbol];\r\n  }\r\n\r\n  triggerAsyncId() {\r\n    return this[trigger_async_id_symbol];\r\n  }\r\n\r\n  bind(fn, thisArg) {\r\n    validateFunction(fn, 'fn');\r\n    let bound;\r\n    if (thisArg === undefined) {\r\n      const resource = this;\r\n      bound = function(...args) {\r\n        ArrayPrototypeUnshift(args, fn, this);\r\n        return ReflectApply(resource.runInAsyncScope, resource, args);\r\n      };\r\n    } else {\r\n      bound = FunctionPrototypeBind(this.runInAsyncScope, this, fn, thisArg);\r\n    }\r\n    let self = this;\r\n    ObjectDefineProperties(bound, {\r\n      'length': {\r\n        __proto__: null,\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: fn.length,\r\n        writable: false,\r\n      },\r\n      'asyncResource': {\r\n        __proto__: null,\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: deprecate(function() {\r\n          return self;\r\n        }, 'The asyncResource property on bound functions is deprecated', 'DEP0172'),\r\n        set: deprecate(function(val) {\r\n          self = val;\r\n        }, 'The asyncResource property on bound functions is deprecated', 'DEP0172'),\r\n      },\r\n    });\r\n    return bound;\r\n  }\r\n\r\n  static bind(fn, type, thisArg) {\r\n    type = type || fn.name;\r\n    return (new AsyncResource(type || 'bound-anonymous-fn')).bind(fn, thisArg);\r\n  }\r\n}\r\n\r\nconst storageList = [];\r\nconst storageHook = createHook({\r\n  init(asyncId, type, triggerAsyncId, resource) {\r\n    const currentResource = executionAsyncResource();\r\n    // Value of currentResource is always a non null object\r\n    for (let i = 0; i < storageList.length; ++i) {\r\n      storageList[i]._propagate(resource, currentResource, type);\r\n    }\r\n  },\r\n});\r\n\r\nclass AsyncLocalStorage {\r\n  constructor() {\r\n    this.kResourceStore = Symbol('kResourceStore');\r\n    this.enabled = false;\r\n  }\r\n\r\n  static bind(fn) {\r\n    return AsyncResource.bind(fn);\r\n  }\r\n\r\n  static snapshot() {\r\n    return AsyncLocalStorage.bind((cb, ...args) => cb(...args));\r\n  }\r\n\r\n  disable() {\r\n    if (this.enabled) {\r\n      this.enabled = false;\r\n      // If this.enabled, the instance must be in storageList\r\n      ArrayPrototypeSplice(storageList,\r\n                           ArrayPrototypeIndexOf(storageList, this), 1);\r\n      if (storageList.length === 0) {\r\n        storageHook.disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  _enable() {\r\n    if (!this.enabled) {\r\n      this.enabled = true;\r\n      ArrayPrototypePush(storageList, this);\r\n      storageHook.enable();\r\n    }\r\n  }\r\n\r\n  // Propagate the context from a parent resource to a child one\r\n  _propagate(resource, triggerResource, type) {\r\n    const store = triggerResource[this.kResourceStore];\r\n    if (this.enabled) {\r\n      resource[this.kResourceStore] = store;\r\n    }\r\n  }\r\n\r\n  enterWith(store) {\r\n    this._enable();\r\n    const resource = executionAsyncResource();\r\n    resource[this.kResourceStore] = store;\r\n  }\r\n\r\n  run(store, callback, ...args) {\r\n    // Avoid creation of an AsyncResource if store is already active\r\n    if (ObjectIs(store, this.getStore())) {\r\n      return ReflectApply(callback, null, args);\r\n    }\r\n\r\n    this._enable();\r\n\r\n    const resource = executionAsyncResource();\r\n    const oldStore = resource[this.kResourceStore];\r\n\r\n    resource[this.kResourceStore] = store;\r\n\r\n    try {\r\n      return ReflectApply(callback, null, args);\r\n    } finally {\r\n      resource[this.kResourceStore] = oldStore;\r\n    }\r\n  }\r\n\r\n  exit(callback, ...args) {\r\n    if (!this.enabled) {\r\n      return ReflectApply(callback, null, args);\r\n    }\r\n    this.disable();\r\n    try {\r\n      return ReflectApply(callback, null, args);\r\n    } finally {\r\n      this._enable();\r\n    }\r\n  }\r\n\r\n  getStore() {\r\n    if (this.enabled) {\r\n      const resource = executionAsyncResource();\r\n      return resource[this.kResourceStore];\r\n    }\r\n  }\r\n}\r\n\r\n// Placing all exports down here because the exported classes won't export\r\n// otherwise.\r\nmodule.exports = {\r\n  // Public API\r\n  AsyncLocalStorage,\r\n  createHook,\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  executionAsyncResource,\r\n  asyncWrapProviders: ObjectFreeze({ __proto__: null, ...asyncWrap.Providers }),\r\n  // Embedder API\r\n  AsyncResource,\r\n};\r\n"
  },
  "36": {
    "metadata": {
      "scriptId": "36",
      "url": "node:timers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 388,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "7debfdff12bc120ea60b6e8f4e77b43d45e8d06c5a917ff6cc9bdd43cef832e0",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10300,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:timers"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  MathTrunc,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  SymbolDispose,\r\n  SymbolToPrimitive,\r\n} = primordials;\r\n\r\nconst binding = internalBinding('timers');\r\nconst {\r\n  immediateInfo,\r\n} = binding;\r\nconst L = require('internal/linkedlist');\r\nconst {\r\n  async_id_symbol,\r\n  Timeout,\r\n  Immediate,\r\n  decRefCount,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount,\r\n  },\r\n  kRefed,\r\n  kHasPrimitive,\r\n  getTimerDuration,\r\n  timerListMap,\r\n  timerListQueue,\r\n  immediateQueue,\r\n  active,\r\n  unrefActive,\r\n  insert,\r\n} = require('internal/timers');\r\nconst {\r\n  promisify: { custom: customPromisify },\r\n  deprecate,\r\n} = require('internal/util');\r\nlet debug = require('internal/util/debuglog').debuglog('timer', (fn) => {\r\n  debug = fn;\r\n});\r\nconst { validateFunction } = require('internal/validators');\r\n\r\nlet timersPromises;\r\nlet timers;\r\n\r\nconst {\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitDestroy,\r\n} = require('internal/async_hooks');\r\n\r\n// This stores all the known timer async ids to allow users to clearTimeout and\r\n// clearInterval using those ids, to match the spec and the rest of the web\r\n// platform.\r\nconst knownTimersById = { __proto__: null };\r\n\r\n// Remove a timer. Cancels the timeout and resets the relevant timer properties.\r\nfunction unenroll(item) {\r\n  if (item._destroyed)\r\n    return;\r\n\r\n  item._destroyed = true;\r\n\r\n  if (item[kHasPrimitive])\r\n    delete knownTimersById[item[async_id_symbol]];\r\n\r\n  // Fewer checks may be possible, but these cover everything.\r\n  if (destroyHooksExist() && item[async_id_symbol] !== undefined)\r\n    emitDestroy(item[async_id_symbol]);\r\n\r\n  L.remove(item);\r\n\r\n  // We only delete refed lists because unrefed ones are incredibly likely\r\n  // to come from http and be recreated shortly after.\r\n  // TODO: Long-term this could instead be handled by creating an internal\r\n  // clearTimeout that makes it clear that the list should not be deleted.\r\n  // That function could then be used by http and other similar modules.\r\n  if (item[kRefed]) {\r\n    // Compliment truncation during insert().\r\n    const msecs = MathTrunc(item._idleTimeout);\r\n    const list = timerListMap[msecs];\r\n    if (list !== undefined && L.isEmpty(list)) {\r\n      debug('unenroll: list empty');\r\n      timerListQueue.removeAt(list.priorityQueuePosition);\r\n      delete timerListMap[list.msecs];\r\n    }\r\n\r\n    decRefCount();\r\n  }\r\n\r\n  // If active is called later, then we want to make sure not to insert again\r\n  item._idleTimeout = -1;\r\n}\r\n\r\n// Make a regular object able to act as a timer by setting some properties.\r\n// This function does not start the timer, see `active()`.\r\n// Using existing objects as timers slightly reduces object overhead.\r\nfunction enroll(item, msecs) {\r\n  msecs = getTimerDuration(msecs, 'msecs');\r\n\r\n  // If this item was already in a list somewhere\r\n  // then we should unenroll it from that\r\n  if (item._idleNext) unenroll(item);\r\n\r\n  L.init(item);\r\n  item._idleTimeout = msecs;\r\n}\r\n\r\n\r\n/**\r\n * Schedules the execution of a one-time `callback`\r\n * after `after` milliseconds.\r\n * @param {Function} callback\r\n * @param {number} [after]\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Timeout}\r\n */\r\nfunction setTimeout(callback, after, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, after, args, false, true);\r\n  insert(timeout, timeout._idleTimeout);\r\n\r\n  return timeout;\r\n}\r\n\r\nObjectDefineProperty(setTimeout, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!timersPromises)\r\n      timersPromises = require('timers/promises');\r\n    return timersPromises.setTimeout;\r\n  },\r\n});\r\n\r\n/**\r\n * Cancels a timeout.\r\n * @param {Timeout | string | number} timer\r\n * @returns {void}\r\n */\r\nfunction clearTimeout(timer) {\r\n  if (timer && timer._onTimeout) {\r\n    timer._onTimeout = null;\r\n    unenroll(timer);\r\n    return;\r\n  }\r\n  if (typeof timer === 'number' || typeof timer === 'string') {\r\n    const timerInstance = knownTimersById[timer];\r\n    if (timerInstance !== undefined) {\r\n      timerInstance._onTimeout = null;\r\n      unenroll(timerInstance);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Schedules repeated execution of `callback`\r\n * every `repeat` milliseconds.\r\n * @param {Function} callback\r\n * @param {number} [repeat]\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Timeout}\r\n */\r\nfunction setInterval(callback, repeat, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, repeat, args, true, true);\r\n  insert(timeout, timeout._idleTimeout);\r\n\r\n  return timeout;\r\n}\r\n\r\n/**\r\n * Cancels an interval.\r\n * @param {Timeout | string | number} timer\r\n * @returns {void}\r\n */\r\nfunction clearInterval(timer) {\r\n  // clearTimeout and clearInterval can be used to clear timers created from\r\n  // both setTimeout and setInterval, as specified by HTML Living Standard:\r\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\r\n  clearTimeout(timer);\r\n}\r\n\r\nTimeout.prototype.close = function() {\r\n  clearTimeout(this);\r\n  return this;\r\n};\r\n\r\nTimeout.prototype[SymbolDispose] = function() {\r\n  clearTimeout(this);\r\n};\r\n\r\n/**\r\n * Coerces a `Timeout` to a primitive.\r\n * @returns {number}\r\n */\r\nTimeout.prototype[SymbolToPrimitive] = function() {\r\n  const id = this[async_id_symbol];\r\n  if (!this[kHasPrimitive]) {\r\n    this[kHasPrimitive] = true;\r\n    knownTimersById[id] = this;\r\n  }\r\n  return id;\r\n};\r\n\r\n/**\r\n * Schedules the immediate execution of `callback`\r\n * after I/O events' callbacks.\r\n * @param {Function} callback\r\n * @param {any} [arg1]\r\n * @param {any} [arg2]\r\n * @param {any} [arg3]\r\n * @returns {Immediate}\r\n */\r\nfunction setImmediate(callback, arg1, arg2, arg3) {\r\n  validateFunction(callback, 'callback');\r\n\r\n  let i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n      break;\r\n    case 2:\r\n      args = [arg1];\r\n      break;\r\n    case 3:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 4; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 1] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  return new Immediate(callback, args);\r\n}\r\n\r\nObjectDefineProperty(setImmediate, customPromisify, {\r\n  __proto__: null,\r\n  enumerable: true,\r\n  get() {\r\n    if (!timersPromises)\r\n      timersPromises = require('timers/promises');\r\n    return timersPromises.setImmediate;\r\n  },\r\n});\r\n\r\n/**\r\n * Cancels an immediate.\r\n * @param {Immediate} immediate\r\n * @returns {void}\r\n */\r\nfunction clearImmediate(immediate) {\r\n  if (!immediate || immediate._destroyed)\r\n    return;\r\n\r\n  immediateInfo[kCount]--;\r\n  immediate._destroyed = true;\r\n\r\n  if (immediate[kRefed] && --immediateInfo[kRefCount] === 0) {\r\n    // We need to use the binding as the receiver for fast API calls.\r\n    binding.toggleImmediateRef(false);\r\n  }\r\n  immediate[kRefed] = null;\r\n\r\n  if (destroyHooksExist() && immediate[async_id_symbol] !== undefined) {\r\n    emitDestroy(immediate[async_id_symbol]);\r\n  }\r\n\r\n  immediate._onImmediate = null;\r\n\r\n  immediateQueue.remove(immediate);\r\n}\r\n\r\nImmediate.prototype[SymbolDispose] = function() {\r\n  clearImmediate(this);\r\n};\r\n\r\nmodule.exports = timers = {\r\n  setTimeout,\r\n  clearTimeout,\r\n  setImmediate,\r\n  clearImmediate,\r\n  setInterval,\r\n  clearInterval,\r\n  _unrefActive: deprecate(\r\n    unrefActive,\r\n    'timers._unrefActive() is deprecated.' +\r\n    ' Please use timeout.refresh() instead.',\r\n    'DEP0127'),\r\n  active: deprecate(\r\n    active,\r\n    'timers.active() is deprecated. Please use timeout.refresh() instead.',\r\n    'DEP0126'),\r\n  unenroll: deprecate(\r\n    unenroll,\r\n    'timers.unenroll() is deprecated. Please use clearTimeout instead.',\r\n    'DEP0096'),\r\n  enroll: deprecate(\r\n    enroll,\r\n    'timers.enroll() is deprecated. Please use setTimeout instead.',\r\n    'DEP0095'),\r\n};\r\n\r\nObjectDefineProperties(timers, {\r\n  promises: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      timersPromises ??= require('timers/promises');\r\n      return timersPromises;\r\n    },\r\n  },\r\n});\r\n"
  },
  "37": {
    "metadata": {
      "scriptId": "37",
      "url": "node:internal/process/execution",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 249,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "633b2e2ae32441723d8e82cd1ab0bf963908634d0a6a67d15449c985d0bb2fa1",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8380,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/execution"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExpPrototypeExec,\r\n  Symbol,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst path = require('path');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_EVAL_ESM_CANNOT_PRINT,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET,\r\n  },\r\n} = require('internal/errors');\r\nconst { pathToFileURL } = require('internal/url');\r\nconst { exitCodes: { kGenericUserError } } = internalBinding('errors');\r\n\r\nconst {\r\n  executionAsyncId,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  afterHooksExist,\r\n  emitAfter,\r\n  popAsyncContext,\r\n} = require('internal/async_hooks');\r\nconst { containsModuleSyntax } = internalBinding('contextify');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  makeContextifyScript, runScriptInThisContext,\r\n} = require('internal/vm');\r\n// shouldAbortOnUncaughtToggle is a typed array for faster\r\n// communication with JS.\r\nconst { shouldAbortOnUncaughtToggle } = internalBinding('util');\r\n\r\nfunction tryGetCwd() {\r\n  try {\r\n    return process.cwd();\r\n  } catch {\r\n    // getcwd(3) can fail if the current working directory has been deleted.\r\n    // Fall back to the directory name of the (absolute) executable path.\r\n    // It's not really correct but what are the alternatives?\r\n    return path.dirname(process.execPath);\r\n  }\r\n}\r\n\r\nlet evalIndex = 0;\r\nfunction getEvalModuleUrl() {\r\n  return pathToFileURL(`${process.cwd()}/[eval${++evalIndex}]`).href;\r\n}\r\n\r\n/**\r\n * Evaluate an ESM entry point and return the promise that gets fulfilled after\r\n * it finishes evaluation.\r\n * @param {string} source Source code the ESM\r\n * @param {boolean} print Whether the result should be printed.\r\n * @returns {Promise}\r\n */\r\nfunction evalModuleEntryPoint(source, print) {\r\n  if (print) {\r\n    throw new ERR_EVAL_ESM_CANNOT_PRINT();\r\n  }\r\n  RegExpPrototypeExec(/^/, ''); // Necessary to reset RegExp statics before user code runs.\r\n  return require('internal/modules/run_main').runEntryPointWithESMLoader(\r\n    (loader) => loader.eval(source, getEvalModuleUrl(), true),\r\n  );\r\n}\r\n\r\nfunction evalScript(name, body, breakFirstLine, print, shouldLoadESM = false) {\r\n  const CJSModule = require('internal/modules/cjs/loader').Module;\r\n\r\n  const cwd = tryGetCwd();\r\n  const origModule = globalThis.module;  // Set e.g. when called from the REPL.\r\n\r\n  const module = new CJSModule(name);\r\n  module.filename = path.join(cwd, name);\r\n  module.paths = CJSModule._nodeModulePaths(cwd);\r\n\r\n  const baseUrl = pathToFileURL(module.filename).href;\r\n\r\n  if (getOptionValue('--experimental-detect-module') &&\r\n    getOptionValue('--input-type') === '' && getOptionValue('--experimental-default-type') === '' &&\r\n    containsModuleSyntax(body, name, null, 'no CJS variables')) {\r\n    return evalModuleEntryPoint(body, print);\r\n  }\r\n\r\n  const runScript = () => {\r\n    // Create wrapper for cache entry\r\n    const script = `\r\n      globalThis.module = module;\r\n      globalThis.exports = exports;\r\n      globalThis.__dirname = __dirname;\r\n      globalThis.require = require;\r\n      return (main) => main();\r\n    `;\r\n    globalThis.__filename = name;\r\n    RegExpPrototypeExec(/^/, ''); // Necessary to reset RegExp statics before user code runs.\r\n    const result = module._compile(script, `${name}-wrapper`)(() => {\r\n      const hostDefinedOptionId = Symbol(name);\r\n      async function importModuleDynamically(specifier, _, importAttributes) {\r\n        const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n        return cascadedLoader.import(specifier, baseUrl, importAttributes);\r\n      }\r\n      const script = makeContextifyScript(\r\n        body,                    // code\r\n        name,                    // filename,\r\n        0,                       // lineOffset\r\n        0,                       // columnOffset,\r\n        undefined,               // cachedData\r\n        false,                   // produceCachedData\r\n        undefined,               // parsingContext\r\n        hostDefinedOptionId,     // hostDefinedOptionId\r\n        importModuleDynamically, // importModuleDynamically\r\n      );\r\n      return runScriptInThisContext(script, true, !!breakFirstLine);\r\n    });\r\n    if (print) {\r\n      const { log } = require('internal/console/global');\r\n\r\n      process.on('exit', () => {\r\n        log(result);\r\n      });\r\n    }\r\n\r\n    if (origModule !== undefined)\r\n      globalThis.module = origModule;\r\n  };\r\n\r\n  if (shouldLoadESM) {\r\n    require('internal/modules/run_main').runEntryPointWithESMLoader(runScript);\r\n    return;\r\n  }\r\n  runScript();\r\n}\r\n\r\nconst exceptionHandlerState = {\r\n  captureFn: null,\r\n  reportFlag: false,\r\n};\r\n\r\nfunction setUncaughtExceptionCaptureCallback(fn) {\r\n  if (fn === null) {\r\n    exceptionHandlerState.captureFn = fn;\r\n    shouldAbortOnUncaughtToggle[0] = 1;\r\n    process.report.reportOnUncaughtException = exceptionHandlerState.reportFlag;\r\n    return;\r\n  }\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'null'], fn);\r\n  }\r\n  if (exceptionHandlerState.captureFn !== null) {\r\n    throw new ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET();\r\n  }\r\n  exceptionHandlerState.captureFn = fn;\r\n  shouldAbortOnUncaughtToggle[0] = 0;\r\n  exceptionHandlerState.reportFlag =\r\n    process.report.reportOnUncaughtException === true;\r\n  process.report.reportOnUncaughtException = false;\r\n}\r\n\r\nfunction hasUncaughtExceptionCaptureCallback() {\r\n  return exceptionHandlerState.captureFn !== null;\r\n}\r\n\r\nfunction noop() {}\r\n\r\n// XXX(joyeecheung): for some reason this cannot be defined at the top-level\r\n// and exported to be written to process._fatalException, it has to be\r\n// returned as an *anonymous function* wrapped inside a factory function,\r\n// otherwise it breaks the test-timers.setInterval async hooks test -\r\n// this may indicate that node::errors::TriggerUncaughtException() should\r\n// fix up the callback scope before calling into process._fatalException,\r\n// or this function should take extra care of the async hooks before it\r\n// schedules a setImmediate.\r\nfunction createOnGlobalUncaughtException() {\r\n  // The C++ land node::errors::TriggerUncaughtException() will\r\n  // exit the process if it returns false, and continue execution if it\r\n  // returns true (which indicates that the exception is handled by the user).\r\n  return (er, fromPromise) => {\r\n    // It's possible that defaultTriggerAsyncId was set for a constructor\r\n    // call that threw and was never cleared. So clear it now.\r\n    clearDefaultTriggerAsyncId();\r\n\r\n    const type = fromPromise ? 'unhandledRejection' : 'uncaughtException';\r\n    process.emit('uncaughtExceptionMonitor', er, type);\r\n    if (exceptionHandlerState.captureFn !== null) {\r\n      exceptionHandlerState.captureFn(er);\r\n    } else if (!process.emit('uncaughtException', er, type)) {\r\n      // If someone handled it, then great. Otherwise, die in C++ land\r\n      // since that means that we'll exit the process, emit the 'exit' event.\r\n      try {\r\n        if (!process._exiting) {\r\n          process._exiting = true;\r\n          process.exitCode = kGenericUserError;\r\n          process.emit('exit', kGenericUserError);\r\n        }\r\n      } catch {\r\n        // Nothing to be done about it at this point.\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // If we handled an error, then make sure any ticks get processed\r\n    // by ensuring that the next Immediate cycle isn't empty.\r\n    require('timers').setImmediate(noop);\r\n\r\n    // Emit the after() hooks now that the exception has been handled.\r\n    if (afterHooksExist()) {\r\n      do {\r\n        const asyncId = executionAsyncId();\r\n        if (asyncId === 0)\r\n          popAsyncContext(0);\r\n        else\r\n          emitAfter(asyncId);\r\n      } while (hasAsyncIdStack());\r\n    }\r\n    // And completely empty the id stack, including anything that may be\r\n    // cached on the native side.\r\n    clearAsyncIdStack();\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction readStdin(callback) {\r\n  process.stdin.setEncoding('utf8');\r\n\r\n  let code = '';\r\n  process.stdin.on('data', (d) => {\r\n    code += d;\r\n  });\r\n\r\n  process.stdin.on('end', () => {\r\n    callback(code);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  readStdin,\r\n  tryGetCwd,\r\n  evalModuleEntryPoint,\r\n  evalScript,\r\n  onGlobalUncaughtException: createOnGlobalUncaughtException(),\r\n  setUncaughtExceptionCaptureCallback,\r\n  hasUncaughtExceptionCaptureCallback,\r\n};\r\n"
  },
  "38": {
    "metadata": {
      "scriptId": "38",
      "url": "node:internal/vm",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 229,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "0ce16b2f53eb86deb82cd5925207bceaa98b988f9ac1ebb20ad1c2fbbb61e92a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 8961,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/vm"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ReflectApply,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  ContextifyScript,\r\n  compileFunction,\r\n} = internalBinding('contextify');\r\nconst {\r\n  runInContext,\r\n} = ContextifyScript.prototype;\r\nconst {\r\n  vm_dynamic_import_default_internal,\r\n  vm_dynamic_import_main_context_default,\r\n  vm_dynamic_import_no_callback,\r\n  vm_dynamic_import_missing_flag,\r\n} = internalBinding('symbols');\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  getOptionValue,\r\n} = require('internal/options');\r\nconst {\r\n  privateSymbols: {\r\n    contextify_context_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\n/**\r\n * Checks if the given object is a context object.\r\n * @param {object} object - The object to check.\r\n * @returns {boolean} - Returns true if the object is a context object, else false.\r\n */\r\nfunction isContext(object) {\r\n  return object[contextify_context_private_symbol] !== undefined;\r\n}\r\n\r\n/**\r\n * Retrieves the host-defined option ID based on the provided importModuleDynamically and hint.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback | undefined} importModuleDynamically -\r\n * The importModuleDynamically function or undefined.\r\n * @param {string} hint - The hint for the option ID.\r\n * @returns {symbol | import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} - The host-defined option\r\n * ID.\r\n */\r\nfunction getHostDefinedOptionId(importModuleDynamically, hint) {\r\n  if (importModuleDynamically === vm_dynamic_import_main_context_default ||\r\n      importModuleDynamically === vm_dynamic_import_default_internal) {\r\n    return importModuleDynamically;\r\n  }\r\n\r\n  if (importModuleDynamically !== undefined) {\r\n    // Check that it's either undefined or a function before we pass\r\n    // it into the native constructor.\r\n    validateFunction(importModuleDynamically,\r\n                     'options.importModuleDynamically');\r\n  }\r\n  if (importModuleDynamically === undefined) {\r\n    // We need a default host defined options that are the same for all\r\n    // scripts not needing custom module callbacks so that the isolate\r\n    // compilation cache can be hit.\r\n    return vm_dynamic_import_no_callback;\r\n  }\r\n  // We should've thrown here immediately when we introduced\r\n  // --experimental-vm-modules and importModuleDynamically, but since\r\n  // users are already using this callback to throw a similar error,\r\n  // we also defer the error to the time when an actual import() is called\r\n  // to avoid breaking them. To ensure that the isolate compilation\r\n  // cache can still be hit, use a constant sentinel symbol here.\r\n  if (!getOptionValue('--experimental-vm-modules')) {\r\n    return vm_dynamic_import_missing_flag;\r\n  }\r\n\r\n  return Symbol(hint);\r\n}\r\n\r\n/**\r\n * Registers a dynamically imported module for customization.\r\n * @param {string} referrer - The path of the referrer module.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} importModuleDynamically - The\r\n * dynamically imported module function to be registered.\r\n */\r\nfunction registerImportModuleDynamically(referrer, importModuleDynamically) {\r\n  // If it's undefined or certain known symbol, there's no customization so\r\n  // no need to register anything.\r\n  if (importModuleDynamically === undefined ||\r\n      importModuleDynamically === vm_dynamic_import_main_context_default ||\r\n      importModuleDynamically === vm_dynamic_import_default_internal) {\r\n    return;\r\n  }\r\n  const { importModuleDynamicallyWrap } = require('internal/vm/module');\r\n  const { registerModule } = require('internal/modules/esm/utils');\r\n  registerModule(referrer, {\r\n    __proto__: null,\r\n    importModuleDynamically:\r\n      importModuleDynamicallyWrap(importModuleDynamically),\r\n  });\r\n}\r\n\r\n/**\r\n * Compiles a function from the given code string.\r\n * @param {string} code - The code string to compile.\r\n * @param {string} filename - The filename to use for the compiled function.\r\n * @param {number} lineOffset - The line offset to use for the compiled function.\r\n * @param {number} columnOffset - The column offset to use for the compiled function.\r\n * @param {Buffer} [cachedData=undefined] - The cached data to use for the compiled function.\r\n * @param {boolean} produceCachedData - Whether to produce cached data for the compiled function.\r\n * @param {ReturnType<import('vm').createContext} [parsingContext=undefined] - The parsing context to use for the\r\n * compiled function.\r\n * @param {object[]} [contextExtensions=[]] - An array of context extensions to use for the compiled function.\r\n * @param {string[]} [params] - An optional array of parameter names for the compiled function.\r\n * @param {symbol} hostDefinedOptionId - A symbol referenced by the field `host_defined_option_symbol`.\r\n * @param {import('internal/modules/esm/utils').ImportModuleDynamicallyCallback} [importModuleDynamically] -\r\n * A function to use for dynamically importing modules.\r\n * @returns {object} An object containing the compiled function and any associated data.\r\n * @throws {TypeError} If any of the arguments are of the wrong type.\r\n * @throws {ERR_INVALID_ARG_TYPE} If the parsing context is not a valid context object.\r\n */\r\nfunction internalCompileFunction(\r\n  code, filename, lineOffset, columnOffset,\r\n  cachedData, produceCachedData, parsingContext, contextExtensions,\r\n  params, hostDefinedOptionId, importModuleDynamically) {\r\n  const result = compileFunction(\r\n    code,\r\n    filename,\r\n    lineOffset,\r\n    columnOffset,\r\n    cachedData,\r\n    produceCachedData,\r\n    parsingContext,\r\n    contextExtensions,\r\n    params,\r\n    hostDefinedOptionId,\r\n  );\r\n\r\n  if (produceCachedData) {\r\n    result.function.cachedDataProduced = result.cachedDataProduced;\r\n  }\r\n\r\n  if (result.cachedData) {\r\n    result.function.cachedData = result.cachedData;\r\n  }\r\n\r\n  if (typeof result.cachedDataRejected === 'boolean') {\r\n    result.function.cachedDataRejected = result.cachedDataRejected;\r\n  }\r\n\r\n  registerImportModuleDynamically(result.function, importModuleDynamically);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a contextify script.\r\n * @param {string} code - The code of the script.\r\n * @param {string} filename - The filename of the script.\r\n * @param {number} lineOffset - The line offset of the script.\r\n * @param {number} columnOffset - The column offset of the script.\r\n * @param {Buffer} cachedData - The cached data of the script.\r\n * @param {boolean} produceCachedData - Indicates whether to produce cached data.\r\n * @param {object} parsingContext - The parsing context of the script.\r\n * @param {number} hostDefinedOptionId - The host-defined option ID.\r\n * @param {boolean} importModuleDynamically - Indicates whether to import modules dynamically.\r\n * @returns {ContextifyScript} The created contextify script.\r\n */\r\nfunction makeContextifyScript(code,\r\n                              filename,\r\n                              lineOffset,\r\n                              columnOffset,\r\n                              cachedData,\r\n                              produceCachedData,\r\n                              parsingContext,\r\n                              hostDefinedOptionId,\r\n                              importModuleDynamically) {\r\n  let script;\r\n  // Calling `ReThrow()` on a native TryCatch does not generate a new\r\n  // abort-on-uncaught-exception check. A dummy try/catch in JS land\r\n  // protects against that.\r\n  try { // eslint-disable-line no-useless-catch\r\n    script = new ContextifyScript(code,\r\n                                  filename,\r\n                                  lineOffset,\r\n                                  columnOffset,\r\n                                  cachedData,\r\n                                  produceCachedData,\r\n                                  parsingContext,\r\n                                  hostDefinedOptionId);\r\n  } catch (e) {\r\n    throw e; /* node-do-not-add-exception-line */\r\n  }\r\n\r\n  registerImportModuleDynamically(script, importModuleDynamically);\r\n  return script;\r\n}\r\n\r\n/**\r\n * Runs a script in the current context.\r\n * Internal version of `vm.Script.prototype.runInThisContext()` which skips argument validation.\r\n * @param {ReturnType<makeContextifyScript>} script - The script to run.\r\n * @param {boolean} displayErrors - Whether to display errors.\r\n * @param {boolean} breakOnFirstLine - Whether to break on the first line.\r\n */\r\nfunction runScriptInThisContext(script, displayErrors, breakOnFirstLine) {\r\n  return ReflectApply(\r\n    runInContext,\r\n    script,\r\n    [\r\n      null,                // sandbox - use current context\r\n      -1,                  // timeout\r\n      displayErrors,       // displayErrors\r\n      false,               // breakOnSigint\r\n      breakOnFirstLine,    // breakOnFirstLine\r\n    ],\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  getHostDefinedOptionId,\r\n  internalCompileFunction,\r\n  isContext,\r\n  makeContextifyScript,\r\n  registerImportModuleDynamically,\r\n  runScriptInThisContext,\r\n};\r\n"
  },
  "39": {
    "metadata": {
      "scriptId": "39",
      "url": "node:internal/process/warning",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 217,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8da6d076045f4b160c3195e13076206b865cb13aa14a10828eaeb7f85d450a54",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6270,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/warning"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  ErrorPrototypeToString,\r\n  SafeSet,\r\n  String,\r\n} = primordials;\r\n\r\nconst {\r\n  getOptionValue,\r\n} = require('internal/options');\r\n\r\nconst assert = require('internal/assert');\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n} = require('internal/errors');\r\nconst { validateString } = require('internal/validators');\r\n\r\n// Lazily loaded\r\nlet fs;\r\nlet fd;\r\nlet warningFile;\r\nlet options;\r\nlet traceWarningHelperShown = false;\r\n\r\nfunction resetForSerialization() {\r\n  if (fd !== undefined) {\r\n    process.removeListener('exit', closeFdOnExit);\r\n  }\r\n  fd = undefined;\r\n  warningFile = undefined;\r\n  traceWarningHelperShown = false;\r\n}\r\n\r\nfunction lazyOption() {\r\n  // This will load `warningFile` only once. If the flag is not set,\r\n  // `warningFile` will be set to an empty string.\r\n  if (warningFile === undefined) {\r\n    options = require('internal/options');\r\n    if (options.getOptionValue('--diagnostic-dir') !== '') {\r\n      warningFile = options.getOptionValue('--diagnostic-dir');\r\n    }\r\n    if (options.getOptionValue('--redirect-warnings') !== '') {\r\n      warningFile = options.getOptionValue('--redirect-warnings');\r\n    } else {\r\n      warningFile = '';\r\n    }\r\n  }\r\n  return warningFile;\r\n}\r\n\r\n// If we can't write to stderr, we'd like to make this a noop,\r\n// so use console.error.\r\nlet error;\r\nfunction writeOut(message) {\r\n  if (!error) {\r\n    error = require('internal/console/global').error;\r\n  }\r\n  error(message);\r\n}\r\n\r\nfunction closeFdOnExit() {\r\n  try {\r\n    fs.closeSync(fd);\r\n  } catch {\r\n    // Continue regardless of error.\r\n  }\r\n}\r\n\r\nfunction writeToFile(message) {\r\n  if (fd === undefined) {\r\n    fs = require('fs');\r\n    try {\r\n      fd = fs.openSync(warningFile, 'a');\r\n    } catch {\r\n      return writeOut(message);\r\n    }\r\n    process.on('exit', closeFdOnExit);\r\n  }\r\n  fs.appendFile(fd, `${message}\\n`, (err) => {\r\n    if (err) {\r\n      writeOut(message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction doEmitWarning(warning) {\r\n  process.emit('warning', warning);\r\n}\r\n\r\nlet disableWarningSet;\r\n\r\nfunction onWarning(warning) {\r\n  if (!disableWarningSet) {\r\n    disableWarningSet = new SafeSet();\r\n    const disableWarningValues = getOptionValue('--disable-warning');\r\n    for (let i = 0; i < disableWarningValues.length; i++) {\r\n      disableWarningSet.add(disableWarningValues[i]);\r\n    }\r\n  }\r\n  if ((warning?.code && disableWarningSet.has(warning.code)) ||\r\n      (warning?.name && disableWarningSet.has(warning.name))) return;\r\n\r\n  if (!(warning instanceof Error)) return;\r\n\r\n  const isDeprecation = warning.name === 'DeprecationWarning';\r\n  if (isDeprecation && process.noDeprecation) return;\r\n  const trace = process.traceProcessWarnings ||\r\n                (isDeprecation && process.traceDeprecation);\r\n  let msg = `(${process.release.name}:${process.pid}) `;\r\n  if (warning.code)\r\n    msg += `[${warning.code}] `;\r\n  if (trace && warning.stack) {\r\n    msg += `${warning.stack}`;\r\n  } else {\r\n    msg +=\r\n      typeof warning.toString === 'function' ?\r\n        `${warning.toString()}` :\r\n        ErrorPrototypeToString(warning);\r\n  }\r\n  if (typeof warning.detail === 'string') {\r\n    msg += `\\n${warning.detail}`;\r\n  }\r\n  if (!trace && !traceWarningHelperShown) {\r\n    const flag = isDeprecation ? '--trace-deprecation' : '--trace-warnings';\r\n    const argv0 = require('path').basename(process.argv0 || 'node', '.exe');\r\n    msg += `\\n(Use \\`${argv0} ${flag} ...\\` to show where the warning ` +\r\n           'was created)';\r\n    traceWarningHelperShown = true;\r\n  }\r\n  const warningFile = lazyOption();\r\n  if (warningFile) {\r\n    return writeToFile(msg);\r\n  }\r\n  writeOut(msg);\r\n}\r\n\r\n// process.emitWarning(error)\r\n// process.emitWarning(str[, type[, code]][, ctor])\r\n// process.emitWarning(str[, options])\r\nfunction emitWarning(warning, type, code, ctor) {\r\n  // Fast path to avoid memory allocation,\r\n  // this doesn't eliminate the other if a few lines below\r\n  if (process.noDeprecation && type === 'DeprecationWarning') {\r\n    return;\r\n  }\r\n  let detail;\r\n  if (type !== null && typeof type === 'object' && !ArrayIsArray(type)) {\r\n    ctor = type.ctor;\r\n    code = type.code;\r\n    if (typeof type.detail === 'string')\r\n      detail = type.detail;\r\n    type = type.type || 'Warning';\r\n  } else if (typeof type === 'function') {\r\n    ctor = type;\r\n    code = undefined;\r\n    type = 'Warning';\r\n  }\r\n  if (type !== undefined)\r\n    validateString(type, 'type');\r\n  if (typeof code === 'function') {\r\n    ctor = code;\r\n    code = undefined;\r\n  } else if (code !== undefined) {\r\n    validateString(code, 'code');\r\n  }\r\n  if (typeof warning === 'string') {\r\n    warning = createWarningObject(warning, type, code, ctor, detail);\r\n  } else if (!(warning instanceof Error)) {\r\n    throw new ERR_INVALID_ARG_TYPE('warning', ['Error', 'string'], warning);\r\n  }\r\n  if (warning.name === 'DeprecationWarning') {\r\n    if (process.noDeprecation)\r\n      return;\r\n    if (process.throwDeprecation) {\r\n      // Delay throwing the error to guarantee that all former warnings were\r\n      // properly logged.\r\n      return process.nextTick(() => {\r\n        throw warning;\r\n      });\r\n    }\r\n  }\r\n  process.nextTick(doEmitWarning, warning);\r\n}\r\n\r\nfunction emitWarningSync(warning, type, code, ctor) {\r\n  process.emit('warning', createWarningObject(warning, type, code, ctor));\r\n}\r\n\r\nfunction createWarningObject(warning, type, code, ctor, detail) {\r\n  assert(typeof warning === 'string');\r\n  // Improve error creation performance by skipping the error frames.\r\n  // They are added in the `captureStackTrace()` function below.\r\n  const tmpStackLimit = Error.stackTraceLimit;\r\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  warning = new Error(warning);\r\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpStackLimit;\r\n  warning.name = String(type || 'Warning');\r\n  if (code !== undefined) warning.code = code;\r\n  if (detail !== undefined) warning.detail = detail;\r\n  ErrorCaptureStackTrace(warning, ctor || process.emitWarning);\r\n  return warning;\r\n}\r\n\r\nmodule.exports = {\r\n  emitWarning,\r\n  emitWarningSync,\r\n  onWarning,\r\n  resetForSerialization,\r\n};\r\n"
  },
  "40": {
    "metadata": {
      "scriptId": "40",
      "url": "node:internal/source_map/source_map_cache",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 366,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "4665e31584858e87a22b39b5b9724aefb406b4bcdd85620632b614ce176e4dae",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 12828,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/source_map/source_map_cache"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  JSONParse,\r\n  RegExpPrototypeExec,\r\n  SafeMap,\r\n  StringPrototypeCodePointAt,\r\n  StringPrototypeSplit,\r\n} = primordials;\r\n\r\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\r\nconst { Buffer } = require('buffer');\r\nlet debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nconst { validateBoolean } = require('internal/validators');\r\nconst {\r\n  setSourceMapsEnabled: setSourceMapsNative,\r\n} = internalBinding('errors');\r\nconst {\r\n  setInternalPrepareStackTrace,\r\n} = require('internal/errors');\r\nconst { getLazy } = require('internal/util');\r\n\r\nconst getModuleSourceMapCache = getLazy(() => {\r\n  const { SourceMapCacheMap } = require('internal/source_map/source_map_cache_map');\r\n  return new SourceMapCacheMap();\r\n});\r\n\r\n// The generated source module/script instance is not accessible, so we can use\r\n// a Map without memory concerns. Separate generated source entries with the module\r\n// source entries to avoid overriding the module source entries with arbitrary\r\n// source url magic comments.\r\nconst generatedSourceMapCache = new SafeMap();\r\nconst kLeadingProtocol = /^\\w+:\\/\\//;\r\nconst kSourceMappingURLMagicComment = /\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/g;\r\nconst kSourceURLMagicComment = /\\/[*/]#\\s+sourceURL=(?<sourceURL>[^\\s]+)/g;\r\n\r\nconst { isAbsolute } = require('path');\r\nconst { fileURLToPath, pathToFileURL, URL } = require('internal/url');\r\n\r\nlet SourceMap;\r\n\r\n// This is configured with --enable-source-maps during pre-execution.\r\nlet sourceMapsEnabled = false;\r\nfunction getSourceMapsEnabled() {\r\n  return sourceMapsEnabled;\r\n}\r\n\r\n/**\r\n * Enables or disables source maps programmatically.\r\n * @param {boolean} val\r\n */\r\nfunction setSourceMapsEnabled(val) {\r\n  validateBoolean(val, 'val');\r\n\r\n  setSourceMapsNative(val);\r\n  if (val) {\r\n    const {\r\n      prepareStackTraceWithSourceMaps,\r\n    } = require('internal/source_map/prepare_stack_trace');\r\n    setInternalPrepareStackTrace(prepareStackTraceWithSourceMaps);\r\n  } else if (sourceMapsEnabled !== undefined) {\r\n    // Reset prepare stack trace callback only when disabling source maps.\r\n    const {\r\n      defaultPrepareStackTrace,\r\n    } = require('internal/errors');\r\n    setInternalPrepareStackTrace(defaultPrepareStackTrace);\r\n  }\r\n\r\n  sourceMapsEnabled = val;\r\n}\r\n\r\n/**\r\n * Extracts the source url from the content if present. For example\r\n * //# sourceURL=file:///path/to/file\r\n *\r\n * Read more at: https://tc39.es/source-map-spec/#linking-evald-code-to-named-generated-code\r\n * @param {string} content - source content\r\n * @returns {string | null} source url or null if not present\r\n */\r\nfunction extractSourceURLMagicComment(content) {\r\n  let match;\r\n  let matchSourceURL;\r\n  // A while loop is used here to get the last occurrence of sourceURL.\r\n  // This is needed so that we don't match sourceURL in string literals.\r\n  while ((match = RegExpPrototypeExec(kSourceURLMagicComment, content))) {\r\n    matchSourceURL = match;\r\n  }\r\n  if (matchSourceURL == null) {\r\n    return null;\r\n  }\r\n  let sourceURL = matchSourceURL.groups.sourceURL;\r\n  if (sourceURL != null && RegExpPrototypeExec(kLeadingProtocol, sourceURL) === null) {\r\n    sourceURL = pathToFileURL(sourceURL).href;\r\n  }\r\n  return sourceURL;\r\n}\r\n\r\n/**\r\n * Extracts the source map url from the content if present. For example\r\n * //# sourceMappingURL=file:///path/to/file\r\n *\r\n * Read more at: https://tc39.es/source-map-spec/#linking-generated-code\r\n * @param {string} content - source content\r\n * @returns {string | null} source map url or null if not present\r\n */\r\nfunction extractSourceMapURLMagicComment(content) {\r\n  let match;\r\n  let lastMatch;\r\n  // A while loop is used here to get the last occurrence of sourceMappingURL.\r\n  // This is needed so that we don't match sourceMappingURL in string literals.\r\n  while ((match = RegExpPrototypeExec(kSourceMappingURLMagicComment, content))) {\r\n    lastMatch = match;\r\n  }\r\n  if (lastMatch == null) {\r\n    return null;\r\n  }\r\n  return lastMatch.groups.sourceMappingURL;\r\n}\r\n\r\n/**\r\n * Caches the source map if it is present in the content, with the given filename, moduleInstance, and sourceURL.\r\n * @param {string} filename - the actual filename\r\n * @param {string} content - the actual source content\r\n * @param {import('internal/modules/cjs/loader').Module | ModuleWrap} moduleInstance - a module instance that\r\n * associated with the source, once this is reclaimed, the source map entry will be removed from the cache\r\n * @param {boolean} isGeneratedSource - if the source was generated and evaluated with the global eval\r\n * @param {string | undefined} sourceURL - the source url\r\n * @param {string | undefined} sourceMapURL - the source map url\r\n */\r\nfunction maybeCacheSourceMap(filename, content, moduleInstance, isGeneratedSource, sourceURL, sourceMapURL) {\r\n  const sourceMapsEnabled = getSourceMapsEnabled();\r\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\r\n  const { normalizeReferrerURL } = require('internal/modules/helpers');\r\n  filename = normalizeReferrerURL(filename);\r\n  if (filename === undefined) {\r\n    // This is most likely an invalid filename in sourceURL of [eval]-wrapper.\r\n    return;\r\n  }\r\n\r\n  if (sourceMapURL === undefined) {\r\n    sourceMapURL = extractSourceMapURLMagicComment(content);\r\n  }\r\n\r\n  // Bail out when there is no source map url.\r\n  if (typeof sourceMapURL !== 'string') {\r\n    return;\r\n  }\r\n\r\n  // FIXME: callers should obtain sourceURL from v8 and pass it\r\n  // rather than leaving it undefined and extract by regex.\r\n  if (sourceURL === undefined) {\r\n    sourceURL = extractSourceURLMagicComment(content);\r\n  }\r\n\r\n  const data = dataFromUrl(filename, sourceMapURL);\r\n  const entry = {\r\n    __proto__: null,\r\n    lineLengths: lineLengths(content),\r\n    data,\r\n    // Save the source map url if it is not a data url.\r\n    sourceMapURL: data ? null : sourceMapURL,\r\n    sourceURL,\r\n  };\r\n\r\n  if (isGeneratedSource) {\r\n    generatedSourceMapCache.set(filename, entry);\r\n    if (sourceURL) {\r\n      generatedSourceMapCache.set(sourceURL, entry);\r\n    }\r\n    return;\r\n  }\r\n  // If it is not a generated source, we assume we are in a \"cjs/esm\"\r\n  // context.\r\n  const keys = sourceURL ? [filename, sourceURL] : [filename];\r\n  getModuleSourceMapCache().set(keys, entry, moduleInstance);\r\n}\r\n\r\n/**\r\n * Caches the source map if it is present in the eval'd source.\r\n * @param {string} content - the eval'd source code\r\n */\r\nfunction maybeCacheGeneratedSourceMap(content) {\r\n  const sourceMapsEnabled = getSourceMapsEnabled();\r\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\r\n\r\n  const sourceURL = extractSourceURLMagicComment(content);\r\n  if (sourceURL === null) {\r\n    return;\r\n  }\r\n  try {\r\n    maybeCacheSourceMap(sourceURL, content, null, true, sourceURL);\r\n  } catch (err) {\r\n    // This can happen if the filename is not a valid URL.\r\n    // If we fail to cache the source map, we should not fail the whole process.\r\n    debug(err);\r\n  }\r\n}\r\n\r\n/**\r\n * Resolves source map payload data from the source url and source map url.\r\n * If the source map url is a data url, the data is returned.\r\n * Otherwise the source map url is resolved to a file path and the file is read.\r\n * @param {string} sourceURL - url of the source file\r\n * @param {string} sourceMappingURL - url of the source map\r\n * @returns {object} deserialized source map JSON object\r\n */\r\nfunction dataFromUrl(sourceURL, sourceMappingURL) {\r\n  try {\r\n    const url = new URL(sourceMappingURL);\r\n    switch (url.protocol) {\r\n      case 'data:':\r\n        return sourceMapFromDataUrl(sourceURL, url.pathname);\r\n      default:\r\n        debug(`unknown protocol ${url.protocol}`);\r\n        return null;\r\n    }\r\n  } catch (err) {\r\n    debug(err);\r\n    // If no scheme is present, we assume we are dealing with a file path.\r\n    const mapURL = new URL(sourceMappingURL, sourceURL).href;\r\n    return sourceMapFromFile(mapURL);\r\n  }\r\n}\r\n\r\n// Cache the length of each line in the file that a source map was extracted\r\n// from. This allows translation from byte offset V8 coverage reports,\r\n// to line/column offset Source Map V3.\r\nfunction lineLengths(content) {\r\n  const contentLength = content.length;\r\n  const output = [];\r\n  let lineLength = 0;\r\n  for (let i = 0; i < contentLength; i++, lineLength++) {\r\n    const codePoint = StringPrototypeCodePointAt(content, i);\r\n\r\n    // We purposefully keep \\r as part of the line-length calculation, in\r\n    // cases where there is a \\r\\n separator, so that this can be taken into\r\n    // account in coverage calculations.\r\n    // codepoints for \\n (new line), \\u2028 (line separator) and \\u2029 (paragraph separator)\r\n    if (codePoint === 10 || codePoint === 0x2028 || codePoint === 0x2029) {\r\n      ArrayPrototypePush(output, lineLength);\r\n      lineLength = -1; // To not count the matched codePoint such as \\n character\r\n    }\r\n  }\r\n  ArrayPrototypePush(output, lineLength);\r\n  return output;\r\n}\r\n\r\n/**\r\n * Read source map from file.\r\n * @param {string} mapURL - file url of the source map\r\n * @returns {object} deserialized source map JSON object\r\n */\r\nfunction sourceMapFromFile(mapURL) {\r\n  try {\r\n    const fs = require('fs');\r\n    const content = fs.readFileSync(fileURLToPath(mapURL), 'utf8');\r\n    const data = JSONParse(content);\r\n    return sourcesToAbsolute(mapURL, data);\r\n  } catch (err) {\r\n    debug(err);\r\n    return null;\r\n  }\r\n}\r\n\r\n// data:[<mediatype>][;base64],<data> see:\r\n// https://tools.ietf.org/html/rfc2397#section-2\r\nfunction sourceMapFromDataUrl(sourceURL, url) {\r\n  const { 0: format, 1: data } = StringPrototypeSplit(url, ',');\r\n  const splitFormat = StringPrototypeSplit(format, ';');\r\n  const contentType = splitFormat[0];\r\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\r\n  if (contentType === 'application/json') {\r\n    const decodedData = base64 ?\r\n      Buffer.from(data, 'base64').toString('utf8') : data;\r\n    try {\r\n      const parsedData = JSONParse(decodedData);\r\n      return sourcesToAbsolute(sourceURL, parsedData);\r\n    } catch (err) {\r\n      debug(err);\r\n      return null;\r\n    }\r\n  } else {\r\n    debug(`unknown content-type ${contentType}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n// If the sources are not absolute URLs after prepending of the \"sourceRoot\",\r\n// the sources are resolved relative to the SourceMap (like resolving script\r\n// src in a html document).\r\n// If the sources are absolute paths, the sources are converted to absolute file URLs.\r\nfunction sourcesToAbsolute(baseURL, data) {\r\n  data.sources = data.sources.map((source) => {\r\n    source = (data.sourceRoot || '') + source;\r\n    if (isAbsolute(source)) {\r\n      return pathToFileURL(source).href;\r\n    }\r\n    return new URL(source, baseURL).href;\r\n  });\r\n  // The sources array is now resolved to absolute URLs, sourceRoot should\r\n  // be updated to noop.\r\n  data.sourceRoot = '';\r\n  return data;\r\n}\r\n\r\n// WARNING: The `sourceMapCacheToObject` runs during shutdown. In particular,\r\n// it also runs when Workers are terminated, making it important that it does\r\n// not call out to any user-provided code, including built-in prototypes that\r\n// might have been tampered with.\r\n\r\n// Get serialized representation of source-map cache, this is used\r\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\r\nfunction sourceMapCacheToObject() {\r\n  const moduleSourceMapCache = getModuleSourceMapCache();\r\n  if (moduleSourceMapCache.size === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  const obj = { __proto__: null };\r\n  for (const { 0: k, 1: v } of moduleSourceMapCache) {\r\n    obj[k] = {\r\n      __proto__: null,\r\n      lineLengths: v.lineLengths,\r\n      data: v.data,\r\n      url: v.sourceMapURL,\r\n    };\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Find a source map for a given actual source URL or path.\r\n * @param {string} sourceURL - actual source URL or path\r\n * @returns {import('internal/source_map/source_map').SourceMap | undefined} a source map or undefined if not found\r\n */\r\nfunction findSourceMap(sourceURL) {\r\n  if (RegExpPrototypeExec(kLeadingProtocol, sourceURL) === null) {\r\n    sourceURL = pathToFileURL(sourceURL).href;\r\n  }\r\n  if (!SourceMap) {\r\n    SourceMap = require('internal/source_map/source_map').SourceMap;\r\n  }\r\n  const entry = getModuleSourceMapCache().get(sourceURL) ?? generatedSourceMapCache.get(sourceURL);\r\n  if (entry === undefined) {\r\n    return undefined;\r\n  }\r\n  let sourceMap = entry.sourceMap;\r\n  if (sourceMap === undefined) {\r\n    sourceMap = new SourceMap(entry.data, { lineLengths: entry.lineLengths });\r\n    entry.sourceMap = sourceMap;\r\n  }\r\n  return sourceMap;\r\n}\r\n\r\nmodule.exports = {\r\n  findSourceMap,\r\n  getSourceMapsEnabled,\r\n  setSourceMapsEnabled,\r\n  maybeCacheSourceMap,\r\n  maybeCacheGeneratedSourceMap,\r\n  sourceMapCacheToObject,\r\n};\r\n"
  },
  "41": {
    "metadata": {
      "scriptId": "41",
      "url": "node:internal/modules/helpers",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 324,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8eba85f01dec9d2ccca043ca4c15e098abfad452525ffebee91a09e8322a3bfb",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 10023,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/helpers"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ObjectDefineProperty,\r\n  ObjectPrototypeHasOwnProperty,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeSlice,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n} = require('internal/errors').codes;\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\n\r\nconst { validateString } = require('internal/validators');\r\nconst fs = require('fs'); // Import all of `fs` so that it can be monkey-patched.\r\nconst internalFS = require('internal/fs/utils');\r\nconst path = require('path');\r\nconst { pathToFileURL, fileURLToPath } = require('internal/url');\r\nconst assert = require('internal/assert');\r\n\r\nconst { getOptionValue } = require('internal/options');\r\nconst { setOwnProperty } = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst { canParse: URLCanParse } = internalBinding('url');\r\n\r\nlet debug = require('internal/util/debuglog').debuglog('module', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\n/** @typedef {import('internal/modules/cjs/loader.js').Module} Module */\r\n\r\n/**\r\n * Cache for storing resolved real paths of modules.\r\n * In order to minimize unnecessary lstat() calls, this cache is a list of known-real paths.\r\n * Set to an empty Map to reset.\r\n * @type {Map<string, string>}\r\n */\r\nconst realpathCache = new SafeMap();\r\n/**\r\n * Resolves the path of a given `require` specifier, following symlinks.\r\n * @param {string} requestPath The `require` specifier\r\n */\r\nfunction toRealPath(requestPath) {\r\n  return fs.realpathSync(requestPath, {\r\n    [internalFS.realpathCacheKey]: realpathCache,\r\n  });\r\n}\r\n\r\n/** @type {Set<string>} */\r\nlet cjsConditions;\r\n/**\r\n * Define the conditions that apply to the CommonJS loader.\r\n */\r\nfunction initializeCjsConditions() {\r\n  const userConditions = getOptionValue('--conditions');\r\n  const noAddons = getOptionValue('--no-addons');\r\n  const addonConditions = noAddons ? [] : ['node-addons'];\r\n  // TODO: Use this set when resolving pkg#exports conditions in loader.js.\r\n  cjsConditions = new SafeSet([\r\n    'require',\r\n    'node',\r\n    ...addonConditions,\r\n    ...userConditions,\r\n  ]);\r\n}\r\n\r\n/**\r\n * Get the conditions that apply to the CommonJS loader.\r\n */\r\nfunction getCjsConditions() {\r\n  if (cjsConditions === undefined) {\r\n    initializeCjsConditions();\r\n  }\r\n  return cjsConditions;\r\n}\r\n\r\n/**\r\n * Provide one of Node.js' public modules to user code.\r\n * @param {string} id - The identifier/specifier of the builtin module to load\r\n * @param {string} request - The module requiring or importing the builtin module\r\n */\r\nfunction loadBuiltinModule(id, request) {\r\n  if (!BuiltinModule.canBeRequiredByUsers(id)) {\r\n    return;\r\n  }\r\n  /** @type {import('internal/bootstrap/realm.js').BuiltinModule} */\r\n  const mod = BuiltinModule.map.get(id);\r\n  debug('load built-in module %s', request);\r\n  // compileForPublicLoader() throws if canBeRequiredByUsers is false:\r\n  mod.compileForPublicLoader();\r\n  return mod;\r\n}\r\n\r\n/** @type {Module} */\r\nlet $Module = null;\r\n/**\r\n * Import the Module class on first use.\r\n */\r\nfunction lazyModule() {\r\n  $Module = $Module || require('internal/modules/cjs/loader').Module;\r\n  return $Module;\r\n}\r\n\r\n/**\r\n * Create the module-scoped `require` function to pass into CommonJS modules.\r\n * @param {Module} mod - The module to create the `require` function for.\r\n * @typedef {(specifier: string) => unknown} RequireFunction\r\n */\r\nfunction makeRequireFunction(mod) {\r\n  // lazy due to cycle\r\n  const Module = lazyModule();\r\n  if (mod instanceof Module !== true) {\r\n    throw new ERR_INVALID_ARG_TYPE('mod', 'Module', mod);\r\n  }\r\n\r\n  function require(path) {\r\n    return mod.require(path);\r\n  }\r\n\r\n  /**\r\n   * The `resolve` method that gets attached to module-scope `require`.\r\n   * @param {string} request\r\n   * @param {Parameters<Module['_resolveFilename']>[3]} options\r\n   */\r\n  function resolve(request, options) {\r\n    validateString(request, 'request');\r\n    return Module._resolveFilename(request, mod, false, options);\r\n  }\r\n\r\n  require.resolve = resolve;\r\n\r\n  /**\r\n   * The `paths` method that gets attached to module-scope `require`.\r\n   * @param {string} request\r\n   */\r\n  function paths(request) {\r\n    validateString(request, 'request');\r\n    return Module._resolveLookupPaths(request, mod);\r\n  }\r\n\r\n  resolve.paths = paths;\r\n\r\n  setOwnProperty(require, 'main', process.mainModule);\r\n\r\n  // Enable support to add extra extension types.\r\n  require.extensions = Module._extensions;\r\n\r\n  require.cache = Module._cache;\r\n\r\n  return require;\r\n}\r\n\r\n/**\r\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n * because the buffer-to-string conversion in `fs.readFileSync()`\r\n * translates it to FEFF, the UTF-16 BOM.\r\n * @param {string} content\r\n */\r\nfunction stripBOM(content) {\r\n  if (StringPrototypeCharCodeAt(content) === 0xFEFF) {\r\n    content = StringPrototypeSlice(content, 1);\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Add built-in modules to a global or REPL scope object.\r\n * @param {Record<string, unknown>} object - The object such as `globalThis` to add the built-in modules to.\r\n * @param {string} dummyModuleName - The label representing the set of built-in modules to add.\r\n */\r\nfunction addBuiltinLibsToObject(object, dummyModuleName) {\r\n  // Make built-in modules available directly (loaded lazily).\r\n  const Module = require('internal/modules/cjs/loader').Module;\r\n  const { builtinModules } = Module;\r\n\r\n  // To require built-in modules in user-land and ignore modules whose\r\n  // `canBeRequiredByUsers` is false. So we create a dummy module object and not\r\n  // use `require()` directly.\r\n  const dummyModule = new Module(dummyModuleName);\r\n\r\n  ArrayPrototypeForEach(builtinModules, (name) => {\r\n    // Neither add underscored modules, nor ones that contain slashes (e.g.,\r\n    // 'fs/promises') or ones that are already defined.\r\n    if (StringPrototypeStartsWith(name, '_') ||\r\n        StringPrototypeIncludes(name, '/') ||\r\n        ObjectPrototypeHasOwnProperty(object, name)) {\r\n      return;\r\n    }\r\n    // Goals of this mechanism are:\r\n    // - Lazy loading of built-in modules\r\n    // - Having all built-in modules available as non-enumerable properties\r\n    // - Allowing the user to re-assign these variables as if there were no\r\n    //   pre-existing globals with the same name.\r\n\r\n    const setReal = (val) => {\r\n      // Deleting the property before re-assigning it disables the\r\n      // getter/setter mechanism.\r\n      delete object[name];\r\n      object[name] = val;\r\n    };\r\n\r\n    ObjectDefineProperty(object, name, {\r\n      __proto__: null,\r\n      get: () => {\r\n        const lib = dummyModule.require(name);\r\n\r\n        try {\r\n          // Override the current getter/setter and set up a new\r\n          // non-enumerable property.\r\n          ObjectDefineProperty(object, name, {\r\n            __proto__: null,\r\n            get: () => lib,\r\n            set: setReal,\r\n            configurable: true,\r\n            enumerable: false,\r\n          });\r\n        } catch {\r\n          // If the property is no longer configurable, ignore the error.\r\n        }\r\n\r\n        return lib;\r\n      },\r\n      set: setReal,\r\n      configurable: true,\r\n      enumerable: false,\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Normalize the referrer name as a URL.\r\n * If it's a string containing an absolute path or a URL it's normalized as\r\n * a URL string.\r\n * Otherwise it's returned as undefined.\r\n * @param {string | null | undefined} referrerName\r\n * @returns {string | undefined}\r\n */\r\nfunction normalizeReferrerURL(referrerName) {\r\n  if (referrerName === null || referrerName === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (typeof referrerName === 'string') {\r\n    if (path.isAbsolute(referrerName)) {\r\n      return pathToFileURL(referrerName).href;\r\n    }\r\n\r\n    if (StringPrototypeStartsWith(referrerName, 'file://') ||\r\n        URLCanParse(referrerName)) {\r\n      return referrerName;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  assert.fail('Unreachable code reached by ' + inspect(referrerName));\r\n}\r\n\r\n\r\n/**\r\n * @param {string|undefined} url URL to convert to filename\r\n */\r\nfunction urlToFilename(url) {\r\n  if (url && StringPrototypeStartsWith(url, 'file://')) {\r\n    return fileURLToPath(url);\r\n  }\r\n  return url;\r\n}\r\n\r\n// Whether we have started executing any user-provided CJS code.\r\n// This is set right before we call the wrapped CJS code (not after,\r\n// in case we are half-way in the execution when internals check this).\r\n// Used for internal assertions.\r\nlet _hasStartedUserCJSExecution = false;\r\n// Similar to _hasStartedUserCJSExecution but for ESM. This is set\r\n// right before ESM evaluation in the default ESM loader. We do not\r\n// update this during vm SourceTextModule execution because at that point\r\n// some user code must already have been run to execute code via vm\r\n// there is little value checking whether any user JS code is run anyway.\r\nlet _hasStartedUserESMExecution = false;\r\n\r\n/**\r\n * Load a public built-in module. ID may or may not be prefixed by `node:` and\r\n * will be normalized.\r\n * @param {string} id ID of the built-in to be loaded.\r\n * @returns {object|undefined} exports of the built-in. Undefined if the built-in\r\n * does not exist.\r\n */\r\nfunction getBuiltinModule(id) {\r\n  validateString(id, 'id');\r\n  const normalizedId = BuiltinModule.normalizeRequirableId(id);\r\n  return normalizedId ? require(normalizedId) : undefined;\r\n}\r\n\r\nmodule.exports = {\r\n  addBuiltinLibsToObject,\r\n  getBuiltinModule,\r\n  getCjsConditions,\r\n  initializeCjsConditions,\r\n  loadBuiltinModule,\r\n  makeRequireFunction,\r\n  normalizeReferrerURL,\r\n  stripBOM,\r\n  toRealPath,\r\n  hasStartedUserCJSExecution() {\r\n    return _hasStartedUserCJSExecution;\r\n  },\r\n  setHasStartedUserCJSExecution() {\r\n    _hasStartedUserCJSExecution = true;\r\n  },\r\n  hasStartedUserESMExecution() {\r\n    return _hasStartedUserESMExecution;\r\n  },\r\n  setHasStartedUserESMExecution() {\r\n    _hasStartedUserESMExecution = true;\r\n  },\r\n  urlToFilename,\r\n};\r\n"
  },
  "42": {
    "metadata": {
      "scriptId": "42",
      "url": "node:fs",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 3309,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "5691e2a88a8ef3546e1a1954be6920cf5d9692de2fdd801ad2bd7ae05a7f902f",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 89757,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:fs"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\r\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePush,\r\n  BigIntPrototypeToString,\r\n  Boolean,\r\n  MathMax,\r\n  Number,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  Promise,\r\n  PromiseResolve,\r\n  ReflectApply,\r\n  SafeMap,\r\n  SafeSet,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeSlice,\r\n  uncurryThis,\r\n} = primordials;\r\n\r\nconst { fs: constants } = internalBinding('constants');\r\nconst {\r\n  S_IFIFO,\r\n  S_IFLNK,\r\n  S_IFMT,\r\n  S_IFREG,\r\n  S_IFSOCK,\r\n  F_OK,\r\n  R_OK,\r\n  W_OK,\r\n  X_OK,\r\n  O_WRONLY,\r\n  O_SYMLINK,\r\n} = constants;\r\n\r\nconst pathModule = require('path');\r\nconst { isAbsolute } = pathModule;\r\nconst { isArrayBufferView } = require('internal/util/types');\r\n\r\nconst binding = internalBinding('fs');\r\n\r\nconst { createBlobFromFilePath } = require('internal/blob');\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { isBuffer: BufferIsBuffer } = Buffer;\r\nconst BufferToString = uncurryThis(Buffer.prototype.toString);\r\nconst {\r\n  AbortError,\r\n  aggregateTwoErrors,\r\n  codes: {\r\n    ERR_ACCESS_DENIED,\r\n    ERR_FS_FILE_TOO_LARGE,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  FSReqCallback,\r\n  statValues,\r\n} = binding;\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  customPromisifyArgs: kCustomPromisifyArgsSymbol,\r\n  emitExperimentalWarning,\r\n  getLazy,\r\n  kEmptyObject,\r\n  promisify: {\r\n    custom: kCustomPromisifiedSymbol,\r\n  },\r\n  SideEffectFreeRegExpPrototypeExec,\r\n  defineLazyProperties,\r\n} = require('internal/util');\r\nconst {\r\n  constants: {\r\n    kIoMaxLength,\r\n    kMaxUserId,\r\n  },\r\n  copyObject,\r\n  Dirent,\r\n  emitRecursiveRmdirWarning,\r\n  getDirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedFd,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  preprocessSymlinkDestination,\r\n  Stats,\r\n  getStatFsFromBinding,\r\n  getStatsFromBinding,\r\n  realpathCacheKey,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateCpOptions,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validatePosition,\r\n  validateRmOptions,\r\n  validateRmOptionsSync,\r\n  validateRmdirOptions,\r\n  validateStringAfterArrayBufferView,\r\n  warnOnNonPortableTemplate,\r\n} = require('internal/fs/utils');\r\nconst {\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n} = require('internal/constants');\r\nconst {\r\n  isInt32,\r\n  parseFileMode,\r\n  validateBoolean,\r\n  validateBuffer,\r\n  validateEncoding,\r\n  validateFunction,\r\n  validateInteger,\r\n  validateObject,\r\n  validateString,\r\n  kValidateObjectAllowNullable,\r\n} = require('internal/validators');\r\n\r\nconst permission = require('internal/process/permission');\r\n\r\nlet truncateWarn = true;\r\nlet fs;\r\n\r\n// Lazy loaded\r\nlet cpFn;\r\nlet cpSyncFn;\r\nlet promises = null;\r\nlet ReadStream;\r\nlet WriteStream;\r\nlet rimraf;\r\nlet rimrafSync;\r\nlet kResistStopPropagation;\r\n\r\n// These have to be separate because of how graceful-fs happens to do it's\r\n// monkeypatching.\r\nlet FileReadStream;\r\nlet FileWriteStream;\r\n\r\nconst isWindows = process.platform === 'win32';\r\nconst isOSX = process.platform === 'darwin';\r\n\r\nfunction showTruncateDeprecation() {\r\n  if (truncateWarn) {\r\n    process.emitWarning(\r\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\r\n      'fs.ftruncate with a file descriptor instead.',\r\n      'DeprecationWarning', 'DEP0081');\r\n    truncateWarn = false;\r\n  }\r\n}\r\n\r\n// Ensure that callbacks run in the global context. Only use this function\r\n// for callbacks that are passed to the binding layer, callbacks that are\r\n// invoked from JS already run in the proper scope.\r\nfunction makeCallback(cb) {\r\n  validateFunction(cb, 'cb');\r\n\r\n  return (...args) => ReflectApply(cb, this, args);\r\n}\r\n\r\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\r\n// an optimization, since the data passed back to the callback needs to be\r\n// transformed anyway.\r\nfunction makeStatsCallback(cb) {\r\n  validateFunction(cb, 'cb');\r\n\r\n  return (err, stats) => {\r\n    if (err) return cb(err);\r\n    cb(err, getStatsFromBinding(stats));\r\n  };\r\n}\r\n\r\nconst isFd = isInt32;\r\n\r\nfunction isFileType(stats, fileType) {\r\n  // Use stats array directly to avoid creating an fs.Stats instance just for\r\n  // our internal use.\r\n  let mode = stats[1];\r\n  if (typeof mode === 'bigint')\r\n    mode = Number(mode);\r\n  return (mode & S_IFMT) === fileType;\r\n}\r\n\r\n/**\r\n * Tests a user's permissions for the file or directory\r\n * specified by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [mode]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction access(path, mode, callback) {\r\n  if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = F_OK;\r\n  }\r\n\r\n  path = getValidatedPath(path);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.access(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously tests a user's permissions for the file or\r\n * directory specified by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [mode]\r\n * @returns {void}\r\n */\r\nfunction accessSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n  binding.access(pathModule.toNamespacedPath(path), mode);\r\n}\r\n\r\n/**\r\n * Tests whether or not the given path exists.\r\n * @param {string | Buffer | URL} path\r\n * @param {(exists?: boolean) => any} callback\r\n * @returns {void}\r\n */\r\nfunction exists(path, callback) {\r\n  validateFunction(callback, 'cb');\r\n\r\n  function suppressedCallback(err) {\r\n    callback(err ? false : true);\r\n  }\r\n\r\n  try {\r\n    fs.access(path, F_OK, suppressedCallback);\r\n  } catch {\r\n    return callback(false);\r\n  }\r\n}\r\n\r\nObjectDefineProperty(exists, kCustomPromisifiedSymbol, {\r\n  __proto__: null,\r\n  value: function exists(path) { // eslint-disable-line func-name-matching\r\n    return new Promise((resolve) => fs.exists(path, resolve));\r\n  },\r\n});\r\n\r\n// fs.existsSync never throws, it only returns true or false.\r\n// Since fs.existsSync never throws, users have established\r\n// the expectation that passing invalid arguments to it, even like\r\n// fs.existsSync(), would only get a false in return, so we cannot signal\r\n// validation errors to users properly out of compatibility concerns.\r\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\r\n/**\r\n * Synchronously tests whether or not the given path exists.\r\n * @param {string | Buffer | URL} path\r\n * @returns {boolean}\r\n */\r\nfunction existsSync(path) {\r\n  try {\r\n    path = getValidatedPath(path);\r\n  } catch {\r\n    return false;\r\n  }\r\n\r\n  return binding.existsSync(pathModule.toNamespacedPath(path));\r\n}\r\n\r\nfunction readFileAfterOpen(err, fd) {\r\n  const context = this.context;\r\n\r\n  if (err) {\r\n    context.callback(err);\r\n    return;\r\n  }\r\n\r\n  context.fd = fd;\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = readFileAfterStat;\r\n  req.context = context;\r\n  binding.fstat(fd, false, req);\r\n}\r\n\r\nfunction readFileAfterStat(err, stats) {\r\n  const context = this.context;\r\n\r\n  if (err)\r\n    return context.close(err);\r\n\r\n  // TODO(BridgeAR): Check if allocating a smaller chunk is better performance\r\n  // wise, similar to the promise based version (less peak memory and chunked\r\n  // stringify operations vs multiple C++/JS boundary crossings).\r\n  const size = context.size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n\r\n  if (size > kIoMaxLength) {\r\n    err = new ERR_FS_FILE_TOO_LARGE(size);\r\n    return context.close(err);\r\n  }\r\n\r\n  try {\r\n    if (size === 0) {\r\n      // TODO(BridgeAR): If an encoding is set, use the StringDecoder to concat\r\n      // the result and reuse the buffer instead of allocating a new one.\r\n      context.buffers = [];\r\n    } else {\r\n      context.buffer = Buffer.allocUnsafeSlow(size);\r\n    }\r\n  } catch (err) {\r\n    return context.close(err);\r\n  }\r\n  context.read();\r\n}\r\n\r\nfunction checkAborted(signal, callback) {\r\n  if (signal?.aborted) {\r\n    callback(new AbortError(undefined, { cause: signal?.reason }));\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Asynchronously reads the entire contents of a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   flag?: string;\r\n *   signal?: AbortSignal;\r\n *   } | string} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   data?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readFile(path, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, { flag: 'r' });\r\n  const ReadFileContext = require('internal/fs/read/context');\r\n  const context = new ReadFileContext(callback, options.encoding);\r\n  context.isUserFd = isFd(path); // File descriptor ownership\r\n\r\n  if (options.signal) {\r\n    context.signal = options.signal;\r\n  }\r\n  if (context.isUserFd) {\r\n    process.nextTick(function tick(context) {\r\n      ReflectApply(readFileAfterOpen, { context }, [null, path]);\r\n    }, context);\r\n    return;\r\n  }\r\n\r\n  if (checkAborted(options.signal, callback))\r\n    return;\r\n\r\n  const flagsNumber = stringToFlags(options.flag, 'options.flag');\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.context = context;\r\n  req.oncomplete = readFileAfterOpen;\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               flagsNumber,\r\n               0o666,\r\n               req);\r\n}\r\n\r\nfunction tryStatSync(fd, isUserFd) {\r\n  const stats = binding.fstat(fd, false, undefined, true /* shouldNotThrow */);\r\n  if (stats === undefined && !isUserFd) {\r\n    fs.closeSync(fd);\r\n  }\r\n  return stats;\r\n}\r\n\r\nfunction tryCreateBuffer(size, fd, isUserFd) {\r\n  let threw = true;\r\n  let buffer;\r\n  try {\r\n    if (size > kIoMaxLength) {\r\n      throw new ERR_FS_FILE_TOO_LARGE(size);\r\n    }\r\n    buffer = Buffer.allocUnsafe(size);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return buffer;\r\n}\r\n\r\nfunction tryReadSync(fd, isUserFd, buffer, pos, len) {\r\n  let threw = true;\r\n  let bytesRead;\r\n  try {\r\n    bytesRead = fs.readSync(fd, buffer, pos, len);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return bytesRead;\r\n}\r\n\r\n/**\r\n * Synchronously reads the entire contents of a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   flag?: string;\r\n *   }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction readFileSync(path, options) {\r\n  options = getOptions(options, { flag: 'r' });\r\n\r\n  if (options.encoding === 'utf8' || options.encoding === 'utf-8') {\r\n    if (!isInt32(path)) {\r\n      path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n    }\r\n    return binding.readFileUtf8(path, stringToFlags(options.flag));\r\n  }\r\n\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, options.flag, 0o666);\r\n\r\n  const stats = tryStatSync(fd, isUserFd);\r\n  const size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n  let pos = 0;\r\n  let buffer; // Single buffer with file data\r\n  let buffers; // List for when size is unknown\r\n\r\n  if (size === 0) {\r\n    buffers = [];\r\n  } else {\r\n    buffer = tryCreateBuffer(size, fd, isUserFd);\r\n  }\r\n\r\n  let bytesRead;\r\n\r\n  if (size !== 0) {\r\n    do {\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, pos, size - pos);\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0 && pos < size);\r\n  } else {\r\n    do {\r\n      // The kernel lies about many files.\r\n      // Go ahead and try to read some bytes.\r\n      buffer = Buffer.allocUnsafe(8192);\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, 0, 8192);\r\n      if (bytesRead !== 0) {\r\n        ArrayPrototypePush(buffers, buffer.slice(0, bytesRead));\r\n      }\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0);\r\n  }\r\n\r\n  if (!isUserFd)\r\n    fs.closeSync(fd);\r\n\r\n  if (size === 0) {\r\n    // Data was collected into the buffers list.\r\n    buffer = Buffer.concat(buffers, pos);\r\n  } else if (pos < size) {\r\n    buffer = buffer.slice(0, pos);\r\n  }\r\n\r\n  if (options.encoding) buffer = buffer.toString(options.encoding);\r\n  return buffer;\r\n}\r\n\r\nfunction defaultCloseCallback(err) {\r\n  if (err != null) throw err;\r\n}\r\n\r\n/**\r\n * Closes the file descriptor.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} [callback]\r\n * @returns {void}\r\n */\r\nfunction close(fd, callback = defaultCloseCallback) {\r\n  if (callback !== defaultCloseCallback)\r\n    callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.close(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously closes the file descriptor.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction closeSync(fd) {\r\n  binding.close(fd);\r\n}\r\n\r\n/**\r\n * Asynchronously opens a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} [flags]\r\n * @param {string | number} [mode]\r\n * @param {(\r\n *   err?: Error,\r\n *   fd?: number\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction open(path, flags, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  if (arguments.length < 3) {\r\n    callback = flags;\r\n    flags = 'r';\r\n    mode = 0o666;\r\n  } else if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = 0o666;\r\n  } else {\r\n    mode = parseFileMode(mode, 'mode', 0o666);\r\n  }\r\n  const flagsNumber = stringToFlags(flags);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               flagsNumber,\r\n               mode,\r\n               req);\r\n}\r\n\r\n/**\r\n * Synchronously opens a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} [flags]\r\n * @param {string | number} [mode]\r\n * @returns {number}\r\n */\r\nfunction openSync(path, flags, mode) {\r\n  path = getValidatedPath(path);\r\n\r\n  return binding.open(\r\n    pathModule.toNamespacedPath(path),\r\n    stringToFlags(flags),\r\n    parseFileMode(mode, 'mode', 0o666),\r\n  );\r\n}\r\n\r\n/**\r\n * @param {string | Buffer | URL } path\r\n * @param {{\r\n *   type?: string;\r\n *   }} [options]\r\n * @returns {Promise<Blob>}\r\n */\r\nfunction openAsBlob(path, options = kEmptyObject) {\r\n  validateObject(options, 'options');\r\n  const type = options.type || '';\r\n  validateString(type, 'options.type');\r\n  // The underlying implementation here returns the Blob synchronously for now.\r\n  // To give ourselves flexibility to maybe return the Blob asynchronously,\r\n  // this API returns a Promise.\r\n  path = getValidatedPath(path);\r\n  return PromiseResolve(createBlobFromFilePath(pathModule.toNamespacedPath(path), { type }));\r\n}\r\n\r\n/**\r\n * Reads file from the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView} buffer\r\n * @param {number | {\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | bigint | null;\r\n *   }} [offsetOrOptions]\r\n * @param {number} length\r\n * @param {number | bigint | null} position\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesRead?: number,\r\n *   buffer?: Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction read(fd, buffer, offsetOrOptions, length, position, callback) {\r\n  fd = getValidatedFd(fd);\r\n\r\n  let offset = offsetOrOptions;\r\n  let params = null;\r\n  if (arguments.length <= 4) {\r\n    if (arguments.length === 4) {\r\n      // This is fs.read(fd, buffer, options, callback)\r\n      validateObject(offsetOrOptions, 'options', kValidateObjectAllowNullable);\r\n      callback = length;\r\n      params = offsetOrOptions;\r\n    } else if (arguments.length === 3) {\r\n      // This is fs.read(fd, bufferOrParams, callback)\r\n      if (!isArrayBufferView(buffer)) {\r\n        // This is fs.read(fd, params, callback)\r\n        params = buffer;\r\n        ({ buffer = Buffer.alloc(16384) } = params ?? kEmptyObject);\r\n      }\r\n      callback = offsetOrOptions;\r\n    } else {\r\n      // This is fs.read(fd, callback)\r\n      callback = buffer;\r\n      buffer = Buffer.alloc(16384);\r\n    }\r\n\r\n    if (params !== undefined) {\r\n      validateObject(params, 'options', kValidateObjectAllowNullable);\r\n    }\r\n    ({\r\n      offset = 0,\r\n      length = buffer?.byteLength - offset,\r\n      position = null,\r\n    } = params ?? kEmptyObject);\r\n  }\r\n\r\n  validateBuffer(buffer);\r\n  validateFunction(callback, 'cb');\r\n\r\n  if (offset == null) {\r\n    offset = 0;\r\n  } else {\r\n    validateInteger(offset, 'offset', 0);\r\n  }\r\n\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return process.nextTick(function tick() {\r\n      callback(null, 0, buffer);\r\n    });\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (position == null) {\r\n    position = -1;\r\n  } else {\r\n    validatePosition(position, 'position', length);\r\n  }\r\n\r\n  function wrapper(err, bytesRead) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, bytesRead || 0, buffer);\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  binding.read(fd, buffer, offset, length, position, req);\r\n}\r\n\r\nObjectDefineProperty(read, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesRead', 'buffer'], enumerable: false });\r\n\r\n/**\r\n * Synchronously reads the file from the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView} buffer\r\n * @param {number | {\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | bigint | null;\r\n *   }} [offsetOrOptions]\r\n * @param {number} [length]\r\n * @param {number} [position]\r\n * @returns {number}\r\n */\r\nfunction readSync(fd, buffer, offsetOrOptions, length, position) {\r\n  fd = getValidatedFd(fd);\r\n\r\n  validateBuffer(buffer);\r\n\r\n  let offset = offsetOrOptions;\r\n  if (arguments.length <= 3 || typeof offsetOrOptions === 'object') {\r\n    if (offsetOrOptions !== undefined) {\r\n      validateObject(offsetOrOptions, 'options', kValidateObjectAllowNullable);\r\n    }\r\n\r\n    ({\r\n      offset = 0,\r\n      length = buffer.byteLength - offset,\r\n      position = null,\r\n    } = offsetOrOptions ?? kEmptyObject);\r\n  }\r\n\r\n  if (offset === undefined) {\r\n    offset = 0;\r\n  } else {\r\n    validateInteger(offset, 'offset', 0);\r\n  }\r\n\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (position == null) {\r\n    position = -1;\r\n  } else {\r\n    validatePosition(position, 'position', length);\r\n  }\r\n\r\n  return binding.read(fd, buffer, offset, length, position);\r\n}\r\n\r\n/**\r\n * Reads file from the specified `fd` (file descriptor)\r\n * and writes to an array of `ArrayBufferView`s.\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesRead?: number,\r\n *   buffers?: ArrayBufferView[];\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readv(fd, buffers, position, callback) {\r\n  function wrapper(err, read) {\r\n    callback(err, read || 0, buffers);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n  callback ||= position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  binding.readBuffers(fd, buffers, position, req);\r\n}\r\n\r\nObjectDefineProperty(readv, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesRead', 'buffers'], enumerable: false });\r\n\r\n/**\r\n * Synchronously reads file from the\r\n * specified `fd` (file descriptor) and writes to an array\r\n * of `ArrayBufferView`s.\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @returns {number}\r\n */\r\nfunction readvSync(fd, buffers, position) {\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  return binding.readBuffers(fd, buffers, position);\r\n}\r\n\r\n/**\r\n * Writes `buffer` to the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView | string} buffer\r\n * @param {number | object} [offsetOrOptions]\r\n * @param {number} [length]\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesWritten?: number;\r\n *   buffer?: Buffer | TypedArray | DataView\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction write(fd, buffer, offsetOrOptions, length, position, callback) {\r\n  function wrapper(err, written) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, written || 0, buffer);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n\r\n  let offset = offsetOrOptions;\r\n  if (isArrayBufferView(buffer)) {\r\n    callback ||= position || length || offset;\r\n    validateFunction(callback, 'cb');\r\n\r\n    if (typeof offset === 'object') {\r\n      ({\r\n        offset = 0,\r\n        length = buffer.byteLength - offset,\r\n        position = null,\r\n      } = offsetOrOptions ?? kEmptyObject);\r\n    }\r\n\r\n    if (offset == null || typeof offset === 'function') {\r\n      offset = 0;\r\n    } else {\r\n      validateInteger(offset, 'offset', 0);\r\n    }\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    if (typeof position !== 'number')\r\n      position = null;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = wrapper;\r\n    binding.writeBuffer(fd, buffer, offset, length, position, req);\r\n    return;\r\n  }\r\n\r\n  validateStringAfterArrayBufferView(buffer, 'buffer');\r\n\r\n  if (typeof position !== 'function') {\r\n    if (typeof offset === 'function') {\r\n      position = offset;\r\n      offset = null;\r\n    } else {\r\n      position = length;\r\n    }\r\n    length = 'utf8';\r\n  }\r\n\r\n  const str = buffer;\r\n  validateEncoding(str, length);\r\n  callback = position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n  binding.writeString(fd, str, offset, length, req);\r\n}\r\n\r\nObjectDefineProperty(write, kCustomPromisifyArgsSymbol,\r\n                     { __proto__: null, value: ['bytesWritten', 'buffer'], enumerable: false });\r\n\r\n/**\r\n * Synchronously writes `buffer` to the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {Buffer | TypedArray | DataView | string} buffer\r\n * @param {{\r\n *   offset?: number;\r\n *   length?: number;\r\n *   position?: number | null;\r\n *   }} [offsetOrOptions]\r\n * @returns {number}\r\n */\r\nfunction writeSync(fd, buffer, offsetOrOptions, length, position) {\r\n  fd = getValidatedFd(fd);\r\n  const ctx = {};\r\n  let result;\r\n\r\n  let offset = offsetOrOptions;\r\n  if (isArrayBufferView(buffer)) {\r\n    if (typeof offset === 'object') {\r\n      ({\r\n        offset = 0,\r\n        length = buffer.byteLength - offset,\r\n        position = null,\r\n      } = offsetOrOptions ?? kEmptyObject);\r\n    }\r\n    if (position === undefined)\r\n      position = null;\r\n    if (offset == null) {\r\n      offset = 0;\r\n    } else {\r\n      validateInteger(offset, 'offset', 0);\r\n    }\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n    result = binding.writeBuffer(fd, buffer, offset, length, position,\r\n                                 undefined, ctx);\r\n  } else {\r\n    validateStringAfterArrayBufferView(buffer, 'buffer');\r\n    validateEncoding(buffer, length);\r\n\r\n    if (offset === undefined)\r\n      offset = null;\r\n    result = binding.writeString(fd, buffer, offset, length,\r\n                                 undefined, ctx);\r\n  }\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Writes an array of `ArrayBufferView`s to the\r\n * specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @param {(\r\n *   err?: Error,\r\n *   bytesWritten?: number,\r\n *   buffers?: ArrayBufferView[]\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction writev(fd, buffers, position, callback) {\r\n  function wrapper(err, written) {\r\n    callback(err, written || 0, buffers);\r\n  }\r\n\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n  callback ||= position;\r\n  validateFunction(callback, 'cb');\r\n\r\n  if (buffers.length === 0) {\r\n    process.nextTick(callback, null, 0, buffers);\r\n    return;\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  binding.writeBuffers(fd, buffers, position, req);\r\n}\r\n\r\nObjectDefineProperty(writev, kCustomPromisifyArgsSymbol, {\r\n  __proto__: null,\r\n  value: ['bytesWritten', 'buffer'],\r\n  enumerable: false,\r\n});\r\n\r\n/**\r\n * Synchronously writes an array of `ArrayBufferView`s\r\n * to the specified `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {ArrayBufferView[]} buffers\r\n * @param {number | null} [position]\r\n * @returns {number}\r\n */\r\nfunction writevSync(fd, buffers, position) {\r\n  fd = getValidatedFd(fd);\r\n  validateBufferArray(buffers);\r\n\r\n  if (buffers.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  return binding.writeBuffers(fd, buffers, position);\r\n}\r\n\r\n/**\r\n * Asynchronously renames file at `oldPath` to\r\n * the pathname provided as `newPath`.\r\n * @param {string | Buffer | URL} oldPath\r\n * @param {string | Buffer | URL} newPath\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rename(oldPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.rename(pathModule.toNamespacedPath(oldPath),\r\n                 pathModule.toNamespacedPath(newPath),\r\n                 req);\r\n}\r\n\r\n\r\n/**\r\n * Synchronously renames file at `oldPath` to\r\n * the pathname provided as `newPath`.\r\n * @param {string | Buffer | URL} oldPath\r\n * @param {string | Buffer | URL} newPath\r\n * @returns {void}\r\n */\r\nfunction renameSync(oldPath, newPath) {\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  binding.rename(\r\n    pathModule.toNamespacedPath(oldPath),\r\n    pathModule.toNamespacedPath(newPath),\r\n  );\r\n}\r\n\r\n/**\r\n * Truncates the file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [len]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction truncate(path, len, callback) {\r\n  if (typeof path === 'number') {\r\n    showTruncateDeprecation();\r\n    return fs.ftruncate(path, len, callback);\r\n  }\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  } else if (len === undefined) {\r\n    len = 0;\r\n  }\r\n\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  validateFunction(callback, 'cb');\r\n  fs.open(path, 'r+', (er, fd) => {\r\n    if (er) return callback(er);\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = function oncomplete(er) {\r\n      fs.close(fd, (er2) => {\r\n        callback(aggregateTwoErrors(er2, er));\r\n      });\r\n    };\r\n    binding.ftruncate(fd, len, req);\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously truncates the file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} [len]\r\n * @returns {void}\r\n */\r\nfunction truncateSync(path, len) {\r\n  if (typeof path === 'number') {\r\n    // legacy\r\n    showTruncateDeprecation();\r\n    return fs.ftruncateSync(path, len);\r\n  }\r\n  if (len === undefined) {\r\n    len = 0;\r\n  }\r\n  // Allow error to be thrown, but still close fd.\r\n  const fd = fs.openSync(path, 'r+');\r\n  let ret;\r\n\r\n  try {\r\n    ret = fs.ftruncateSync(fd, len);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Truncates the file descriptor.\r\n * @param {number} fd\r\n * @param {number} [len]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction ftruncate(fd, len = 0, callback) {\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  }\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.ftruncate(fd, len, req);\r\n}\r\n\r\n/**\r\n * Synchronously truncates the file descriptor.\r\n * @param {number} fd\r\n * @param {number} [len]\r\n * @returns {void}\r\n */\r\nfunction ftruncateSync(fd, len = 0) {\r\n  validateInteger(len, 'len');\r\n  len = MathMax(0, len);\r\n  binding.ftruncate(fd, len);\r\n}\r\n\r\nfunction lazyLoadCp() {\r\n  if (cpFn === undefined) {\r\n    ({ cpFn } = require('internal/fs/cp/cp'));\r\n    cpFn = require('util').callbackify(cpFn);\r\n    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));\r\n  }\r\n}\r\n\r\nfunction lazyLoadRimraf() {\r\n  if (rimraf === undefined)\r\n    ({ rimraf, rimrafSync } = require('internal/fs/rimraf'));\r\n}\r\n\r\n/**\r\n * Asynchronously removes a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rmdir(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  callback = makeCallback(callback);\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n\r\n  if (options?.recursive) {\r\n    emitRecursiveRmdirWarning();\r\n    validateRmOptions(\r\n      path,\r\n      { ...options, force: false },\r\n      true,\r\n      (err, options) => {\r\n        if (err === false) {\r\n          const req = new FSReqCallback();\r\n          req.oncomplete = callback;\r\n          binding.rmdir(path, req);\r\n          return;\r\n        }\r\n        if (err) {\r\n          return callback(err);\r\n        }\r\n\r\n        lazyLoadRimraf();\r\n        rimraf(path, options, callback);\r\n      });\r\n  } else {\r\n    validateRmdirOptions(options);\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = callback;\r\n    binding.rmdir(path, req);\r\n  }\r\n}\r\n\r\n/**\r\n * Synchronously removes a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @returns {void}\r\n */\r\nfunction rmdirSync(path, options) {\r\n  path = getValidatedPath(path);\r\n\r\n  if (options?.recursive) {\r\n    emitRecursiveRmdirWarning();\r\n    options = validateRmOptionsSync(path, { ...options, force: false }, true);\r\n    if (options !== false) {\r\n      lazyLoadRimraf();\r\n      return rimrafSync(pathModule.toNamespacedPath(path), options);\r\n    }\r\n  } else {\r\n    validateRmdirOptions(options);\r\n  }\r\n\r\n  binding.rmdir(pathModule.toNamespacedPath(path));\r\n}\r\n\r\n/**\r\n * Asynchronously removes files and\r\n * directories (modeled on the standard POSIX `rm` utility).\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   force?: boolean;\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction rm(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  path = getValidatedPath(path);\r\n\r\n  validateRmOptions(path, options, false, (err, options) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n    lazyLoadRimraf();\r\n    return rimraf(pathModule.toNamespacedPath(path), options, callback);\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously removes files and\r\n * directories (modeled on the standard POSIX `rm` utility).\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   force?: boolean;\r\n *   maxRetries?: number;\r\n *   recursive?: boolean;\r\n *   retryDelay?: number;\r\n *   }} [options]\r\n * @returns {void}\r\n */\r\nfunction rmSync(path, options) {\r\n  path = getValidatedPath(path);\r\n  options = validateRmOptionsSync(path, options, false);\r\n\r\n  lazyLoadRimraf();\r\n  return rimrafSync(pathModule.toNamespacedPath(path), options);\r\n}\r\n\r\n/**\r\n * Forces all currently queued I/O operations associated\r\n * with the file to the operating system's synchronized\r\n * I/O completion state.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fdatasync(fd, callback) {\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fdatasync(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously forces all currently queued I/O operations\r\n * associated with the file to the operating\r\n * system's synchronized I/O completion state.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction fdatasyncSync(fd) {\r\n  binding.fdatasync(fd);\r\n}\r\n\r\n/**\r\n * Requests for all data for the open file descriptor\r\n * to be flushed to the storage device.\r\n * @param {number} fd\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fsync(fd, callback) {\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fsync(fd, req);\r\n}\r\n\r\n/**\r\n * Synchronously requests for all data for the open\r\n * file descriptor to be flushed to the storage device.\r\n * @param {number} fd\r\n * @returns {void}\r\n */\r\nfunction fsyncSync(fd) {\r\n  binding.fsync(fd);\r\n}\r\n\r\n/**\r\n * Asynchronously creates a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   recursive?: boolean;\r\n *   mode?: string | number;\r\n *   } | number} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction mkdir(path, options, callback) {\r\n  let mode = 0o777;\r\n  let recursive = false;\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  } else if (typeof options === 'number' || typeof options === 'string') {\r\n    mode = options;\r\n  } else if (options) {\r\n    if (options.recursive !== undefined)\r\n      recursive = options.recursive;\r\n    if (options.mode !== undefined)\r\n      mode = options.mode;\r\n  }\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  validateBoolean(recursive, 'options.recursive');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdir(pathModule.toNamespacedPath(path),\r\n                parseFileMode(mode, 'mode'), recursive, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   recursive?: boolean;\r\n *   mode?: string | number;\r\n *   } | number} [options]\r\n * @returns {string | void}\r\n */\r\nfunction mkdirSync(path, options) {\r\n  let mode = 0o777;\r\n  let recursive = false;\r\n  if (typeof options === 'number' || typeof options === 'string') {\r\n    mode = options;\r\n  } else if (options) {\r\n    if (options.recursive !== undefined)\r\n      recursive = options.recursive;\r\n    if (options.mode !== undefined)\r\n      mode = options.mode;\r\n  }\r\n  path = getValidatedPath(path);\r\n  validateBoolean(recursive, 'options.recursive');\r\n\r\n  const result = binding.mkdir(\r\n    pathModule.toNamespacedPath(path),\r\n    parseFileMode(mode, 'mode'),\r\n    recursive,\r\n  );\r\n\r\n  if (recursive) {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * An iterative algorithm for reading the entire contents of the `basePath` directory.\r\n * This function does not validate `basePath` as a directory. It is passed directly to\r\n * `binding.readdir`.\r\n * @param {string} basePath\r\n * @param {{ encoding: string, withFileTypes: boolean }} options\r\n * @returns {string[] | Dirent[]}\r\n */\r\nfunction readdirSyncRecursive(basePath, options) {\r\n  const withFileTypes = Boolean(options.withFileTypes);\r\n  const encoding = options.encoding;\r\n\r\n  const readdirResults = [];\r\n  const pathsQueue = [basePath];\r\n\r\n  function read(path) {\r\n    const readdirResult = binding.readdir(\r\n      pathModule.toNamespacedPath(path),\r\n      encoding,\r\n      withFileTypes,\r\n    );\r\n\r\n    if (readdirResult === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (withFileTypes) {\r\n      // Calling `readdir` with `withFileTypes=true`, the result is an array of arrays.\r\n      // The first array is the names, and the second array is the types.\r\n      // They are guaranteed to be the same length; hence, setting `length` to the length\r\n      // of the first array within the result.\r\n      const length = readdirResult[0].length;\r\n      for (let i = 0; i < length; i++) {\r\n        const dirent = getDirent(path, readdirResult[0][i], readdirResult[1][i]);\r\n        ArrayPrototypePush(readdirResults, dirent);\r\n        if (dirent.isDirectory()) {\r\n          ArrayPrototypePush(pathsQueue, pathModule.join(dirent.parentPath, dirent.name));\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < readdirResult.length; i++) {\r\n        const resultPath = pathModule.join(path, readdirResult[i]);\r\n        const relativeResultPath = pathModule.relative(basePath, resultPath);\r\n        const stat = binding.internalModuleStat(resultPath);\r\n        ArrayPrototypePush(readdirResults, relativeResultPath);\r\n        // 1 indicates directory\r\n        if (stat === 1) {\r\n          ArrayPrototypePush(pathsQueue, resultPath);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < pathsQueue.length; i++) {\r\n    read(pathsQueue[i]);\r\n  }\r\n\r\n  return readdirResults;\r\n}\r\n\r\n/**\r\n * Reads the contents of a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   encoding?: string;\r\n *   withFileTypes?: boolean;\r\n *   recursive?: boolean;\r\n *   }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   files?: string[] | Buffer[] | Dirent[];\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readdir(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  if (options.recursive != null) {\r\n    validateBoolean(options.recursive, 'options.recursive');\r\n  }\r\n\r\n  if (options.recursive) {\r\n    callback(null, readdirSyncRecursive(path, options));\r\n    return;\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  if (!options.withFileTypes) {\r\n    req.oncomplete = callback;\r\n  } else {\r\n    req.oncomplete = (err, result) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      getDirents(path, result, callback);\r\n    };\r\n  }\r\n  binding.readdir(pathModule.toNamespacedPath(path), options.encoding,\r\n                  !!options.withFileTypes, req);\r\n}\r\n\r\n/**\r\n * Synchronously reads the contents of a directory.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   encoding?: string;\r\n *   withFileTypes?: boolean;\r\n *   recursive?: boolean;\r\n *   }} [options]\r\n * @returns {string | Buffer[] | Dirent[]}\r\n */\r\nfunction readdirSync(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  if (options.recursive != null) {\r\n    validateBoolean(options.recursive, 'options.recursive');\r\n  }\r\n\r\n  if (options.recursive) {\r\n    return readdirSyncRecursive(path, options);\r\n  }\r\n\r\n  const result = binding.readdir(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n    !!options.withFileTypes,\r\n  );\r\n\r\n  return result !== undefined && options.withFileTypes ? getDirents(path, result) : result;\r\n}\r\n\r\n/**\r\n * Invokes the callback with the `fs.Stats`\r\n * for the file descriptor.\r\n * @param {number} fd\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fstat(fd, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.fstat(fd, options.bigint, req);\r\n}\r\n\r\n/**\r\n * Retrieves the `fs.Stats` for the symbolic link\r\n * referred to by the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lstat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.lstat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\n/**\r\n * Asynchronously gets the stats of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ bigint?: boolean; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   stats?: Stats\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction stat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.stat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\nfunction statfs(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = kEmptyObject;\r\n  }\r\n  validateFunction(callback, 'cb');\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = (err, stats) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    callback(err, getStatFsFromBinding(stats));\r\n  };\r\n  binding.statfs(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats` for\r\n * the file descriptor.\r\n * @param {number} fd\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   }} [options]\r\n * @returns {Stats | undefined}\r\n */\r\nfunction fstatSync(fd, options = { bigint: false }) {\r\n  const stats = binding.fstat(fd, options.bigint, undefined, false);\r\n  if (stats === undefined) {\r\n    return;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats` for\r\n * the symbolic link referred to by the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   throwIfNoEntry?: boolean;\r\n *   }} [options]\r\n * @returns {Stats | undefined}\r\n */\r\nfunction lstatSync(path, options = { bigint: false, throwIfNoEntry: true }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.lstat(\r\n    pathModule.toNamespacedPath(path),\r\n    options.bigint,\r\n    undefined,\r\n    options.throwIfNoEntry,\r\n  );\r\n\r\n  if (stats === undefined) {\r\n    return;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Synchronously retrieves the `fs.Stats`\r\n * for the `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   throwIfNoEntry?: boolean;\r\n *   }} [options]\r\n * @returns {Stats}\r\n */\r\nfunction statSync(path, options = { bigint: false, throwIfNoEntry: true }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.stat(\r\n    pathModule.toNamespacedPath(path),\r\n    options.bigint,\r\n    undefined,\r\n    options.throwIfNoEntry,\r\n  );\r\n  if (stats === undefined) {\r\n    return undefined;\r\n  }\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\nfunction statfsSync(path, options = { bigint: false }) {\r\n  path = getValidatedPath(path);\r\n  const stats = binding.statfs(pathModule.toNamespacedPath(path), options.bigint);\r\n  return getStatFsFromBinding(stats);\r\n}\r\n\r\n/**\r\n * Reads the contents of a symbolic link\r\n * referred to by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ encoding?: string; } | string} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   linkString?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction readlink(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path, 'oldPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.readlink(pathModule.toNamespacedPath(path), options.encoding, req);\r\n}\r\n\r\n/**\r\n * Synchronously reads the contents of a symbolic link\r\n * referred to by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {{ encoding?: string; } | string} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction readlinkSync(path, options) {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path, 'oldPath');\r\n  return binding.readlink(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n  );\r\n}\r\n\r\n/**\r\n * Creates the link called `path` pointing to `target`.\r\n * @param {string | Buffer | URL} target\r\n * @param {string | Buffer | URL} path\r\n * @param {string | null} [type_]\r\n * @param {(err?: Error) => any} callback_\r\n * @returns {void}\r\n */\r\nfunction symlink(target, path, type_, callback_) {\r\n  const type = (typeof type_ === 'string' ? type_ : null);\r\n  const callback = makeCallback(arguments[arguments.length - 1]);\r\n\r\n  if (permission.isEnabled()) {\r\n    // The permission model's security guarantees fall apart in the presence of\r\n    // relative symbolic links. Thus, we have to prevent their creation.\r\n    if (BufferIsBuffer(target)) {\r\n      if (!isAbsolute(BufferToString(target))) {\r\n        callback(new ERR_ACCESS_DENIED('relative symbolic link target'));\r\n        return;\r\n      }\r\n    } else if (typeof target !== 'string' || !isAbsolute(toPathIfFileURL(target))) {\r\n      callback(new ERR_ACCESS_DENIED('relative symbolic link target'));\r\n      return;\r\n    }\r\n  }\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n\r\n  if (isWindows && type === null) {\r\n    let absoluteTarget;\r\n    try {\r\n      // Symlinks targets can be relative to the newly created path.\r\n      // Calculate absolute file name of the symlink target, and check\r\n      // if it is a directory. Ignore resolve error to keep symlink\r\n      // errors consistent between platforms if invalid path is\r\n      // provided.\r\n      absoluteTarget = pathModule.resolve(path, '..', target);\r\n    } catch {\r\n      // Continue regardless of error.\r\n    }\r\n    if (absoluteTarget !== undefined) {\r\n      stat(absoluteTarget, (err, stat) => {\r\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\r\n        const resolvedFlags = stringToSymlinkType(resolvedType);\r\n        const destination = preprocessSymlinkDestination(target,\r\n                                                         resolvedType,\r\n                                                         path);\r\n\r\n        const req = new FSReqCallback();\r\n        req.oncomplete = callback;\r\n        binding.symlink(destination,\r\n                        pathModule.toNamespacedPath(path), resolvedFlags, req);\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  const destination = preprocessSymlinkDestination(target, type, path);\r\n\r\n  const flags = stringToSymlinkType(type);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.symlink(destination, pathModule.toNamespacedPath(path), flags, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates the link called `path`\r\n * pointing to `target`.\r\n * @param {string | Buffer | URL} target\r\n * @param {string | Buffer | URL} path\r\n * @param {string | null} [type]\r\n * @returns {void}\r\n */\r\nfunction symlinkSync(target, path, type) {\r\n  type = (typeof type === 'string' ? type : null);\r\n  if (isWindows && type === null) {\r\n    const absoluteTarget = pathModule.resolve(`${path}`, '..', `${target}`);\r\n    if (statSync(absoluteTarget, { throwIfNoEntry: false })?.isDirectory()) {\r\n      type = 'dir';\r\n    }\r\n  }\r\n\r\n  if (permission.isEnabled()) {\r\n    // The permission model's security guarantees fall apart in the presence of\r\n    // relative symbolic links. Thus, we have to prevent their creation.\r\n    if (BufferIsBuffer(target)) {\r\n      if (!isAbsolute(BufferToString(target))) {\r\n        throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n      }\r\n    } else if (typeof target !== 'string' || !isAbsolute(toPathIfFileURL(target))) {\r\n      throw new ERR_ACCESS_DENIED('relative symbolic link target');\r\n    }\r\n  }\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n\r\n  binding.symlink(\r\n    preprocessSymlinkDestination(target, type, path),\r\n    pathModule.toNamespacedPath(path),\r\n    stringToSymlinkType(type),\r\n  );\r\n}\r\n\r\n/**\r\n * Creates a new link from the `existingPath`\r\n * to the `newPath`.\r\n * @param {string | Buffer | URL} existingPath\r\n * @param {string | Buffer | URL} newPath\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction link(existingPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.link(pathModule.toNamespacedPath(existingPath),\r\n               pathModule.toNamespacedPath(newPath),\r\n               req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a new link from the `existingPath`\r\n * to the `newPath`.\r\n * @param {string | Buffer | URL} existingPath\r\n * @param {string | Buffer | URL} newPath\r\n * @returns {void}\r\n */\r\nfunction linkSync(existingPath, newPath) {\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  binding.link(\r\n    pathModule.toNamespacedPath(existingPath),\r\n    pathModule.toNamespacedPath(newPath),\r\n  );\r\n}\r\n\r\n/**\r\n * Asynchronously removes a file or symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction unlink(path, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.unlink(pathModule.toNamespacedPath(path), req);\r\n}\r\n\r\n/**\r\n * Synchronously removes a file or symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @returns {void}\r\n */\r\nfunction unlinkSync(path) {\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n  binding.unlink(path);\r\n}\r\n\r\n/**\r\n * Sets the permissions on the file.\r\n * @param {number} fd\r\n * @param {string | number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fchmod(fd, mode, callback) {\r\n  mode = parseFileMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.fchmod(fd, mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the permissions on the file.\r\n * @param {number} fd\r\n * @param {string | number} mode\r\n * @returns {void}\r\n */\r\nfunction fchmodSync(fd, mode) {\r\n  binding.fchmod(\r\n    fd,\r\n    parseFileMode(mode, 'mode'),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the permissions on a symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lchmod(path, mode, callback) {\r\n  validateFunction(callback, 'cb');\r\n  mode = parseFileMode(mode, 'mode');\r\n  fs.open(path, O_WRONLY | O_SYMLINK, (err, fd) => {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n    // Prefer to return the chmod error, if one occurs,\r\n    // but still try to close, and report closing errors if they occur.\r\n    fs.fchmod(fd, mode, (err) => {\r\n      fs.close(fd, (err2) => {\r\n        callback(aggregateTwoErrors(err2, err));\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously changes the permissions on a symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} mode\r\n * @returns {void}\r\n */\r\nfunction lchmodSync(path, mode) {\r\n  const fd = fs.openSync(path, O_WRONLY | O_SYMLINK);\r\n\r\n  // Prefer to return the chmod error, if one occurs,\r\n  // but still try to close, and report closing errors if they occur.\r\n  let ret;\r\n  try {\r\n    ret = fs.fchmodSync(fd, mode);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Asynchronously changes the permissions of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} mode\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction chmod(path, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  mode = parseFileMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chmod(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the permissions of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | number} mode\r\n * @returns {void}\r\n */\r\nfunction chmodSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n  mode = parseFileMode(mode, 'mode');\r\n\r\n  binding.chmod(\r\n    pathModule.toNamespacedPath(path),\r\n    mode,\r\n  );\r\n}\r\n\r\n/**\r\n * Sets the owner of the symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lchown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the owner of the symbolic link.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction lchownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  binding.lchown(\r\n    pathModule.toNamespacedPath(path),\r\n    uid,\r\n    gid,\r\n  );\r\n}\r\n\r\n/**\r\n * Sets the owner of the file.\r\n * @param {number} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction fchown(fd, uid, gid, callback) {\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.fchown(fd, uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously sets the owner of the file.\r\n * @param {number} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction fchownSync(fd, uid, gid) {\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n\r\n  binding.fchown(fd, uid, gid);\r\n}\r\n\r\n/**\r\n * Asynchronously changes the owner and group\r\n * of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction chown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the owner and group\r\n * of a file.\r\n * @param {string | Buffer | URL} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @returns {void}\r\n */\r\nfunction chownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateInteger(uid, 'uid', -1, kMaxUserId);\r\n  validateInteger(gid, 'gid', -1, kMaxUserId);\r\n  binding.chown(\r\n    pathModule.toNamespacedPath(path),\r\n    uid,\r\n    gid,\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the file system timestamps of the object\r\n * referenced by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction utimes(path, atime, mtime, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.utimes(pathModule.toNamespacedPath(path),\r\n                 toUnixTimestamp(atime),\r\n                 toUnixTimestamp(mtime),\r\n                 req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the file system timestamps\r\n * of the object referenced by `path`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction utimesSync(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  binding.utimes(\r\n    pathModule.toNamespacedPath(path),\r\n    toUnixTimestamp(atime),\r\n    toUnixTimestamp(mtime),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the file system timestamps of the object\r\n * referenced by the supplied `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction futimes(fd, atime, mtime, callback) {\r\n  atime = toUnixTimestamp(atime, 'atime');\r\n  mtime = toUnixTimestamp(mtime, 'mtime');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.futimes(fd, atime, mtime, req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the file system timestamps\r\n * of the object referenced by the\r\n * supplied `fd` (file descriptor).\r\n * @param {number} fd\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction futimesSync(fd, atime, mtime) {\r\n  binding.futimes(\r\n    fd,\r\n    toUnixTimestamp(atime, 'atime'),\r\n    toUnixTimestamp(mtime, 'mtime'),\r\n  );\r\n}\r\n\r\n/**\r\n * Changes the access and modification times of\r\n * a file in the same way as `fs.utimes()`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction lutimes(path, atime, mtime, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.lutimes(pathModule.toNamespacedPath(path),\r\n                  toUnixTimestamp(atime),\r\n                  toUnixTimestamp(mtime),\r\n                  req);\r\n}\r\n\r\n/**\r\n * Synchronously changes the access and modification\r\n * times of a file in the same way as `fs.utimesSync()`.\r\n * @param {string | Buffer | URL} path\r\n * @param {number | string | Date} atime\r\n * @param {number | string | Date} mtime\r\n * @returns {void}\r\n */\r\nfunction lutimesSync(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  binding.lutimes(\r\n    pathModule.toNamespacedPath(path),\r\n    toUnixTimestamp(atime),\r\n    toUnixTimestamp(mtime),\r\n  );\r\n}\r\n\r\nfunction writeAll(fd, isUserFd, buffer, offset, length, signal, flush, callback) {\r\n  if (signal?.aborted) {\r\n    const abortError = new AbortError(undefined, { cause: signal?.reason });\r\n    if (isUserFd) {\r\n      callback(abortError);\r\n    } else {\r\n      fs.close(fd, (err) => {\r\n        callback(aggregateTwoErrors(err, abortError));\r\n      });\r\n    }\r\n    return;\r\n  }\r\n  // write(fd, buffer, offset, length, position, callback)\r\n  fs.write(fd, buffer, offset, length, null, (writeErr, written) => {\r\n    if (writeErr) {\r\n      if (isUserFd) {\r\n        callback(writeErr);\r\n      } else {\r\n        fs.close(fd, (err) => {\r\n          callback(aggregateTwoErrors(err, writeErr));\r\n        });\r\n      }\r\n    } else if (written === length) {\r\n      if (!flush) {\r\n        if (isUserFd) {\r\n          callback(null);\r\n        } else {\r\n          fs.close(fd, callback);\r\n        }\r\n      } else {\r\n        fs.fsync(fd, (syncErr) => {\r\n          if (syncErr) {\r\n            if (isUserFd) {\r\n              callback(syncErr);\r\n            } else {\r\n              fs.close(fd, (err) => {\r\n                callback(aggregateTwoErrors(err, syncErr));\r\n              });\r\n            }\r\n          } else if (isUserFd) {\r\n            callback(null);\r\n          } else {\r\n            fs.close(fd, callback);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      offset += written;\r\n      length -= written;\r\n      writeAll(fd, isUserFd, buffer, offset, length, signal, flush, callback);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Asynchronously writes data to the file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer | TypedArray | DataView} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   signal?: AbortSignal;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction writeFile(path, data, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n    mode: 0o666,\r\n    flag: 'w',\r\n    flush: false,\r\n  });\r\n  const flag = options.flag || 'w';\r\n  const flush = options.flush ?? false;\r\n\r\n  validateBoolean(flush, 'options.flush');\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    validateStringAfterArrayBufferView(data, 'data');\r\n    data = Buffer.from(data, options.encoding || 'utf8');\r\n  }\r\n\r\n  if (isFd(path)) {\r\n    const isUserFd = true;\r\n    const signal = options.signal;\r\n    writeAll(path, isUserFd, data, 0, data.byteLength, signal, flush, callback);\r\n    return;\r\n  }\r\n\r\n  if (checkAborted(options.signal, callback))\r\n    return;\r\n\r\n  fs.open(path, flag, options.mode, (openErr, fd) => {\r\n    if (openErr) {\r\n      callback(openErr);\r\n    } else {\r\n      const isUserFd = false;\r\n      const signal = options.signal;\r\n      writeAll(fd, isUserFd, data, 0, data.byteLength, signal, flush, callback);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Synchronously writes data to the file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer | TypedArray | DataView} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @returns {void}\r\n */\r\nfunction writeFileSync(path, data, options) {\r\n  options = getOptions(options, {\r\n    encoding: 'utf8',\r\n    mode: 0o666,\r\n    flag: 'w',\r\n    flush: false,\r\n  });\r\n\r\n  const flush = options.flush ?? false;\r\n\r\n  validateBoolean(flush, 'options.flush');\r\n\r\n  const flag = options.flag || 'w';\r\n\r\n  // C++ fast path for string data and UTF8 encoding\r\n  if (typeof data === 'string' && (options.encoding === 'utf8' || options.encoding === 'utf-8')) {\r\n    if (!isInt32(path)) {\r\n      path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n    }\r\n\r\n    return binding.writeFileUtf8(\r\n      path, data,\r\n      stringToFlags(flag),\r\n      parseFileMode(options.mode, 'mode', 0o666),\r\n    );\r\n  }\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    validateStringAfterArrayBufferView(data, 'data');\r\n    data = Buffer.from(data, options.encoding || 'utf8');\r\n  }\r\n\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, flag, options.mode);\r\n\r\n  let offset = 0;\r\n  let length = data.byteLength;\r\n  try {\r\n    while (length > 0) {\r\n      const written = fs.writeSync(fd, data, offset, length);\r\n      offset += written;\r\n      length -= written;\r\n    }\r\n\r\n    if (flush) {\r\n      fs.fsyncSync(fd);\r\n    }\r\n  } finally {\r\n    if (!isUserFd) fs.closeSync(fd);\r\n  }\r\n}\r\n\r\n/**\r\n * Asynchronously appends data to a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   flush?: boolean;\r\n *   } | string} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction appendFile(path, data, options, callback) {\r\n  callback ||= options;\r\n  validateFunction(callback, 'cb');\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFile(path, data, options, callback);\r\n}\r\n\r\n/**\r\n * Synchronously appends data to a file.\r\n * @param {string | Buffer | URL | number} path\r\n * @param {string | Buffer} data\r\n * @param {{\r\n *   encoding?: string | null;\r\n *   mode?: number;\r\n *   flag?: string;\r\n *   } | string} [options]\r\n * @returns {void}\r\n */\r\nfunction appendFileSync(path, data, options) {\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFileSync(path, data, options);\r\n}\r\n\r\n/**\r\n * Watches for the changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {string | {\r\n *   persistent?: boolean;\r\n *   recursive?: boolean;\r\n *   encoding?: string;\r\n *   signal?: AbortSignal;\r\n *   }} [options]\r\n * @param {(\r\n *   eventType?: string,\r\n *   filename?: string | Buffer\r\n *   ) => any} [listener]\r\n * @returns {watchers.FSWatcher}\r\n */\r\nfunction watch(filename, options, listener) {\r\n  if (typeof options === 'function') {\r\n    listener = options;\r\n  }\r\n  options = getOptions(options);\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  if (options.persistent === undefined) options.persistent = true;\r\n  if (options.recursive === undefined) options.recursive = false;\r\n\r\n  let watcher;\r\n  const watchers = require('internal/fs/watchers');\r\n  const path = getValidatedPath(filename);\r\n  // TODO(anonrig): Remove non-native watcher when/if libuv supports recursive.\r\n  // As of November 2022, libuv does not support recursive file watch on all platforms,\r\n  // e.g. Linux due to the limitations of inotify.\r\n  if (options.recursive && !isOSX && !isWindows) {\r\n    const nonNativeWatcher = require('internal/fs/recursive_watch');\r\n    watcher = new nonNativeWatcher.FSWatcher(options);\r\n    watcher[watchers.kFSWatchStart](path);\r\n  } else {\r\n    watcher = new watchers.FSWatcher();\r\n    watcher[watchers.kFSWatchStart](path,\r\n                                    options.persistent,\r\n                                    options.recursive,\r\n                                    options.encoding);\r\n  }\r\n\r\n  if (listener) {\r\n    watcher.addListener('change', listener);\r\n  }\r\n  if (options.signal) {\r\n    if (options.signal.aborted) {\r\n      process.nextTick(() => watcher.close());\r\n    } else {\r\n      const listener = () => watcher.close();\r\n      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;\r\n      options.signal.addEventListener('abort', listener, { __proto__: null, [kResistStopPropagation]: true });\r\n      watcher.once('close', () => {\r\n        options.signal.removeEventListener('abort', listener);\r\n      });\r\n    }\r\n  }\r\n\r\n  return watcher;\r\n}\r\n\r\n\r\nconst statWatchers = new SafeMap();\r\n\r\n/**\r\n * Watches for changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {{\r\n *   bigint?: boolean;\r\n *   persistent?: boolean;\r\n *   interval?: number;\r\n *   }} [options]\r\n * @param {(\r\n *   current?: Stats,\r\n *   previous?: Stats\r\n *   ) => any} listener\r\n * @returns {watchers.StatWatcher}\r\n */\r\nfunction watchFile(filename, options, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  let stat;\r\n\r\n  if (options === null || typeof options !== 'object') {\r\n    listener = options;\r\n    options = null;\r\n  }\r\n\r\n  options = {\r\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\r\n    // a little on the slow side but let's stick with it for now to keep\r\n    // behavioral changes to a minimum.\r\n    interval: 5007,\r\n    persistent: true,\r\n    ...options,\r\n  };\r\n\r\n  validateFunction(listener, 'listener');\r\n\r\n  stat = statWatchers.get(filename);\r\n  const watchers = require('internal/fs/watchers');\r\n  if (stat === undefined) {\r\n    stat = new watchers.StatWatcher(options.bigint);\r\n    stat[watchers.kFSStatWatcherStart](filename,\r\n                                       options.persistent, options.interval);\r\n    statWatchers.set(filename, stat);\r\n  } else {\r\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('add');\r\n  }\r\n\r\n  stat.addListener('change', listener);\r\n  return stat;\r\n}\r\n\r\n/**\r\n * Stops watching for changes on `filename`.\r\n * @param {string | Buffer | URL} filename\r\n * @param {() => any} [listener]\r\n * @returns {void}\r\n */\r\nfunction unwatchFile(filename, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  const stat = statWatchers.get(filename);\r\n\r\n  if (stat === undefined) return;\r\n  const watchers = require('internal/fs/watchers');\r\n  if (typeof listener === 'function') {\r\n    const beforeListenerCount = stat.listenerCount('change');\r\n    stat.removeListener('change', listener);\r\n    if (stat.listenerCount('change') < beforeListenerCount)\r\n      stat[watchers.kFSStatWatcherAddOrCleanRef]('clean');\r\n  } else {\r\n    stat.removeAllListeners('change');\r\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('cleanAll');\r\n  }\r\n\r\n  if (stat.listenerCount('change') === 0) {\r\n    stat.stop();\r\n    statWatchers.delete(filename);\r\n  }\r\n}\r\n\r\n\r\nlet splitRoot;\r\nif (isWindows) {\r\n  // Regex to find the device root on Windows (e.g. 'c:\\\\'), including trailing\r\n  // slash.\r\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\r\n  splitRoot = function splitRoot(str) {\r\n    return SideEffectFreeRegExpPrototypeExec(splitRootRe, str)[0];\r\n  };\r\n} else {\r\n  splitRoot = function splitRoot(str) {\r\n    for (let i = 0; i < str.length; ++i) {\r\n      if (StringPrototypeCharCodeAt(str, i) !== CHAR_FORWARD_SLASH)\r\n        return StringPrototypeSlice(str, 0, i);\r\n    }\r\n    return str;\r\n  };\r\n}\r\n\r\nfunction encodeRealpathResult(result, options) {\r\n  if (!options || !options.encoding || options.encoding === 'utf8')\r\n    return result;\r\n  const asBuffer = Buffer.from(result);\r\n  if (options.encoding === 'buffer') {\r\n    return asBuffer;\r\n  }\r\n  return asBuffer.toString(options.encoding);\r\n}\r\n\r\n// Finds the next portion of a (partial) path, up to the next path delimiter\r\nlet nextPart;\r\nif (isWindows) {\r\n  nextPart = function nextPart(p, i) {\r\n    for (; i < p.length; ++i) {\r\n      const ch = StringPrototypeCharCodeAt(p, i);\r\n\r\n      // Check for a separator character\r\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\r\n        return i;\r\n    }\r\n    return -1;\r\n  };\r\n} else {\r\n  nextPart = function nextPart(p, i) {\r\n    return StringPrototypeIndexOf(p, '/', i);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the resolved pathname.\r\n * @param {string | Buffer | URL} p\r\n * @param {string | { encoding?: string | null; }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nfunction realpathSync(p, options) {\r\n  options = getOptions(options);\r\n  p = toPathIfFileURL(p);\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const cache = options[realpathCacheKey];\r\n  const maybeCachedResult = cache?.get(p);\r\n  if (maybeCachedResult) {\r\n    return maybeCachedResult;\r\n  }\r\n\r\n  const seenLinks = new SafeMap();\r\n  const knownHard = new SafeSet();\r\n  const original = p;\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  // Skip over roots\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows) {\r\n    const out = binding.lstat(pathModule.toNamespacedPath(base), false, undefined, true /* throwIfNoEntry */);\r\n    if (out === undefined) {\r\n      return;\r\n    }\r\n    knownHard.add(base);\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  // NB: p.length changes.\r\n  while (pos < p.length) {\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = StringPrototypeSlice(p, pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += StringPrototypeSlice(p, pos, result + 1);\r\n      base = previous + StringPrototypeSlice(p, pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard.has(base) || cache?.get(base) === base) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        break;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    let resolvedLink;\r\n    const maybeCachedResolved = cache?.get(base);\r\n    if (maybeCachedResolved) {\r\n      resolvedLink = maybeCachedResolved;\r\n    } else {\r\n      // Use stats array directly to avoid creating an fs.Stats instance just\r\n      // for our internal use.\r\n\r\n      const baseLong = pathModule.toNamespacedPath(base);\r\n      const stats = binding.lstat(baseLong, true, undefined, true /* throwIfNoEntry */);\r\n      if (stats === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (!isFileType(stats, S_IFLNK)) {\r\n        knownHard.add(base);\r\n        cache?.set(base, base);\r\n        continue;\r\n      }\r\n\r\n      // Read the link if it wasn't read before\r\n      // dev/ino always return 0 on windows, so skip the check.\r\n      let linkTarget = null;\r\n      let id;\r\n      if (!isWindows) {\r\n        const dev = BigIntPrototypeToString(stats[0], 32);\r\n        const ino = BigIntPrototypeToString(stats[7], 32);\r\n        id = `${dev}:${ino}`;\r\n        if (seenLinks.has(id)) {\r\n          linkTarget = seenLinks.get(id);\r\n        }\r\n      }\r\n      if (linkTarget === null) {\r\n        binding.stat(baseLong, false, undefined, true);\r\n        linkTarget = binding.readlink(baseLong, undefined);\r\n      }\r\n      resolvedLink = pathModule.resolve(previous, linkTarget);\r\n\r\n      cache?.set(base, resolvedLink);\r\n      if (!isWindows) seenLinks.set(id, linkTarget);\r\n    }\r\n\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, StringPrototypeSlice(p, pos));\r\n\r\n    // Skip over roots\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard.has(base)) {\r\n      const out = binding.lstat(pathModule.toNamespacedPath(base), false, undefined, true /* throwIfNoEntry */);\r\n      if (out === undefined) {\r\n        return;\r\n      }\r\n      knownHard.add(base);\r\n    }\r\n  }\r\n\r\n  cache?.set(original, p);\r\n  return encodeRealpathResult(p, options);\r\n}\r\n\r\n/**\r\n * Returns the resolved pathname.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | { encoding?: string; }} [options]\r\n * @returns {string | Buffer}\r\n */\r\nrealpathSync.native = (path, options) => {\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  return binding.realpath(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n  );\r\n};\r\n\r\n/**\r\n * Asynchronously computes the canonical pathname by\r\n * resolving `.`, `..` and symbolic links.\r\n * @param {string | Buffer | URL} p\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   resolvedPath?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction realpath(p, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  } else {\r\n    validateFunction(callback, 'cb');\r\n  }\r\n  options = getOptions(options);\r\n  p = toPathIfFileURL(p);\r\n\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const seenLinks = new SafeMap();\r\n  const knownHard = new SafeSet();\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows && !knownHard.has(base)) {\r\n    fs.lstat(base, (err, stats) => {\r\n      if (err) return callback(err);\r\n      knownHard.add(base);\r\n      LOOP();\r\n    });\r\n  } else {\r\n    process.nextTick(LOOP);\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  function LOOP() {\r\n    // Stop if scanned past end of path\r\n    if (pos >= p.length) {\r\n      return callback(null, encodeRealpathResult(p, options));\r\n    }\r\n\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = StringPrototypeSlice(p, pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += StringPrototypeSlice(p, pos, result + 1);\r\n      base = previous + StringPrototypeSlice(p, pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard.has(base)) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        return callback(null, encodeRealpathResult(p, options));\r\n      }\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    return fs.lstat(base, { bigint: true }, gotStat);\r\n  }\r\n\r\n  function gotStat(err, stats) {\r\n    if (err) return callback(err);\r\n\r\n    // If not a symlink, skip to the next path part\r\n    if (!stats.isSymbolicLink()) {\r\n      knownHard.add(base);\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    // Stat & read the link if not read before.\r\n    // Call `gotTarget()` as soon as the link target is known.\r\n    // `dev`/`ino` always return 0 on windows, so skip the check.\r\n    let id;\r\n    if (!isWindows) {\r\n      const dev = BigIntPrototypeToString(stats.dev, 32);\r\n      const ino = BigIntPrototypeToString(stats.ino, 32);\r\n      id = `${dev}:${ino}`;\r\n      if (seenLinks.has(id)) {\r\n        return gotTarget(null, seenLinks.get(id));\r\n      }\r\n    }\r\n    fs.stat(base, (err) => {\r\n      if (err) return callback(err);\r\n\r\n      fs.readlink(base, (err, target) => {\r\n        if (!isWindows) seenLinks.set(id, target);\r\n        gotTarget(err, target);\r\n      });\r\n    });\r\n  }\r\n\r\n  function gotTarget(err, target) {\r\n    if (err) return callback(err);\r\n\r\n    gotResolvedLink(pathModule.resolve(previous, target));\r\n  }\r\n\r\n  function gotResolvedLink(resolvedLink) {\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, StringPrototypeSlice(p, pos));\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard.has(base)) {\r\n      fs.lstat(base, (err) => {\r\n        if (err) return callback(err);\r\n        knownHard.add(base);\r\n        LOOP();\r\n      });\r\n    } else {\r\n      process.nextTick(LOOP);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Asynchronously computes the canonical pathname by\r\n * resolving `.`, `..` and symbolic links.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   resolvedPath?: string | Buffer\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nrealpath.native = (path, options, callback) => {\r\n  callback = makeCallback(callback || options);\r\n  options = getOptions(options);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.realpath(pathModule.toNamespacedPath(path), options.encoding, req);\r\n};\r\n\r\n/**\r\n * Creates a unique temporary directory.\r\n * @param {string | Buffer | URL} prefix\r\n * @param {string | { encoding?: string; }} [options]\r\n * @param {(\r\n *   err?: Error,\r\n *   directory?: string\r\n *   ) => any} callback\r\n * @returns {void}\r\n */\r\nfunction mkdtemp(prefix, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options);\r\n\r\n  prefix = getValidatedPath(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdtemp(prefix, options.encoding, req);\r\n}\r\n\r\n/**\r\n * Synchronously creates a unique temporary directory.\r\n * @param {string | Buffer | URL} prefix\r\n * @param {string | { encoding?: string; }} [options]\r\n * @returns {string}\r\n */\r\nfunction mkdtempSync(prefix, options) {\r\n  options = getOptions(options);\r\n\r\n  prefix = getValidatedPath(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n  return binding.mkdtemp(prefix, options.encoding);\r\n}\r\n\r\n/**\r\n * Asynchronously copies `src` to `dest`. By\r\n * default, `dest` is overwritten if it already exists.\r\n * @param {string | Buffer | URL} src\r\n * @param {string | Buffer | URL} dest\r\n * @param {number} [mode]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction copyFile(src, dest, mode, callback) {\r\n  if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = 0;\r\n  }\r\n\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  src = pathModule.toNamespacedPath(src);\r\n  dest = pathModule.toNamespacedPath(dest);\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.copyFile(src, dest, mode, req);\r\n}\r\n\r\n/**\r\n * Synchronously copies `src` to `dest`. By\r\n * default, `dest` is overwritten if it already exists.\r\n * @param {string | Buffer | URL} src\r\n * @param {string | Buffer | URL} dest\r\n * @param {number} [mode]\r\n * @returns {void}\r\n */\r\nfunction copyFileSync(src, dest, mode) {\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  binding.copyFile(\r\n    pathModule.toNamespacedPath(src),\r\n    pathModule.toNamespacedPath(dest),\r\n    mode,\r\n  );\r\n}\r\n\r\n/**\r\n * Asynchronously copies `src` to `dest`. `src` can be a file, directory, or\r\n * symlink. The contents of directories will be copied recursively.\r\n * @param {string | URL} src\r\n * @param {string | URL} dest\r\n * @param {object} [options]\r\n * @param {(err?: Error) => any} callback\r\n * @returns {void}\r\n */\r\nfunction cp(src, dest, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  callback = makeCallback(callback);\r\n  options = validateCpOptions(options);\r\n  src = pathModule.toNamespacedPath(getValidatedPath(src, 'src'));\r\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest, 'dest'));\r\n  lazyLoadCp();\r\n  cpFn(src, dest, options, callback);\r\n}\r\n\r\n/**\r\n * Synchronously copies `src` to `dest`. `src` can be a file, directory, or\r\n * symlink. The contents of directories will be copied recursively.\r\n * @param {string | URL} src\r\n * @param {string | URL} dest\r\n * @param {object} [options]\r\n * @returns {void}\r\n */\r\nfunction cpSync(src, dest, options) {\r\n  options = validateCpOptions(options);\r\n  src = pathModule.toNamespacedPath(getValidatedPath(src, 'src'));\r\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest, 'dest'));\r\n  lazyLoadCp();\r\n  cpSyncFn(src, dest, options);\r\n}\r\n\r\nfunction lazyLoadStreams() {\r\n  if (!ReadStream) {\r\n    ({ ReadStream, WriteStream } = require('internal/fs/streams'));\r\n    FileReadStream = ReadStream;\r\n    FileWriteStream = WriteStream;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a readable stream with a default `highWaterMark`\r\n * of 64 KiB.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   flags?: string;\r\n *   encoding?: string;\r\n *   fd?: number | FileHandle;\r\n *   mode?: number;\r\n *   autoClose?: boolean;\r\n *   emitClose?: boolean;\r\n *   start: number;\r\n *   end?: number;\r\n *   highWaterMark?: number;\r\n *   fs?: object | null;\r\n *   signal?: AbortSignal | null;\r\n *   }} [options]\r\n * @returns {ReadStream}\r\n */\r\nfunction createReadStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new ReadStream(path, options);\r\n}\r\n\r\n/**\r\n * Creates a write stream.\r\n * @param {string | Buffer | URL} path\r\n * @param {string | {\r\n *   flags?: string;\r\n *   encoding?: string;\r\n *   fd?: number | FileHandle;\r\n *   mode?: number;\r\n *   autoClose?: boolean;\r\n *   emitClose?: boolean;\r\n *   start: number;\r\n *   fs?: object | null;\r\n *   signal?: AbortSignal | null;\r\n *   highWaterMark?: number;\r\n *   flush?: boolean;\r\n *   }} [options]\r\n * @returns {WriteStream}\r\n */\r\nfunction createWriteStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new WriteStream(path, options);\r\n}\r\n\r\nconst lazyGlob = getLazy(() => require('internal/fs/glob').Glob);\r\n\r\nfunction glob(pattern, options, callback) {\r\n  emitExperimentalWarning('glob');\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  callback = makeCallback(callback);\r\n\r\n  const Glob = lazyGlob();\r\n  // TODO: Use iterator helpers when available\r\n  (async () => {\r\n    try {\r\n      const res = [];\r\n      for await (const entry of new Glob(pattern, options).glob()) {\r\n        ArrayPrototypePush(res, entry);\r\n      }\r\n      callback(null, res);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  })();\r\n}\r\n\r\nfunction globSync(pattern, options) {\r\n  emitExperimentalWarning('globSync');\r\n  const Glob = lazyGlob();\r\n  return new Glob(pattern, options).globSync();\r\n}\r\n\r\n\r\nmodule.exports = fs = {\r\n  appendFile,\r\n  appendFileSync,\r\n  access,\r\n  accessSync,\r\n  chown,\r\n  chownSync,\r\n  chmod,\r\n  chmodSync,\r\n  close,\r\n  closeSync,\r\n  copyFile,\r\n  copyFileSync,\r\n  cp,\r\n  cpSync,\r\n  createReadStream,\r\n  createWriteStream,\r\n  exists,\r\n  existsSync,\r\n  fchown,\r\n  fchownSync,\r\n  fchmod,\r\n  fchmodSync,\r\n  fdatasync,\r\n  fdatasyncSync,\r\n  fstat,\r\n  fstatSync,\r\n  fsync,\r\n  fsyncSync,\r\n  ftruncate,\r\n  ftruncateSync,\r\n  futimes,\r\n  futimesSync,\r\n  glob,\r\n  globSync,\r\n  lchown,\r\n  lchownSync,\r\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined,\r\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined,\r\n  link,\r\n  linkSync,\r\n  lstat,\r\n  lstatSync,\r\n  lutimes,\r\n  lutimesSync,\r\n  mkdir,\r\n  mkdirSync,\r\n  mkdtemp,\r\n  mkdtempSync,\r\n  open,\r\n  openSync,\r\n  openAsBlob,\r\n  readdir,\r\n  readdirSync,\r\n  read,\r\n  readSync,\r\n  readv,\r\n  readvSync,\r\n  readFile,\r\n  readFileSync,\r\n  readlink,\r\n  readlinkSync,\r\n  realpath,\r\n  realpathSync,\r\n  rename,\r\n  renameSync,\r\n  rm,\r\n  rmSync,\r\n  rmdir,\r\n  rmdirSync,\r\n  stat,\r\n  statfs,\r\n  statSync,\r\n  statfsSync,\r\n  symlink,\r\n  symlinkSync,\r\n  truncate,\r\n  truncateSync,\r\n  unwatchFile,\r\n  unlink,\r\n  unlinkSync,\r\n  utimes,\r\n  utimesSync,\r\n  watch,\r\n  watchFile,\r\n  writeFile,\r\n  writeFileSync,\r\n  write,\r\n  writeSync,\r\n  writev,\r\n  writevSync,\r\n  Dirent,\r\n  Stats,\r\n\r\n  get ReadStream() {\r\n    lazyLoadStreams();\r\n    return ReadStream;\r\n  },\r\n\r\n  set ReadStream(val) {\r\n    ReadStream = val;\r\n  },\r\n\r\n  get WriteStream() {\r\n    lazyLoadStreams();\r\n    return WriteStream;\r\n  },\r\n\r\n  set WriteStream(val) {\r\n    WriteStream = val;\r\n  },\r\n\r\n  // Legacy names... these have to be separate because of how graceful-fs\r\n  // (and possibly other) modules monkey patch the values.\r\n  get FileReadStream() {\r\n    lazyLoadStreams();\r\n    return FileReadStream;\r\n  },\r\n\r\n  set FileReadStream(val) {\r\n    FileReadStream = val;\r\n  },\r\n\r\n  get FileWriteStream() {\r\n    lazyLoadStreams();\r\n    return FileWriteStream;\r\n  },\r\n\r\n  set FileWriteStream(val) {\r\n    FileWriteStream = val;\r\n  },\r\n\r\n  // For tests\r\n  _toUnixTimestamp: toUnixTimestamp,\r\n};\r\n\r\ndefineLazyProperties(\r\n  fs,\r\n  'internal/fs/dir',\r\n  ['Dir', 'opendir', 'opendirSync'],\r\n);\r\n\r\nObjectDefineProperties(fs, {\r\n  F_OK: { __proto__: null, enumerable: true, value: F_OK || 0 },\r\n  R_OK: { __proto__: null, enumerable: true, value: R_OK || 0 },\r\n  W_OK: { __proto__: null, enumerable: true, value: W_OK || 0 },\r\n  X_OK: { __proto__: null, enumerable: true, value: X_OK || 0 },\r\n  constants: {\r\n    __proto__: null,\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants,\r\n  },\r\n  promises: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      promises ??= require('internal/fs/promises').exports;\r\n      return promises;\r\n    },\r\n  },\r\n});\r\n"
  },
  "43": {
    "metadata": {
      "scriptId": "43",
      "url": "node:internal/blob",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 497,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "72e1b92394eba97983a21a62a7b85b4254dad004036e391ea333555bad5ee0be",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13493,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/blob"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  MathMax,\r\n  MathMin,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectSetPrototypeOf,\r\n  PromisePrototypeThen,\r\n  PromiseReject,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  StringPrototypeSplit,\r\n  StringPrototypeToLowerCase,\r\n  Symbol,\r\n  SymbolIterator,\r\n  SymbolToStringTag,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  createBlob: _createBlob,\r\n  createBlobFromFilePath: _createBlobFromFilePath,\r\n  concat,\r\n  getDataObject,\r\n} = internalBinding('blob');\r\nconst {\r\n  kMaxLength,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  TextDecoder,\r\n  TextEncoder,\r\n} = require('internal/encoding');\r\nconst { URL } = require('internal/url');\r\n\r\nconst {\r\n  markTransferMode,\r\n  kClone,\r\n  kDeserialize,\r\n} = require('internal/worker/js_transferable');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  createDeferredPromise,\r\n  customInspectSymbol: kInspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n  lazyDOMException,\r\n} = require('internal/util');\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BUFFER_TOO_LARGE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_INVALID_THIS,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  validateDictionary,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  CountQueuingStrategy,\r\n} = require('internal/webstreams/queuingstrategies');\r\n\r\nconst { queueMicrotask } = require('internal/process/task_queues');\r\n\r\nconst kHandle = Symbol('kHandle');\r\nconst kType = Symbol('kType');\r\nconst kLength = Symbol('kLength');\r\nconst kNotCloneable = Symbol('kNotCloneable');\r\n\r\nconst disallowedTypeCharacters = /[^\\u{0020}-\\u{007E}]/u;\r\n\r\nlet ReadableStream;\r\n\r\nconst enc = new TextEncoder();\r\nlet dec;\r\n\r\n// Yes, lazy loading is annoying but because of circular\r\n// references between the url, internal/blob, and buffer\r\n// modules, lazy loading here makes sure that things work.\r\n\r\nfunction lazyReadableStream(options) {\r\n  // eslint-disable-next-line no-global-assign\r\n  ReadableStream ??=\r\n    require('internal/webstreams/readablestream').ReadableStream;\r\n  return new ReadableStream(options);\r\n}\r\n\r\nconst { EOL } = require('internal/constants');\r\n\r\nfunction isBlob(object) {\r\n  return object?.[kHandle] !== undefined;\r\n}\r\n\r\nfunction getSource(source, endings) {\r\n  if (isBlob(source))\r\n    return [source.size, source[kHandle]];\r\n\r\n  if (isAnyArrayBuffer(source)) {\r\n    source = new Uint8Array(source);\r\n  } else if (!isArrayBufferView(source)) {\r\n    source = `${source}`;\r\n    if (endings === 'native')\r\n      source = RegExpPrototypeSymbolReplace(/\\n|\\r\\n/g, source, EOL);\r\n    source = enc.encode(source);\r\n  }\r\n\r\n  // We copy into a new Uint8Array because the underlying\r\n  // BackingStores are going to be detached and owned by\r\n  // the Blob.\r\n  const { buffer, byteOffset, byteLength } = source;\r\n  const slice = buffer.slice(byteOffset, byteOffset + byteLength);\r\n  return [byteLength, new Uint8Array(slice)];\r\n}\r\n\r\nclass Blob {\r\n  /**\r\n   * @typedef {string|ArrayBuffer|ArrayBufferView|Blob} SourcePart\r\n   */\r\n\r\n  /**\r\n   * @param {SourcePart[]} [sources]\r\n   * @param {{\r\n   *   endings? : string,\r\n   *   type? : string,\r\n   * }} [options]\r\n   * @constructs {Blob}\r\n   */\r\n  constructor(sources = [], options) {\r\n    markTransferMode(this, true, false);\r\n\r\n    if (sources === null ||\r\n        typeof sources[SymbolIterator] !== 'function' ||\r\n        typeof sources === 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('sources', 'a sequence', sources);\r\n    }\r\n    validateDictionary(options, 'options');\r\n    let {\r\n      type = '',\r\n      endings = 'transparent',\r\n    } = options ?? kEmptyObject;\r\n\r\n    endings = `${endings}`;\r\n    if (endings !== 'transparent' && endings !== 'native')\r\n      throw new ERR_INVALID_ARG_VALUE('options.endings', endings);\r\n\r\n    let length = 0;\r\n    const sources_ = ArrayFrom(sources, (source) => {\r\n      const { 0: len, 1: src } = getSource(source, endings);\r\n      length += len;\r\n      return src;\r\n    });\r\n\r\n    if (length > kMaxLength)\r\n      throw new ERR_BUFFER_TOO_LARGE(kMaxLength);\r\n\r\n    this[kHandle] = _createBlob(sources_, length);\r\n    this[kLength] = length;\r\n\r\n    type = `${type}`;\r\n    this[kType] = RegExpPrototypeExec(disallowedTypeCharacters, type) !== null ?\r\n      '' : StringPrototypeToLowerCase(type);\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    if (depth < 0)\r\n      return this;\r\n\r\n    const opts = {\r\n      ...options,\r\n      depth: options.depth == null ? null : options.depth - 1,\r\n    };\r\n\r\n    return `Blob ${inspect({\r\n      size: this.size,\r\n      type: this.type,\r\n    }, opts)}`;\r\n  }\r\n\r\n  [kClone]() {\r\n    if (this[kNotCloneable]) {\r\n      // We do not currently allow file-backed Blobs to be cloned or passed across\r\n      // worker threads.\r\n      throw new ERR_INVALID_STATE.TypeError('File-backed Blobs are not cloneable');\r\n    }\r\n    const handle = this[kHandle];\r\n    const type = this[kType];\r\n    const length = this[kLength];\r\n    return {\r\n      data: { handle, type, length },\r\n      deserializeInfo: 'internal/blob:Blob',\r\n    };\r\n  }\r\n\r\n  [kDeserialize]({ handle, type, length }) {\r\n    this[kHandle] = handle;\r\n    this[kType] = type;\r\n    this[kLength] = length;\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    return this[kType];\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get size() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    return this[kLength];\r\n  }\r\n\r\n  /**\r\n   * @param {number} [start]\r\n   * @param {number} [end]\r\n   * @param {string} [contentType]\r\n   * @returns {Blob}\r\n   */\r\n  slice(start = 0, end = this[kLength], contentType = '') {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n    if (start < 0) {\r\n      start = MathMax(this[kLength] + start, 0);\r\n    } else {\r\n      start = MathMin(start, this[kLength]);\r\n    }\r\n\r\n    if (end < 0) {\r\n      end = MathMax(this[kLength] + end, 0);\r\n    } else {\r\n      end = MathMin(end, this[kLength]);\r\n    }\r\n\r\n    contentType = `${contentType}`;\r\n    if (RegExpPrototypeExec(disallowedTypeCharacters, contentType) !== null) {\r\n      contentType = '';\r\n    } else {\r\n      contentType = StringPrototypeToLowerCase(contentType);\r\n    }\r\n\r\n    const span = MathMax(end - start, 0);\r\n\r\n    return createBlob(\r\n      this[kHandle].slice(start, start + span),\r\n      span,\r\n      contentType);\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<ArrayBuffer>}\r\n   */\r\n  arrayBuffer() {\r\n    if (!isBlob(this))\r\n      return PromiseReject(new ERR_INVALID_THIS('Blob'));\r\n\r\n    const { promise, resolve, reject } = createDeferredPromise();\r\n    const reader = this[kHandle].getReader();\r\n    const buffers = [];\r\n    const readNext = () => {\r\n      reader.pull((status, buffer) => {\r\n        if (status === 0) {\r\n          // EOS, concat & resolve\r\n          // buffer should be undefined here\r\n          resolve(concat(buffers));\r\n          return;\r\n        } else if (status < 0) {\r\n          // The read could fail for many different reasons when reading\r\n          // from a non-memory resident blob part (e.g. file-backed blob).\r\n          // The error details the system error code.\r\n          const error = lazyDOMException('The blob could not be read', 'NotReadableError');\r\n          reject(error);\r\n          return;\r\n        }\r\n        if (buffer !== undefined)\r\n          buffers.push(buffer);\r\n        queueMicrotask(() => readNext());\r\n      });\r\n    };\r\n    readNext();\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<string>}\r\n   */\r\n  async text() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    dec ??= new TextDecoder();\r\n\r\n    return dec.decode(await this.arrayBuffer());\r\n  }\r\n\r\n  bytes() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    return PromisePrototypeThen(\r\n      this.arrayBuffer(),\r\n      (buffer) => new Uint8Array(buffer));\r\n  }\r\n\r\n  /**\r\n   * @returns {ReadableStream}\r\n   */\r\n  stream() {\r\n    if (!isBlob(this))\r\n      throw new ERR_INVALID_THIS('Blob');\r\n\r\n    const reader = this[kHandle].getReader();\r\n    return new lazyReadableStream({\r\n      type: 'bytes',\r\n      start(c) {\r\n        // There really should only be one read at a time so using an\r\n        // array here is purely defensive.\r\n        this.pendingPulls = [];\r\n      },\r\n      pull(c) {\r\n        const { promise, resolve, reject } = createDeferredPromise();\r\n        this.pendingPulls.push({ resolve, reject });\r\n        const readNext = () => {\r\n          reader.pull((status, buffer) => {\r\n            // If pendingPulls is empty here, the stream had to have\r\n            // been canceled, and we don't really care about the result.\r\n            // We can simply exit.\r\n            if (this.pendingPulls.length === 0) {\r\n              return;\r\n            }\r\n            if (status === 0) {\r\n              // EOS\r\n              c.close();\r\n              // This is to signal the end for byob readers\r\n              // see https://streams.spec.whatwg.org/#example-rbs-pull\r\n              c.byobRequest?.respond(0);\r\n              const pending = this.pendingPulls.shift();\r\n              pending.resolve();\r\n              return;\r\n            } else if (status < 0) {\r\n              // The read could fail for many different reasons when reading\r\n              // from a non-memory resident blob part (e.g. file-backed blob).\r\n              // The error details the system error code.\r\n              const error = lazyDOMException('The blob could not be read', 'NotReadableError');\r\n              const pending = this.pendingPulls.shift();\r\n              c.error(error);\r\n              pending.reject(error);\r\n              return;\r\n            }\r\n            // ReadableByteStreamController.enqueue errors if we submit a 0-length\r\n            // buffer. We need to check for that here.\r\n            if (buffer !== undefined && buffer.byteLength !== 0) {\r\n              c.enqueue(new Uint8Array(buffer));\r\n            }\r\n            // We keep reading until we either reach EOS, some error, or we\r\n            // hit the flow rate of the stream (c.desiredSize).\r\n            queueMicrotask(() => {\r\n              if (c.desiredSize < 0) {\r\n                // A manual backpressure check.\r\n                if (this.pendingPulls.length !== 0) {\r\n                  // A case of waiting pull finished (= not yet canceled)\r\n                  const pending = this.pendingPulls.shift();\r\n                  pending.resolve();\r\n                }\r\n                return;\r\n              }\r\n              readNext();\r\n            });\r\n          });\r\n        };\r\n        readNext();\r\n        return promise;\r\n      },\r\n      cancel(reason) {\r\n        // Reject any currently pending pulls here.\r\n        for (const pending of this.pendingPulls) {\r\n          pending.reject(reason);\r\n        }\r\n        this.pendingPulls = [];\r\n      },\r\n    // We set the highWaterMark to 0 because we do not want the stream to\r\n    // start reading immediately on creation. We want it to wait until read\r\n    // is called.\r\n    }, new CountQueuingStrategy({ highWaterMark: 0 }));\r\n  }\r\n}\r\n\r\nfunction TransferableBlob(handle, length, type = '') {\r\n  markTransferMode(this, true, false);\r\n  this[kHandle] = handle;\r\n  this[kType] = type;\r\n  this[kLength] = length;\r\n}\r\n\r\nObjectSetPrototypeOf(TransferableBlob.prototype, Blob.prototype);\r\nObjectSetPrototypeOf(TransferableBlob, Blob);\r\n\r\nfunction createBlob(handle, length, type = '') {\r\n  const transferredBlob = new TransferableBlob(handle, length, type);\r\n\r\n  // Fix issues like: https://github.com/nodejs/node/pull/49730#discussion_r1331720053\r\n  transferredBlob.constructor = Blob;\r\n\r\n  return transferredBlob;\r\n}\r\n\r\nObjectDefineProperty(Blob.prototype, SymbolToStringTag, {\r\n  __proto__: null,\r\n  configurable: true,\r\n  value: 'Blob',\r\n});\r\n\r\nObjectDefineProperties(Blob.prototype, {\r\n  size: kEnumerableProperty,\r\n  type: kEnumerableProperty,\r\n  slice: kEnumerableProperty,\r\n  stream: kEnumerableProperty,\r\n  text: kEnumerableProperty,\r\n  arrayBuffer: kEnumerableProperty,\r\n});\r\n\r\nfunction resolveObjectURL(url) {\r\n  url = `${url}`;\r\n  try {\r\n    const parsed = new URL(url);\r\n\r\n    const split = StringPrototypeSplit(parsed.pathname, ':');\r\n\r\n    if (split.length !== 2)\r\n      return;\r\n\r\n    const {\r\n      0: base,\r\n      1: id,\r\n    } = split;\r\n\r\n    if (base !== 'nodedata')\r\n      return;\r\n\r\n    const ret = getDataObject(id);\r\n\r\n    if (ret === undefined)\r\n      return;\r\n\r\n    const {\r\n      0: handle,\r\n      1: length,\r\n      2: type,\r\n    } = ret;\r\n\r\n    if (handle !== undefined)\r\n      return createBlob(handle, length, type);\r\n  } catch {\r\n    // If there's an error, it's ignored and nothing is returned\r\n  }\r\n}\r\n\r\n// TODO(@jasnell): Now that the File class exists, we might consider having\r\n// this return a `File` instead of a `Blob`.\r\nfunction createBlobFromFilePath(path, options) {\r\n  const maybeBlob = _createBlobFromFilePath(path);\r\n  if (maybeBlob === undefined) {\r\n    return lazyDOMException('The blob could not be read', 'NotReadableError');\r\n  }\r\n  const { 0: blob, 1: length } = maybeBlob;\r\n  const res = createBlob(blob, length, options?.type);\r\n  res[kNotCloneable] = true;\r\n  return res;\r\n}\r\n\r\nmodule.exports = {\r\n  Blob,\r\n  createBlob,\r\n  createBlobFromFilePath,\r\n  isBlob,\r\n  kHandle,\r\n  resolveObjectURL,\r\n};\r\n"
  },
  "44": {
    "metadata": {
      "scriptId": "44",
      "url": "node:internal/encoding",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 612,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8f17a0c97288e7c82118d73cc45536df032c92ef215fea96cda066b95f8442dd",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 17774,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/encoding"
    },
    "source": "'use strict';\r\n\r\n// An implementation of the WHATWG Encoding Standard\r\n// https://encoding.spec.whatwg.org\r\n\r\nconst {\r\n  Boolean,\r\n  ObjectDefineProperties,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  SafeMap,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolToStringTag,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  ERR_ENCODING_NOT_SUPPORTED,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_THIS,\r\n  ERR_NO_ICU,\r\n} = require('internal/errors').codes;\r\nconst kHandle = Symbol('handle');\r\nconst kFlags = Symbol('flags');\r\nconst kEncoding = Symbol('encoding');\r\nconst kDecoder = Symbol('decoder');\r\nconst kEncoder = Symbol('encoder');\r\nconst kFatal = Symbol('kFatal');\r\nconst kUTF8FastPath = Symbol('kUTF8FastPath');\r\nconst kIgnoreBOM = Symbol('kIgnoreBOM');\r\n\r\nconst {\r\n  getConstructorOf,\r\n  customInspectSymbol: inspect,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n} = require('internal/util/types');\r\n\r\nconst {\r\n  validateString,\r\n  validateObject,\r\n  kValidateObjectAllowObjectsAndNull,\r\n} = require('internal/validators');\r\nconst binding = internalBinding('encoding_binding');\r\nconst {\r\n  encodeInto,\r\n  encodeIntoResults,\r\n  encodeUtf8String,\r\n  decodeUTF8,\r\n} = binding;\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nfunction validateEncoder(obj) {\r\n  if (obj == null || obj[kEncoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextEncoder');\r\n}\r\n\r\nfunction validateDecoder(obj) {\r\n  if (obj == null || obj[kDecoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextDecoder');\r\n}\r\n\r\nconst CONVERTER_FLAGS_FLUSH = 0x1;\r\nconst CONVERTER_FLAGS_FATAL = 0x2;\r\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\r\n\r\nconst empty = new Uint8Array(0);\r\n\r\nconst encodings = new SafeMap([\r\n  ['unicode-1-1-utf-8', 'utf-8'],\r\n  ['unicode11utf8', 'utf-8'],\r\n  ['unicode20utf8', 'utf-8'],\r\n  ['utf8', 'utf-8'],\r\n  ['utf-8', 'utf-8'],\r\n  ['x-unicode20utf8', 'utf-8'],\r\n  ['866', 'ibm866'],\r\n  ['cp866', 'ibm866'],\r\n  ['csibm866', 'ibm866'],\r\n  ['ibm866', 'ibm866'],\r\n  ['csisolatin2', 'iso-8859-2'],\r\n  ['iso-8859-2', 'iso-8859-2'],\r\n  ['iso-ir-101', 'iso-8859-2'],\r\n  ['iso8859-2', 'iso-8859-2'],\r\n  ['iso88592', 'iso-8859-2'],\r\n  ['iso_8859-2', 'iso-8859-2'],\r\n  ['iso_8859-2:1987', 'iso-8859-2'],\r\n  ['l2', 'iso-8859-2'],\r\n  ['latin2', 'iso-8859-2'],\r\n  ['csisolatin3', 'iso-8859-3'],\r\n  ['iso-8859-3', 'iso-8859-3'],\r\n  ['iso-ir-109', 'iso-8859-3'],\r\n  ['iso8859-3', 'iso-8859-3'],\r\n  ['iso88593', 'iso-8859-3'],\r\n  ['iso_8859-3', 'iso-8859-3'],\r\n  ['iso_8859-3:1988', 'iso-8859-3'],\r\n  ['l3', 'iso-8859-3'],\r\n  ['latin3', 'iso-8859-3'],\r\n  ['csisolatin4', 'iso-8859-4'],\r\n  ['iso-8859-4', 'iso-8859-4'],\r\n  ['iso-ir-110', 'iso-8859-4'],\r\n  ['iso8859-4', 'iso-8859-4'],\r\n  ['iso88594', 'iso-8859-4'],\r\n  ['iso_8859-4', 'iso-8859-4'],\r\n  ['iso_8859-4:1988', 'iso-8859-4'],\r\n  ['l4', 'iso-8859-4'],\r\n  ['latin4', 'iso-8859-4'],\r\n  ['csisolatincyrillic', 'iso-8859-5'],\r\n  ['cyrillic', 'iso-8859-5'],\r\n  ['iso-8859-5', 'iso-8859-5'],\r\n  ['iso-ir-144', 'iso-8859-5'],\r\n  ['iso8859-5', 'iso-8859-5'],\r\n  ['iso88595', 'iso-8859-5'],\r\n  ['iso_8859-5', 'iso-8859-5'],\r\n  ['iso_8859-5:1988', 'iso-8859-5'],\r\n  ['arabic', 'iso-8859-6'],\r\n  ['asmo-708', 'iso-8859-6'],\r\n  ['csiso88596e', 'iso-8859-6'],\r\n  ['csiso88596i', 'iso-8859-6'],\r\n  ['csisolatinarabic', 'iso-8859-6'],\r\n  ['ecma-114', 'iso-8859-6'],\r\n  ['iso-8859-6', 'iso-8859-6'],\r\n  ['iso-8859-6-e', 'iso-8859-6'],\r\n  ['iso-8859-6-i', 'iso-8859-6'],\r\n  ['iso-ir-127', 'iso-8859-6'],\r\n  ['iso8859-6', 'iso-8859-6'],\r\n  ['iso88596', 'iso-8859-6'],\r\n  ['iso_8859-6', 'iso-8859-6'],\r\n  ['iso_8859-6:1987', 'iso-8859-6'],\r\n  ['csisolatingreek', 'iso-8859-7'],\r\n  ['ecma-118', 'iso-8859-7'],\r\n  ['elot_928', 'iso-8859-7'],\r\n  ['greek', 'iso-8859-7'],\r\n  ['greek8', 'iso-8859-7'],\r\n  ['iso-8859-7', 'iso-8859-7'],\r\n  ['iso-ir-126', 'iso-8859-7'],\r\n  ['iso8859-7', 'iso-8859-7'],\r\n  ['iso88597', 'iso-8859-7'],\r\n  ['iso_8859-7', 'iso-8859-7'],\r\n  ['iso_8859-7:1987', 'iso-8859-7'],\r\n  ['sun_eu_greek', 'iso-8859-7'],\r\n  ['csiso88598e', 'iso-8859-8'],\r\n  ['csisolatinhebrew', 'iso-8859-8'],\r\n  ['hebrew', 'iso-8859-8'],\r\n  ['iso-8859-8', 'iso-8859-8'],\r\n  ['iso-8859-8-e', 'iso-8859-8'],\r\n  ['iso-ir-138', 'iso-8859-8'],\r\n  ['iso8859-8', 'iso-8859-8'],\r\n  ['iso88598', 'iso-8859-8'],\r\n  ['iso_8859-8', 'iso-8859-8'],\r\n  ['iso_8859-8:1988', 'iso-8859-8'],\r\n  ['visual', 'iso-8859-8'],\r\n  ['csiso88598i', 'iso-8859-8-i'],\r\n  ['iso-8859-8-i', 'iso-8859-8-i'],\r\n  ['logical', 'iso-8859-8-i'],\r\n  ['csisolatin6', 'iso-8859-10'],\r\n  ['iso-8859-10', 'iso-8859-10'],\r\n  ['iso-ir-157', 'iso-8859-10'],\r\n  ['iso8859-10', 'iso-8859-10'],\r\n  ['iso885910', 'iso-8859-10'],\r\n  ['l6', 'iso-8859-10'],\r\n  ['latin6', 'iso-8859-10'],\r\n  ['iso-8859-13', 'iso-8859-13'],\r\n  ['iso8859-13', 'iso-8859-13'],\r\n  ['iso885913', 'iso-8859-13'],\r\n  ['iso-8859-14', 'iso-8859-14'],\r\n  ['iso8859-14', 'iso-8859-14'],\r\n  ['iso885914', 'iso-8859-14'],\r\n  ['csisolatin9', 'iso-8859-15'],\r\n  ['iso-8859-15', 'iso-8859-15'],\r\n  ['iso8859-15', 'iso-8859-15'],\r\n  ['iso885915', 'iso-8859-15'],\r\n  ['iso_8859-15', 'iso-8859-15'],\r\n  ['l9', 'iso-8859-15'],\r\n  ['iso-8859-16', 'iso-8859-16'],\r\n  ['cskoi8r', 'koi8-r'],\r\n  ['koi', 'koi8-r'],\r\n  ['koi8', 'koi8-r'],\r\n  ['koi8-r', 'koi8-r'],\r\n  ['koi8_r', 'koi8-r'],\r\n  ['koi8-ru', 'koi8-u'],\r\n  ['koi8-u', 'koi8-u'],\r\n  ['csmacintosh', 'macintosh'],\r\n  ['mac', 'macintosh'],\r\n  ['macintosh', 'macintosh'],\r\n  ['x-mac-roman', 'macintosh'],\r\n  ['dos-874', 'windows-874'],\r\n  ['iso-8859-11', 'windows-874'],\r\n  ['iso8859-11', 'windows-874'],\r\n  ['iso885911', 'windows-874'],\r\n  ['tis-620', 'windows-874'],\r\n  ['windows-874', 'windows-874'],\r\n  ['cp1250', 'windows-1250'],\r\n  ['windows-1250', 'windows-1250'],\r\n  ['x-cp1250', 'windows-1250'],\r\n  ['cp1251', 'windows-1251'],\r\n  ['windows-1251', 'windows-1251'],\r\n  ['x-cp1251', 'windows-1251'],\r\n  ['ansi_x3.4-1968', 'windows-1252'],\r\n  ['ascii', 'windows-1252'],\r\n  ['cp1252', 'windows-1252'],\r\n  ['cp819', 'windows-1252'],\r\n  ['csisolatin1', 'windows-1252'],\r\n  ['ibm819', 'windows-1252'],\r\n  ['iso-8859-1', 'windows-1252'],\r\n  ['iso-ir-100', 'windows-1252'],\r\n  ['iso8859-1', 'windows-1252'],\r\n  ['iso88591', 'windows-1252'],\r\n  ['iso_8859-1', 'windows-1252'],\r\n  ['iso_8859-1:1987', 'windows-1252'],\r\n  ['l1', 'windows-1252'],\r\n  ['latin1', 'windows-1252'],\r\n  ['us-ascii', 'windows-1252'],\r\n  ['windows-1252', 'windows-1252'],\r\n  ['x-cp1252', 'windows-1252'],\r\n  ['cp1253', 'windows-1253'],\r\n  ['windows-1253', 'windows-1253'],\r\n  ['x-cp1253', 'windows-1253'],\r\n  ['cp1254', 'windows-1254'],\r\n  ['csisolatin5', 'windows-1254'],\r\n  ['iso-8859-9', 'windows-1254'],\r\n  ['iso-ir-148', 'windows-1254'],\r\n  ['iso8859-9', 'windows-1254'],\r\n  ['iso88599', 'windows-1254'],\r\n  ['iso_8859-9', 'windows-1254'],\r\n  ['iso_8859-9:1989', 'windows-1254'],\r\n  ['l5', 'windows-1254'],\r\n  ['latin5', 'windows-1254'],\r\n  ['windows-1254', 'windows-1254'],\r\n  ['x-cp1254', 'windows-1254'],\r\n  ['cp1255', 'windows-1255'],\r\n  ['windows-1255', 'windows-1255'],\r\n  ['x-cp1255', 'windows-1255'],\r\n  ['cp1256', 'windows-1256'],\r\n  ['windows-1256', 'windows-1256'],\r\n  ['x-cp1256', 'windows-1256'],\r\n  ['cp1257', 'windows-1257'],\r\n  ['windows-1257', 'windows-1257'],\r\n  ['x-cp1257', 'windows-1257'],\r\n  ['cp1258', 'windows-1258'],\r\n  ['windows-1258', 'windows-1258'],\r\n  ['x-cp1258', 'windows-1258'],\r\n  ['x-mac-cyrillic', 'x-mac-cyrillic'],\r\n  ['x-mac-ukrainian', 'x-mac-cyrillic'],\r\n  ['chinese', 'gbk'],\r\n  ['csgb2312', 'gbk'],\r\n  ['csiso58gb231280', 'gbk'],\r\n  ['gb2312', 'gbk'],\r\n  ['gb_2312', 'gbk'],\r\n  ['gb_2312-80', 'gbk'],\r\n  ['gbk', 'gbk'],\r\n  ['iso-ir-58', 'gbk'],\r\n  ['x-gbk', 'gbk'],\r\n  ['gb18030', 'gb18030'],\r\n  ['big5', 'big5'],\r\n  ['big5-hkscs', 'big5'],\r\n  ['cn-big5', 'big5'],\r\n  ['csbig5', 'big5'],\r\n  ['x-x-big5', 'big5'],\r\n  ['cseucpkdfmtjapanese', 'euc-jp'],\r\n  ['euc-jp', 'euc-jp'],\r\n  ['x-euc-jp', 'euc-jp'],\r\n  ['csiso2022jp', 'iso-2022-jp'],\r\n  ['iso-2022-jp', 'iso-2022-jp'],\r\n  ['csshiftjis', 'shift_jis'],\r\n  ['ms932', 'shift_jis'],\r\n  ['ms_kanji', 'shift_jis'],\r\n  ['shift-jis', 'shift_jis'],\r\n  ['shift_jis', 'shift_jis'],\r\n  ['sjis', 'shift_jis'],\r\n  ['windows-31j', 'shift_jis'],\r\n  ['x-sjis', 'shift_jis'],\r\n  ['cseuckr', 'euc-kr'],\r\n  ['csksc56011987', 'euc-kr'],\r\n  ['euc-kr', 'euc-kr'],\r\n  ['iso-ir-149', 'euc-kr'],\r\n  ['korean', 'euc-kr'],\r\n  ['ks_c_5601-1987', 'euc-kr'],\r\n  ['ks_c_5601-1989', 'euc-kr'],\r\n  ['ksc5601', 'euc-kr'],\r\n  ['ksc_5601', 'euc-kr'],\r\n  ['windows-949', 'euc-kr'],\r\n  ['csiso2022kr', 'replacement'],\r\n  ['hz-gb-2312', 'replacement'],\r\n  ['iso-2022-cn', 'replacement'],\r\n  ['iso-2022-cn-ext', 'replacement'],\r\n  ['iso-2022-kr', 'replacement'],\r\n  ['replacement', 'replacement'],\r\n  ['unicodefffe', 'utf-16be'],\r\n  ['utf-16be', 'utf-16be'],\r\n  ['csunicode', 'utf-16le'],\r\n  ['iso-10646-ucs-2', 'utf-16le'],\r\n  ['ucs-2', 'utf-16le'],\r\n  ['unicode', 'utf-16le'],\r\n  ['unicodefeff', 'utf-16le'],\r\n  ['utf-16le', 'utf-16le'],\r\n  ['utf-16', 'utf-16le'],\r\n  ['x-user-defined', 'x-user-defined'],\r\n]);\r\n\r\n// Unfortunately, String.prototype.trim also removes non-ascii whitespace,\r\n// so we have to do this manually\r\nfunction trimAsciiWhitespace(label) {\r\n  let s = 0;\r\n  let e = label.length;\r\n  while (s < e && (\r\n    label[s] === '\\u0009' ||\r\n    label[s] === '\\u000a' ||\r\n    label[s] === '\\u000c' ||\r\n    label[s] === '\\u000d' ||\r\n    label[s] === '\\u0020')) {\r\n    s++;\r\n  }\r\n  while (e > s && (\r\n    label[e - 1] === '\\u0009' ||\r\n    label[e - 1] === '\\u000a' ||\r\n    label[e - 1] === '\\u000c' ||\r\n    label[e - 1] === '\\u000d' ||\r\n    label[e - 1] === '\\u0020')) {\r\n    e--;\r\n  }\r\n  return StringPrototypeSlice(label, s, e);\r\n}\r\n\r\nfunction getEncodingFromLabel(label) {\r\n  const enc = encodings.get(label);\r\n  if (enc !== undefined) return enc;\r\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\r\n}\r\n\r\nclass TextEncoder {\r\n  constructor() {\r\n    this[kEncoder] = true;\r\n  }\r\n\r\n  get encoding() {\r\n    validateEncoder(this);\r\n    return 'utf-8';\r\n  }\r\n\r\n  encode(input = '') {\r\n    validateEncoder(this);\r\n    return encodeUtf8String(`${input}`);\r\n  }\r\n\r\n  encodeInto(src, dest) {\r\n    validateEncoder(this);\r\n    validateString(src, 'src');\r\n    if (!dest || !isUint8Array(dest))\r\n      throw new ERR_INVALID_ARG_TYPE('dest', 'Uint8Array', dest);\r\n\r\n    encodeInto(src, dest);\r\n    // We need to read from the binding here since the buffer gets refreshed\r\n    // from the snapshot.\r\n    const { 0: read, 1: written } = encodeIntoResults;\r\n    return { read, written };\r\n  }\r\n\r\n  [inspect](depth, opts) {\r\n    validateEncoder(this);\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n    const ctor = getConstructorOf(this);\r\n    const obj = { __proto__: {\r\n      constructor: ctor === null ? TextEncoder : ctor,\r\n    } };\r\n    obj.encoding = this.encoding;\r\n    // Lazy to avoid circular dependency\r\n    return require('internal/util/inspect').inspect(obj, opts);\r\n  }\r\n}\r\n\r\nObjectDefineProperties(\r\n  TextEncoder.prototype, {\r\n    'encode': kEnumerableProperty,\r\n    'encodeInto': kEnumerableProperty,\r\n    'encoding': kEnumerableProperty,\r\n    [SymbolToStringTag]: { __proto__: null, configurable: true, value: 'TextEncoder' },\r\n  });\r\n\r\nconst TextDecoder =\r\n  internalBinding('config').hasIntl ?\r\n    makeTextDecoderICU() :\r\n    makeTextDecoderJS();\r\n\r\nfunction makeTextDecoderICU() {\r\n  const {\r\n    decode: _decode,\r\n    getConverter,\r\n  } = internalBinding('icu');\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = kEmptyObject) {\r\n      encoding = `${encoding}`;\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      let flags = 0;\r\n      if (options !== null) {\r\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      this[kDecoder] = true;\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n      this[kIgnoreBOM] = Boolean(options?.ignoreBOM);\r\n      this[kFatal] = Boolean(options?.fatal);\r\n      // Only support fast path for UTF-8.\r\n      this[kUTF8FastPath] = enc === 'utf-8';\r\n      this[kHandle] = undefined;\r\n\r\n      if (!this[kUTF8FastPath]) {\r\n        this.#prepareConverter();\r\n      }\r\n    }\r\n\r\n    #prepareConverter() {\r\n      if (this[kHandle] !== undefined) return;\r\n      const handle = getConverter(this[kEncoding], this[kFlags]);\r\n      if (handle === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(this[kEncoding]);\r\n      this[kHandle] = handle;\r\n    }\r\n\r\n    decode(input = empty, options = kEmptyObject) {\r\n      validateDecoder(this);\r\n\r\n      this[kUTF8FastPath] &&= !(options?.stream);\r\n\r\n      if (this[kUTF8FastPath]) {\r\n        return decodeUTF8(input, this[kIgnoreBOM], this[kFatal]);\r\n      }\r\n\r\n      this.#prepareConverter();\r\n\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      let flags = 0;\r\n      if (options !== null)\r\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\r\n\r\n      return _decode(this[kHandle], input, flags, this.encoding);\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\nfunction makeTextDecoderJS() {\r\n  let StringDecoder;\r\n  function lazyStringDecoder() {\r\n    if (StringDecoder === undefined)\r\n      ({ StringDecoder } = require('string_decoder'));\r\n    return StringDecoder;\r\n  }\r\n\r\n  const kBOMSeen = Symbol('BOM seen');\r\n\r\n  function hasConverter(encoding) {\r\n    return encoding === 'utf-8' || encoding === 'utf-16le';\r\n  }\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = kEmptyObject) {\r\n      encoding = `${encoding}`;\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined || !hasConverter(enc))\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      let flags = 0;\r\n      if (options !== null) {\r\n        if (options.fatal) {\r\n          throw new ERR_NO_ICU('\"fatal\" option');\r\n        }\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      this[kDecoder] = true;\r\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\r\n      this[kHandle] = new (lazyStringDecoder())(enc);\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n      this[kBOMSeen] = false;\r\n    }\r\n\r\n    decode(input = empty, options = kEmptyObject) {\r\n      validateDecoder(this);\r\n      if (isAnyArrayBuffer(input)) {\r\n        try {\r\n          input = Buffer.from(input);\r\n        } catch {\r\n          input = empty;\r\n        }\r\n      } else if (isArrayBufferView(input)) {\r\n        try {\r\n          input = Buffer.from(input.buffer, input.byteOffset,\r\n                              input.byteLength);\r\n        } catch {\r\n          input = empty;\r\n        }\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE('input',\r\n                                       ['ArrayBuffer', 'ArrayBufferView'],\r\n                                       input);\r\n      }\r\n      validateObject(options, 'options', kValidateObjectAllowObjectsAndNull);\r\n\r\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\r\n        this[kBOMSeen] = false;\r\n      }\r\n\r\n      if (options !== null && options.stream) {\r\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\r\n      } else {\r\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\r\n      }\r\n\r\n      let result = this[kFlags] & CONVERTER_FLAGS_FLUSH ?\r\n        this[kHandle].end(input) :\r\n        this[kHandle].write(input);\r\n\r\n      if (result.length > 0 &&\r\n          !this[kBOMSeen] &&\r\n          !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\r\n        // If the very first result in the stream is a BOM, and we are not\r\n        // explicitly told to ignore it, then we discard it.\r\n        if (result[0] === '\\ufeff') {\r\n          result = StringPrototypeSlice(result, 1);\r\n        }\r\n        this[kBOMSeen] = true;\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\n// Mix in some shared properties.\r\nconst sharedProperties = ObjectGetOwnPropertyDescriptors({\r\n  get encoding() {\r\n    validateDecoder(this);\r\n    return this[kEncoding];\r\n  },\r\n\r\n  get fatal() {\r\n    validateDecoder(this);\r\n    return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\r\n  },\r\n\r\n  get ignoreBOM() {\r\n    validateDecoder(this);\r\n    return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\r\n              CONVERTER_FLAGS_IGNORE_BOM;\r\n  },\r\n\r\n  [inspect](depth, opts) {\r\n    validateDecoder(this);\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n    const constructor = getConstructorOf(this) || TextDecoder;\r\n    const obj = { __proto__: { constructor } };\r\n    obj.encoding = this.encoding;\r\n    obj.fatal = this.fatal;\r\n    obj.ignoreBOM = this.ignoreBOM;\r\n    if (opts.showHidden) {\r\n      obj[kFlags] = this[kFlags];\r\n      obj[kHandle] = this[kHandle];\r\n    }\r\n    // Lazy to avoid circular dependency\r\n    const { inspect } = require('internal/util/inspect');\r\n    return `${constructor.name} ${inspect(obj)}`;\r\n  },\r\n});\r\nconst propertiesValues = ObjectValues(sharedProperties);\r\nfor (let i = 0; i < propertiesValues.length; i++) {\r\n  // We want to use null-prototype objects to not rely on globally mutable\r\n  // %Object.prototype%.\r\n  ObjectSetPrototypeOf(propertiesValues[i], null);\r\n}\r\nsharedProperties[inspect].enumerable = false;\r\n\r\nObjectDefineProperties(TextDecoder.prototype, {\r\n  decode: kEnumerableProperty,\r\n  ...sharedProperties,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value: 'TextDecoder',\r\n  },\r\n});\r\n\r\nmodule.exports = {\r\n  getEncodingFromLabel,\r\n  TextDecoder,\r\n  TextEncoder,\r\n};\r\n"
  },
  "45": {
    "metadata": {
      "scriptId": "45",
      "url": "node:internal/webstreams/queuingstrategies",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 164,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "59213bdaafd432931bed191e6f80b9e1419f161148eeecd5b7fc3386bf6d5962",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3456,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/queuingstrategies"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_MISSING_OPTION,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  customInspectSymbol: kInspect,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  customInspect,\r\n} = require('internal/webstreams/util');\r\n\r\nconst {\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\n/**\r\n * @callback QueuingStrategySize\r\n * @param {any} chunk\r\n * @returns {number}\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   highWaterMark : number,\r\n *   size? : QueuingStrategySize,\r\n * }} QueuingStrategy\r\n */\r\n\r\nconst nameDescriptor = { __proto__: null, value: 'size' };\r\nconst byteSizeFunction = ObjectDefineProperty(\r\n  (chunk) => chunk.byteLength,\r\n  'name',\r\n  nameDescriptor,\r\n);\r\nconst countSizeFunction = ObjectDefineProperty(() => 1, 'name', nameDescriptor);\r\n\r\nconst getNonWritablePropertyDescriptor = (value) => {\r\n  return {\r\n    __proto__: null,\r\n    configurable: true,\r\n    value,\r\n  };\r\n};\r\n\r\n/**\r\n * @type {QueuingStrategy}\r\n */\r\nclass ByteLengthQueuingStrategy {\r\n  #state;\r\n  #byteSizeFunction = byteSizeFunction;\r\n\r\n  /**\r\n   * @param {{\r\n   *   highWaterMark : number\r\n   * }} init\r\n   */\r\n  constructor(init) {\r\n    validateObject(init, 'init');\r\n    if (init.highWaterMark === undefined)\r\n      throw new ERR_MISSING_OPTION('init.highWaterMark');\r\n\r\n    // The highWaterMark value is not checked until the strategy\r\n    // is actually used, per the spec.\r\n    this.#state = {\r\n      highWaterMark: +init.highWaterMark,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get highWaterMark() {\r\n    return this.#state.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * @type {QueuingStrategySize}\r\n   */\r\n  get size() {\r\n    return this.#byteSizeFunction;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'ByteLengthQueuingStrategy', {\r\n      highWaterMark: this.highWaterMark,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(ByteLengthQueuingStrategy.prototype, {\r\n  highWaterMark: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(ByteLengthQueuingStrategy.name),\r\n});\r\n\r\n/**\r\n * @type {QueuingStrategy}\r\n */\r\nclass CountQueuingStrategy {\r\n  #state;\r\n  #countSizeFunction = countSizeFunction;\r\n\r\n  /**\r\n   * @param {{\r\n   *   highWaterMark : number\r\n   * }} init\r\n   */\r\n  constructor(init) {\r\n    validateObject(init, 'init');\r\n    if (init.highWaterMark === undefined)\r\n      throw new ERR_MISSING_OPTION('init.highWaterMark');\r\n\r\n    // The highWaterMark value is not checked until the strategy\r\n    // is actually used, per the spec.\r\n    this.#state = {\r\n      highWaterMark: +init.highWaterMark,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @readonly\r\n   * @type {number}\r\n   */\r\n  get highWaterMark() {\r\n    return this.#state.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * @type {QueuingStrategySize}\r\n   */\r\n  get size() {\r\n    return this.#countSizeFunction;\r\n  }\r\n\r\n  [kInspect](depth, options) {\r\n    return customInspect(depth, options, 'CountQueuingStrategy', {\r\n      highWaterMark: this.highWaterMark,\r\n    });\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CountQueuingStrategy.prototype, {\r\n  highWaterMark: kEnumerableProperty,\r\n  size: kEnumerableProperty,\r\n  [SymbolToStringTag]: getNonWritablePropertyDescriptor(CountQueuingStrategy.name),\r\n});\r\n\r\nmodule.exports = {\r\n  ByteLengthQueuingStrategy,\r\n  CountQueuingStrategy,\r\n};\r\n"
  },
  "46": {
    "metadata": {
      "scriptId": "46",
      "url": "node:internal/webstreams/util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 298,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "6373f54c70037c2c2ee38e820c7bf0d8f5a561ae16e1cbd01e57d8e89fb28c74",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 7983,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webstreams/util"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayBufferPrototypeSlice,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeShift,\r\n  AsyncIteratorPrototype,\r\n  FunctionPrototypeCall,\r\n  MathMax,\r\n  NumberIsNaN,\r\n  PromisePrototypeThen,\r\n  ReflectGet,\r\n  Symbol,\r\n  SymbolAsyncIterator,\r\n  SymbolIterator,\r\n  Uint8Array,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_STATE,\r\n    ERR_OPERATION_FAILED,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  copyArrayBuffer,\r\n  detachArrayBuffer,\r\n} = internalBinding('buffer');\r\n\r\nconst {\r\n  inspect,\r\n} = require('util');\r\n\r\nconst {\r\n  constants: {\r\n    kPending,\r\n  },\r\n  getPromiseDetails,\r\n} = internalBinding('util');\r\n\r\nconst assert = require('internal/assert');\r\nconst { isArrayBufferDetached } = require('internal/util');\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\n\r\nconst kState = Symbol('kState');\r\nconst kType = Symbol('kType');\r\n\r\nconst AsyncIterator = {\r\n  __proto__: AsyncIteratorPrototype,\r\n  next: undefined,\r\n  return: undefined,\r\n};\r\n\r\nfunction extractHighWaterMark(value, defaultHWM) {\r\n  if (value === undefined) return defaultHWM;\r\n  value = +value;\r\n  if (typeof value !== 'number' ||\r\n      NumberIsNaN(value) ||\r\n      value < 0)\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('strategy.highWaterMark', value);\r\n  return value;\r\n}\r\n\r\nfunction extractSizeAlgorithm(size) {\r\n  if (size === undefined) return () => 1;\r\n  validateFunction(size, 'strategy.size');\r\n  return size;\r\n}\r\n\r\nfunction customInspect(depth, options, name, data) {\r\n  if (depth < 0)\r\n    return this;\r\n\r\n  const opts = {\r\n    ...options,\r\n    depth: options.depth == null ? null : options.depth - 1,\r\n  };\r\n\r\n  return `${name} ${inspect(data, opts)}`;\r\n}\r\n\r\n// These are defensive to work around the possibility that\r\n// the buffer, byteLength, and byteOffset properties on\r\n// ArrayBuffer and ArrayBufferView's may have been tampered with.\r\n\r\nfunction ArrayBufferViewGetBuffer(view) {\r\n  return ReflectGet(view.constructor.prototype, 'buffer', view);\r\n}\r\n\r\nfunction ArrayBufferViewGetByteLength(view) {\r\n  return ReflectGet(view.constructor.prototype, 'byteLength', view);\r\n}\r\n\r\nfunction ArrayBufferViewGetByteOffset(view) {\r\n  return ReflectGet(view.constructor.prototype, 'byteOffset', view);\r\n}\r\n\r\nfunction cloneAsUint8Array(view) {\r\n  const buffer = ArrayBufferViewGetBuffer(view);\r\n  const byteOffset = ArrayBufferViewGetByteOffset(view);\r\n  const byteLength = ArrayBufferViewGetByteLength(view);\r\n  return new Uint8Array(\r\n    ArrayBufferPrototypeSlice(buffer, byteOffset, byteOffset + byteLength),\r\n  );\r\n}\r\n\r\nfunction isBrandCheck(brand) {\r\n  return (value) => {\r\n    return value != null &&\r\n           value[kState] !== undefined &&\r\n           value[kType] === brand;\r\n  };\r\n}\r\n\r\nfunction transferArrayBuffer(buffer) {\r\n  const res = detachArrayBuffer(buffer);\r\n  if (res === undefined) {\r\n    throw new ERR_OPERATION_FAILED.TypeError(\r\n      'The ArrayBuffer could not be transferred');\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction isViewedArrayBufferDetached(view) {\r\n  return (\r\n    ArrayBufferViewGetByteLength(view) === 0 &&\r\n    isArrayBufferDetached(ArrayBufferViewGetBuffer(view))\r\n  );\r\n}\r\n\r\nfunction dequeueValue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  assert(controller[kState].queue.length);\r\n  const {\r\n    value,\r\n    size,\r\n  } = ArrayPrototypeShift(controller[kState].queue);\r\n  controller[kState].queueTotalSize =\r\n    MathMax(0, controller[kState].queueTotalSize - size);\r\n  return value;\r\n}\r\n\r\nfunction resetQueue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  controller[kState].queue = [];\r\n  controller[kState].queueTotalSize = 0;\r\n}\r\n\r\nfunction peekQueueValue(controller) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  assert(controller[kState].queue.length);\r\n  return controller[kState].queue[0].value;\r\n}\r\n\r\nfunction enqueueValueWithSize(controller, value, size) {\r\n  assert(controller[kState].queue !== undefined);\r\n  assert(controller[kState].queueTotalSize !== undefined);\r\n  size = +size;\r\n  if (typeof size !== 'number' ||\r\n      size < 0 ||\r\n      NumberIsNaN(size) ||\r\n      size === Infinity) {\r\n    throw new ERR_INVALID_ARG_VALUE.RangeError('size', size);\r\n  }\r\n  ArrayPrototypePush(controller[kState].queue, { value, size });\r\n  controller[kState].queueTotalSize += size;\r\n}\r\n\r\n// This implements \"invoke a callback function type\" for callback functions that return a promise.\r\n// See https://webidl.spec.whatwg.org/#es-invoking-callback-functions\r\nasync function invokePromiseCallback(fn, thisArg, ...args) {\r\n  return FunctionPrototypeCall(fn, thisArg, ...args);\r\n}\r\n\r\nfunction createPromiseCallback(name, fn, thisArg) {\r\n  validateFunction(fn, name);\r\n  return (...args) => invokePromiseCallback(fn, thisArg, ...args);\r\n}\r\n\r\nfunction isPromisePending(promise) {\r\n  if (promise === undefined) return false;\r\n  const details = getPromiseDetails(promise);\r\n  return details?.[0] === kPending;\r\n}\r\n\r\nfunction setPromiseHandled(promise) {\r\n  // Alternatively, we could use the native API\r\n  // MarkAsHandled, but this avoids the extra boundary cross\r\n  // and is hopefully faster at the cost of an extra Promise\r\n  // allocation.\r\n  PromisePrototypeThen(promise, () => {}, () => {});\r\n}\r\n\r\nasync function nonOpFlush() {}\r\n\r\nfunction nonOpStart() {}\r\n\r\nasync function nonOpPull() {}\r\n\r\nasync function nonOpCancel() {}\r\n\r\nasync function nonOpWrite() {}\r\n\r\nlet transfer;\r\nfunction lazyTransfer() {\r\n  if (transfer === undefined)\r\n    transfer = require('internal/webstreams/transfer');\r\n  return transfer;\r\n}\r\n\r\nfunction createAsyncFromSyncIterator(syncIteratorRecord) {\r\n  const syncIterable = {\r\n    [SymbolIterator]: () => syncIteratorRecord.iterator,\r\n  };\r\n\r\n  const asyncIterator = (async function* () {\r\n    return yield* syncIterable;\r\n  }());\r\n\r\n  const nextMethod = asyncIterator.next;\r\n  return { iterator: asyncIterator, nextMethod, done: false };\r\n}\r\n\r\nfunction getIterator(obj, kind = 'sync', method) {\r\n  if (method === undefined) {\r\n    if (kind === 'async') {\r\n      method = obj[SymbolAsyncIterator];\r\n      if (method === undefined) {\r\n        const syncMethod = obj[SymbolIterator];\r\n        const syncIteratorRecord = getIterator(obj, 'sync', syncMethod);\r\n        return createAsyncFromSyncIterator(syncIteratorRecord);\r\n      }\r\n    } else {\r\n      method = obj[SymbolIterator];\r\n    }\r\n  }\r\n\r\n  const iterator = FunctionPrototypeCall(method, obj);\r\n  if (typeof iterator !== 'object' || iterator === null) {\r\n    throw new ERR_INVALID_STATE.TypeError('The iterator method must return an object');\r\n  }\r\n  const nextMethod = iterator.next;\r\n  return { iterator, nextMethod, done: false };\r\n}\r\n\r\nfunction iteratorNext(iteratorRecord, value) {\r\n  let result;\r\n  if (value === undefined) {\r\n    result = FunctionPrototypeCall(iteratorRecord.nextMethod, iteratorRecord.iterator);\r\n  } else {\r\n    result = FunctionPrototypeCall(iteratorRecord.nextMethod, iteratorRecord.iterator, [value]);\r\n  }\r\n  if (typeof result !== 'object' || result === null) {\r\n    throw new ERR_INVALID_STATE.TypeError('The iterator.next() method must return an object');\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n  ArrayBufferViewGetBuffer,\r\n  ArrayBufferViewGetByteLength,\r\n  ArrayBufferViewGetByteOffset,\r\n  AsyncIterator,\r\n  createPromiseCallback,\r\n  cloneAsUint8Array,\r\n  copyArrayBuffer,\r\n  customInspect,\r\n  dequeueValue,\r\n  enqueueValueWithSize,\r\n  extractHighWaterMark,\r\n  extractSizeAlgorithm,\r\n  lazyTransfer,\r\n  invokePromiseCallback,\r\n  isBrandCheck,\r\n  isPromisePending,\r\n  isViewedArrayBufferDetached,\r\n  peekQueueValue,\r\n  resetQueue,\r\n  setPromiseHandled,\r\n  transferArrayBuffer,\r\n  nonOpCancel,\r\n  nonOpFlush,\r\n  nonOpPull,\r\n  nonOpStart,\r\n  nonOpWrite,\r\n  getIterator,\r\n  iteratorNext,\r\n  kType,\r\n  kState,\r\n};\r\n"
  },
  "47": {
    "metadata": {
      "scriptId": "47",
      "url": "node:util",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 538,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "2f089bddb108b49b18e398519a4ca47e602ea1738f7a87bf88ca295c9cb144e4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 16631,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:util"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePop,\r\n  Date,\r\n  DatePrototypeGetDate,\r\n  DatePrototypeGetHours,\r\n  DatePrototypeGetMinutes,\r\n  DatePrototypeGetMonth,\r\n  DatePrototypeGetSeconds,\r\n  Error,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  NumberIsSafeInteger,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptors,\r\n  ObjectKeys,\r\n  ObjectPrototypeToString,\r\n  ObjectSetPrototypeOf,\r\n  ObjectValues,\r\n  ReflectApply,\r\n  StringPrototypePadStart,\r\n  StringPrototypeToWellFormed,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n  ExceptionWithHostPort,\r\n  codes: {\r\n    ERR_FALSY_VALUE_REJECTION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OUT_OF_RANGE,\r\n  },\r\n  isErrorStackTraceLimitWritable,\r\n} = require('internal/errors');\r\nconst {\r\n  format,\r\n  formatWithOptions,\r\n  inspect,\r\n  stripVTControlCharacters,\r\n} = require('internal/util/inspect');\r\nconst { debuglog } = require('internal/util/debuglog');\r\nconst {\r\n  validateFunction,\r\n  validateNumber,\r\n  validateString,\r\n  validateOneOf,\r\n} = require('internal/validators');\r\nconst { isBuffer } = require('buffer').Buffer;\r\nconst types = require('internal/util/types');\r\nconst binding = internalBinding('util');\r\n\r\nconst {\r\n  deprecate,\r\n  getSystemErrorMap,\r\n  getSystemErrorName: internalErrorName,\r\n  promisify,\r\n  defineLazyProperties,\r\n} = require('internal/util');\r\n\r\nlet abortController;\r\n\r\nfunction lazyAbortController() {\r\n  abortController ??= require('internal/abort_controller');\r\n  return abortController;\r\n}\r\n\r\nlet internalDeepEqual;\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is boolean}\r\n */\r\nfunction isBoolean(arg) {\r\n  return typeof arg === 'boolean';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is null}\r\n */\r\nfunction isNull(arg) {\r\n  return arg === null;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is (null | undefined)}\r\n */\r\nfunction isNullOrUndefined(arg) {\r\n  return arg === null || arg === undefined;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is number}\r\n */\r\nfunction isNumber(arg) {\r\n  return typeof arg === 'number';\r\n}\r\n\r\n/**\r\n * @param {any} arg\r\n * @returns {arg is string}\r\n */\r\nfunction isString(arg) {\r\n  return typeof arg === 'string';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is symbol}\r\n */\r\nfunction isSymbol(arg) {\r\n  return typeof arg === 'symbol';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is undefined}\r\n */\r\nfunction isUndefined(arg) {\r\n  return arg === undefined;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {a is NonNullable<object>}\r\n */\r\nfunction isObject(arg) {\r\n  return arg !== null && typeof arg === 'object';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} e\r\n * @returns {arg is Error}\r\n */\r\nfunction isError(e) {\r\n  return ObjectPrototypeToString(e) === '[object Error]' || e instanceof Error;\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is Function}\r\n */\r\nfunction isFunction(arg) {\r\n  return typeof arg === 'function';\r\n}\r\n\r\n/**\r\n * @deprecated since v4.0.0\r\n * @param {any} arg\r\n * @returns {arg is (boolean | null | number | string | symbol | undefined)}\r\n */\r\nfunction isPrimitive(arg) {\r\n  return arg === null ||\r\n         (typeof arg !== 'object' && typeof arg !== 'function');\r\n}\r\n\r\n/**\r\n * @param {number} n\r\n * @returns {string}\r\n */\r\nfunction pad(n) {\r\n  return StringPrototypePadStart(n.toString(), 2, '0');\r\n}\r\n\r\n/**\r\n * @param {string} code\r\n * @returns {string}\r\n */\r\nfunction escapeStyleCode(code) {\r\n  return `\\u001b[${code}m`;\r\n}\r\n\r\n/**\r\n * @param {string | string[]} format\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nfunction styleText(format, text) {\r\n  validateString(text, 'text');\r\n  if (ArrayIsArray(format)) {\r\n    let left = '';\r\n    let right = '';\r\n    for (const key of format) {\r\n      const formatCodes = inspect.colors[key];\r\n      if (formatCodes == null) {\r\n        validateOneOf(key, 'format', ObjectKeys(inspect.colors));\r\n      }\r\n      left += escapeStyleCode(formatCodes[0]);\r\n      right = `${escapeStyleCode(formatCodes[1])}${right}`;\r\n    }\r\n\r\n    return `${left}${text}${right}`;\r\n  }\r\n\r\n  const formatCodes = inspect.colors[format];\r\n  if (formatCodes == null) {\r\n    validateOneOf(format, 'format', ObjectKeys(inspect.colors));\r\n  }\r\n  return `${escapeStyleCode(formatCodes[0])}${text}${escapeStyleCode(formatCodes[1])}`;\r\n}\r\n\r\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\r\n                'Oct', 'Nov', 'Dec'];\r\n\r\n/**\r\n * @returns {string}  26 Feb 16:19:34\r\n */\r\nfunction timestamp() {\r\n  const d = new Date();\r\n  const t = ArrayPrototypeJoin([\r\n    pad(DatePrototypeGetHours(d)),\r\n    pad(DatePrototypeGetMinutes(d)),\r\n    pad(DatePrototypeGetSeconds(d)),\r\n  ], ':');\r\n  return `${DatePrototypeGetDate(d)} ${months[DatePrototypeGetMonth(d)]} ${t}`;\r\n}\r\n\r\nlet console;\r\n/**\r\n * Log is just a thin wrapper to console.log that prepends a timestamp\r\n * @deprecated since v6.0.0\r\n * @type {(...args: any[]) => void}\r\n */\r\nfunction log(...args) {\r\n  if (!console) {\r\n    console = require('internal/console/global');\r\n  }\r\n  console.log('%s - %s', timestamp(), format(...args));\r\n}\r\n\r\n/**\r\n * Inherit the prototype methods from one constructor into another.\r\n *\r\n * The Function.prototype.inherits from lang.js rewritten as a standalone\r\n * function (not on Function.prototype). NOTE: If this file is to be loaded\r\n * during bootstrapping this function needs to be rewritten using some native\r\n * functions as prototype setup using normal JavaScript does not work as\r\n * expected during bootstrapping (see mirror.js in r114903).\r\n * @param {Function} ctor Constructor function which needs to inherit the\r\n *     prototype.\r\n * @param {Function} superCtor Constructor function to inherit prototype from.\r\n * @throws {TypeError} Will error if either constructor is null, or if\r\n *     the super constructor lacks a prototype.\r\n */\r\nfunction inherits(ctor, superCtor) {\r\n\r\n  if (ctor === undefined || ctor === null)\r\n    throw new ERR_INVALID_ARG_TYPE('ctor', 'Function', ctor);\r\n\r\n  if (superCtor === undefined || superCtor === null)\r\n    throw new ERR_INVALID_ARG_TYPE('superCtor', 'Function', superCtor);\r\n\r\n  if (superCtor.prototype === undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('superCtor.prototype',\r\n                                   'Object', superCtor.prototype);\r\n  }\r\n  ObjectDefineProperty(ctor, 'super_', {\r\n    __proto__: null,\r\n    value: superCtor,\r\n    writable: true,\r\n    configurable: true,\r\n  });\r\n  ObjectSetPrototypeOf(ctor.prototype, superCtor.prototype);\r\n}\r\n\r\n/**\r\n * @deprecated since v6.0.0\r\n * @template T\r\n * @template S\r\n * @param {T} target\r\n * @param {S} source\r\n * @returns {S extends null ? T : (T & S)}\r\n */\r\nfunction _extend(target, source) {\r\n  // Don't do anything if source isn't an object\r\n  if (source === null || typeof source !== 'object') return target;\r\n\r\n  const keys = ObjectKeys(source);\r\n  let i = keys.length;\r\n  while (i--) {\r\n    target[keys[i]] = source[keys[i]];\r\n  }\r\n  return target;\r\n}\r\n\r\nconst callbackifyOnRejected = (reason, cb) => {\r\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\r\n  // Because `null` is a special error value in callbacks which means \"no error\r\n  // occurred\", we error-wrap so the callback consumer can distinguish between\r\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\r\n  if (!reason) {\r\n    reason = new ERR_FALSY_VALUE_REJECTION.HideStackFramesError(reason);\r\n    ErrorCaptureStackTrace(reason, callbackifyOnRejected);\r\n  }\r\n  return cb(reason);\r\n};\r\n\r\n/**\r\n * @template {(...args: any[]) => Promise<any>} T\r\n * @param {T} original\r\n * @returns {T extends (...args: infer TArgs) => Promise<infer TReturn> ?\r\n *   ((...params: [...TArgs, ((err: Error, ret: TReturn) => any)]) => void) :\r\n *   never\r\n * }\r\n */\r\nfunction callbackify(original) {\r\n  validateFunction(original, 'original');\r\n\r\n  // We DO NOT return the promise as it gives the user a false sense that\r\n  // the promise is actually somehow related to the callback's execution\r\n  // and that the callback throwing will reject the promise.\r\n  function callbackified(...args) {\r\n    const maybeCb = ArrayPrototypePop(args);\r\n    validateFunction(maybeCb, 'last argument');\r\n    const cb = FunctionPrototypeBind(maybeCb, this);\r\n    // In true node style we process the callback on `nextTick` with all the\r\n    // implications (stack, `uncaughtException`, `async_hooks`)\r\n    ReflectApply(original, this, args)\r\n      .then((ret) => process.nextTick(cb, null, ret),\r\n            (rej) => process.nextTick(callbackifyOnRejected, rej, cb));\r\n  }\r\n\r\n  const descriptors = ObjectGetOwnPropertyDescriptors(original);\r\n  // It is possible to manipulate a functions `length` or `name` property. This\r\n  // guards against the manipulation.\r\n  if (typeof descriptors.length.value === 'number') {\r\n    descriptors.length.value++;\r\n  }\r\n  if (typeof descriptors.name.value === 'string') {\r\n    descriptors.name.value += 'Callbackified';\r\n  }\r\n  const propertiesValues = ObjectValues(descriptors);\r\n  for (let i = 0; i < propertiesValues.length; i++) {\r\n  // We want to use null-prototype objects to not rely on globally mutable\r\n  // %Object.prototype%.\r\n    ObjectSetPrototypeOf(propertiesValues[i], null);\r\n  }\r\n  ObjectDefineProperties(callbackified, descriptors);\r\n  return callbackified;\r\n}\r\n\r\n/**\r\n * @param {number} err\r\n * @returns {string}\r\n */\r\nfunction getSystemErrorName(err) {\r\n  validateNumber(err, 'err');\r\n  if (err >= 0 || !NumberIsSafeInteger(err)) {\r\n    throw new ERR_OUT_OF_RANGE('err', 'a negative integer', err);\r\n  }\r\n  return internalErrorName(err);\r\n}\r\n\r\nfunction _errnoException(...args) {\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const e = new ErrnoException(...args);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(e, _exceptionWithHostPort);\r\n    return e;\r\n  }\r\n  return new ErrnoException(...args);\r\n}\r\n\r\nfunction _exceptionWithHostPort(...args) {\r\n  if (isErrorStackTraceLimitWritable()) {\r\n    const limit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    const e = new ExceptionWithHostPort(...args);\r\n    Error.stackTraceLimit = limit;\r\n    ErrorCaptureStackTrace(e, _exceptionWithHostPort);\r\n    return e;\r\n  }\r\n  return new ExceptionWithHostPort(...args);\r\n}\r\n\r\n/**\r\n * Parses the content of a `.env` file.\r\n * @param {string} content\r\n * @returns {Record<string, string>}\r\n */\r\nfunction parseEnv(content) {\r\n  validateString(content, 'content');\r\n  return binding.parseEnv(content);\r\n}\r\n\r\n// Keep the `exports =` so that various functions can still be monkeypatched\r\nmodule.exports = {\r\n  _errnoException,\r\n  _exceptionWithHostPort,\r\n  _extend: deprecate(_extend,\r\n                     'The `util._extend` API is deprecated. Please use Object.assign() instead.',\r\n                     'DEP0060'),\r\n  callbackify,\r\n  debug: debuglog,\r\n  debuglog,\r\n  deprecate,\r\n  format,\r\n  styleText,\r\n  formatWithOptions,\r\n  getSystemErrorMap,\r\n  getSystemErrorName,\r\n  inherits,\r\n  inspect,\r\n  isArray: deprecate(ArrayIsArray,\r\n                     'The `util.isArray` API is deprecated. Please use `Array.isArray()` instead.',\r\n                     'DEP0044'),\r\n  isBoolean: deprecate(isBoolean,\r\n                       'The `util.isBoolean` API is deprecated.  Please use `typeof arg === \"boolean\"` instead.',\r\n                       'DEP0045'),\r\n  isBuffer: deprecate(isBuffer,\r\n                      'The `util.isBuffer` API is deprecated. Please use `Buffer.isBuffer()` instead.',\r\n                      'DEP0046'),\r\n  isDeepStrictEqual(a, b) {\r\n    if (internalDeepEqual === undefined) {\r\n      internalDeepEqual = require('internal/util/comparisons')\r\n        .isDeepStrictEqual;\r\n    }\r\n    return internalDeepEqual(a, b);\r\n  },\r\n  isNull: deprecate(isNull,\r\n                    'The `util.isNull` API is deprecated. Please use `arg === null` instead.',\r\n                    'DEP0050'),\r\n  isNullOrUndefined: deprecate(isNullOrUndefined,\r\n                               'The `util.isNullOrUndefined` API is deprecated. ' +\r\n                               'Please use `arg === null || arg === undefined` instead.',\r\n                               'DEP0051'),\r\n  isNumber: deprecate(isNumber,\r\n                      'The `util.isNumber` API is deprecated. Please use `typeof arg === \"number\"` instead.',\r\n                      'DEP0052'),\r\n  isString: deprecate(isString,\r\n                      'The `util.isString` API is deprecated.  Please use `typeof arg === \"string\"` instead.',\r\n                      'DEP0056'),\r\n  isSymbol: deprecate(isSymbol,\r\n                      'The `util.isSymbol` API is deprecated.  Please use `arg === \"symbol\"` instead.',\r\n                      'DEP0057'),\r\n  isUndefined: deprecate(isUndefined,\r\n                         'The `util.isUndefined` API is deprecated. Please use `arg === undefined` instead.',\r\n                         'DEP0058'),\r\n  isRegExp: deprecate(types.isRegExp,\r\n                      'The `util.isRegExp` API is deprecated. Please use `arg instanceof RegExp` instead.',\r\n                      'DEP0055'),\r\n  isObject: deprecate(isObject,\r\n                      'The `util.isObject` API is deprecated. ' +\r\n                      'Please use `arg !== null && typeof arg === \"object\"` instead.',\r\n                      'DEP0053'),\r\n  isDate: deprecate(types.isDate,\r\n                    'The `util.isDate` API is deprecated.  Please use `arg instanceof Date` instead.',\r\n                    'DEP0047'),\r\n  isError: deprecate(isError,\r\n                     'The `util.isError` API is deprecated. ' +\r\n                     'Please use `ObjectPrototypeToString(e) === \"[object Error]\" ' +\r\n                     '|| e instanceof Error` instead.',\r\n                     'DEP0048'),\r\n  isFunction: deprecate(isFunction,\r\n                        'The `util.isFunction` API is deprecated.  Please use `typeof arg === \"function\"` instead.',\r\n                        'DEP0049'),\r\n  isPrimitive: deprecate(isPrimitive,\r\n                         'The `util.isPrimitive` API is deprecated. ' +\r\n                         'Please use `arg === null || ' +\r\n                         '(typeof arg !== \"object\" && typeof arg !== \"function\")` instead.',\r\n                         'DEP0054'),\r\n  log: deprecate(log,\r\n                 'The `util.log API is deprecated. ' +\r\n                 'Please use console.log() with a custom formatter or a third-party logger instead.',\r\n                 'DEP0059'),\r\n  promisify,\r\n  stripVTControlCharacters,\r\n  toUSVString(input) {\r\n    return StringPrototypeToWellFormed(`${input}`);\r\n  },\r\n  get transferableAbortSignal() {\r\n    return lazyAbortController().transferableAbortSignal;\r\n  },\r\n  get transferableAbortController() {\r\n    return lazyAbortController().transferableAbortController;\r\n  },\r\n  get aborted() {\r\n    return lazyAbortController().aborted;\r\n  },\r\n  types,\r\n  parseEnv,\r\n};\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/util/parse_args/parse_args',\r\n  ['parseArgs'],\r\n);\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/encoding',\r\n  ['TextDecoder', 'TextEncoder'],\r\n);\r\n\r\ndefineLazyProperties(\r\n  module.exports,\r\n  'internal/mime',\r\n  ['MIMEType', 'MIMEParams'],\r\n);\r\n"
  },
  "48": {
    "metadata": {
      "scriptId": "48",
      "url": "node:internal/process/permission",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 35,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "da3fefd2aa7b347c4527fd2c755fb66c798b67a4feae188f7cfed3ee40a01bf4",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 954,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/permission"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectFreeze,\r\n  StringPrototypeStartsWith,\r\n} = primordials;\r\n\r\nconst permission = internalBinding('permission');\r\nconst { validateString } = require('internal/validators');\r\nconst { resolve } = require('path');\r\n\r\nlet experimentalPermission;\r\n\r\nmodule.exports = ObjectFreeze({\r\n  __proto__: null,\r\n  isEnabled() {\r\n    if (experimentalPermission === undefined) {\r\n      const { getOptionValue } = require('internal/options');\r\n      experimentalPermission = getOptionValue('--experimental-permission');\r\n    }\r\n    return experimentalPermission;\r\n  },\r\n  has(scope, reference) {\r\n    validateString(scope, 'scope');\r\n    if (reference != null) {\r\n      // TODO: add support for WHATWG URLs and Uint8Arrays.\r\n      validateString(reference, 'reference');\r\n      if (StringPrototypeStartsWith(scope, 'fs')) {\r\n        reference = resolve(reference);\r\n      }\r\n    }\r\n\r\n    return permission.has(scope, reference);\r\n  },\r\n});\r\n"
  },
  "49": {
    "metadata": {
      "scriptId": "49",
      "url": "node:internal/bootstrap/web/exposed-wildcard",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 114,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "f636496d97c0cd12ce4da846a18df235b855cc42f6ee3d4205bd86b59f7aeb6a",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3553,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/web/exposed-wildcard"
    },
    "source": "'use strict';\r\n\r\n/**\r\n * This file exposes web interfaces that is defined with the WebIDL\r\n * [Exposed=*] extended attribute.\r\n * See more details at https://webidl.spec.whatwg.org/#Exposed.\r\n */\r\n\r\nconst {\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  exposeInterface,\r\n  lazyDOMExceptionClass,\r\n  exposeLazyInterfaces,\r\n  exposeGetterAndSetter,\r\n  exposeNamespace,\r\n} = require('internal/util');\r\nconst config = internalBinding('config');\r\n\r\n// https://console.spec.whatwg.org/#console-namespace\r\nexposeNamespace(globalThis, 'console',\r\n                createGlobalConsole());\r\n\r\nconst { URL, URLSearchParams } = require('internal/url');\r\n// https://url.spec.whatwg.org/#url\r\nexposeInterface(globalThis, 'URL', URL);\r\n// https://url.spec.whatwg.org/#urlsearchparams\r\nexposeInterface(globalThis, 'URLSearchParams', URLSearchParams);\r\nexposeGetterAndSetter(globalThis,\r\n                      'DOMException',\r\n                      () => {\r\n                        const DOMException = lazyDOMExceptionClass();\r\n                        exposeInterface(globalThis, 'DOMException', DOMException);\r\n                        return DOMException;\r\n                      },\r\n                      (value) => {\r\n                        exposeInterface(globalThis, 'DOMException', value);\r\n                      });\r\n\r\n// https://dom.spec.whatwg.org/#interface-abortcontroller\r\n// Lazy ones.\r\nexposeLazyInterfaces(globalThis, 'internal/abort_controller', [\r\n  'AbortController', 'AbortSignal',\r\n]);\r\n// https://dom.spec.whatwg.org/#interface-eventtarget\r\nconst {\r\n  EventTarget, Event,\r\n} = require('internal/event_target');\r\nexposeInterface(globalThis, 'Event', Event);\r\nexposeInterface(globalThis, 'EventTarget', EventTarget);\r\n\r\n// https://encoding.spec.whatwg.org/#textencoder\r\n// https://encoding.spec.whatwg.org/#textdecoder\r\nexposeLazyInterfaces(globalThis,\r\n                     'internal/encoding',\r\n                     ['TextEncoder', 'TextDecoder']);\r\n\r\nfunction createGlobalConsole() {\r\n  const consoleFromNode =\r\n    require('internal/console/global');\r\n  if (config.hasInspector) {\r\n    const inspector = require('internal/util/inspector');\r\n    // TODO(joyeecheung): postpone this until the first time inspector\r\n    // is activated.\r\n    inspector.wrapConsole(consoleFromNode);\r\n    const { setConsoleExtensionInstaller } = internalBinding('inspector');\r\n    // Setup inspector command line API.\r\n    setConsoleExtensionInstaller(inspector.installConsoleExtensions);\r\n  }\r\n  return consoleFromNode;\r\n}\r\n\r\n// Web Streams API\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/transformstream',\r\n  ['TransformStream', 'TransformStreamDefaultController']);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/writablestream',\r\n  ['WritableStream', 'WritableStreamDefaultController', 'WritableStreamDefaultWriter']);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/readablestream',\r\n  [\r\n    'ReadableStream', 'ReadableStreamDefaultReader',\r\n    'ReadableStreamBYOBReader', 'ReadableStreamBYOBRequest',\r\n    'ReadableByteStreamController', 'ReadableStreamDefaultController',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/queuingstrategies',\r\n  [\r\n    'ByteLengthQueuingStrategy', 'CountQueuingStrategy',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/encoding',\r\n  [\r\n    'TextEncoderStream', 'TextDecoderStream',\r\n  ]);\r\n\r\nexposeLazyInterfaces(\r\n  globalThis,\r\n  'internal/webstreams/compression',\r\n  [\r\n    'CompressionStream', 'DecompressionStream',\r\n  ]);\r\n"
  },
  "51": {
    "metadata": {
      "scriptId": "51",
      "url": "node:internal/console/constructor",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 678,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3bde16512260f5f51bcf28f5eb7310c95336750380a8ac4f6cb3865541e86260",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 21421,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/console/constructor"
    },
    "source": "'use strict';\r\n\r\n// The Console constructor is not actually used to construct the global\r\n// console. It's exported for backwards compatibility.\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayIsArray,\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeSome,\r\n  ArrayPrototypeUnshift,\r\n  Boolean,\r\n  ErrorCaptureStackTrace,\r\n  FunctionPrototypeBind,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectValues,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectOwnKeys,\r\n  RegExpPrototypeSymbolReplace,\r\n  SafeArrayIterator,\r\n  SafeMap,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n  StringPrototypeIncludes,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  Symbol,\r\n  SymbolHasInstance,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst { trace } = internalBinding('trace_events');\r\nconst {\r\n  codes: {\r\n    ERR_CONSOLE_WRITABLE_STREAM,\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n  isStackOverflowError,\r\n} = require('internal/errors');\r\nconst {\r\n  validateArray,\r\n  validateInteger,\r\n  validateObject,\r\n} = require('internal/validators');\r\nconst { previewEntries } = internalBinding('util');\r\nconst { Buffer: { isBuffer } } = require('buffer');\r\nconst {\r\n  inspect,\r\n  formatWithOptions,\r\n} = require('internal/util/inspect');\r\nconst {\r\n  isTypedArray, isSet, isMap, isSetIterator, isMapIterator,\r\n} = require('internal/util/types');\r\nconst {\r\n  CHAR_UPPERCASE_C: kTraceCount,\r\n} = require('internal/constants');\r\nconst { styleText } = require('util');\r\nconst kCounts = Symbol('counts');\r\nconst { time, timeLog, timeEnd, kNone } = require('internal/util/debuglog');\r\n\r\nconst kTraceConsoleCategory = 'node,node.console';\r\n\r\nconst kMaxGroupIndentation = 1000;\r\n\r\n// Lazy loaded for startup performance.\r\nlet cliTable;\r\n\r\nlet utilColors;\r\nfunction lazyUtilColors() {\r\n  utilColors ??= require('internal/util/colors');\r\n  return utilColors;\r\n}\r\n\r\n// Track amount of indentation required via `console.group()`.\r\nconst kGroupIndent = Symbol('kGroupIndent');\r\nconst kGroupIndentationWidth = Symbol('kGroupIndentWidth');\r\nconst kFormatForStderr = Symbol('kFormatForStderr');\r\nconst kFormatForStdout = Symbol('kFormatForStdout');\r\nconst kGetInspectOptions = Symbol('kGetInspectOptions');\r\nconst kColorMode = Symbol('kColorMode');\r\nconst kIsConsole = Symbol('kIsConsole');\r\nconst kWriteToConsole = Symbol('kWriteToConsole');\r\nconst kBindProperties = Symbol('kBindProperties');\r\nconst kBindStreamsEager = Symbol('kBindStreamsEager');\r\nconst kBindStreamsLazy = Symbol('kBindStreamsLazy');\r\nconst kUseStdout = Symbol('kUseStdout');\r\nconst kUseStderr = Symbol('kUseStderr');\r\nconst kInternalTimeLogImpl = Symbol('kInternalTimeLogImpl');\r\n\r\nconst optionsMap = new SafeWeakMap();\r\nfunction Console(options /* or: stdout, stderr, ignoreErrors = true */) {\r\n  // We have to test new.target here to see if this function is called\r\n  // with new, because we need to define a custom instanceof to accommodate\r\n  // the global console.\r\n  if (new.target === undefined) {\r\n    return ReflectConstruct(Console, arguments);\r\n  }\r\n\r\n  if (!options || typeof options.write === 'function') {\r\n    options = {\r\n      stdout: options,\r\n      stderr: arguments[1],\r\n      ignoreErrors: arguments[2],\r\n    };\r\n  }\r\n\r\n  const {\r\n    stdout,\r\n    stderr = stdout,\r\n    ignoreErrors = true,\r\n    colorMode = 'auto',\r\n    inspectOptions,\r\n    groupIndentation,\r\n  } = options;\r\n\r\n  if (!stdout || typeof stdout.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stdout');\r\n  }\r\n  if (!stderr || typeof stderr.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stderr');\r\n  }\r\n\r\n  if (typeof colorMode !== 'boolean' && colorMode !== 'auto')\r\n    throw new ERR_INVALID_ARG_VALUE('colorMode', colorMode);\r\n\r\n  if (groupIndentation !== undefined) {\r\n    validateInteger(groupIndentation, 'groupIndentation',\r\n                    0, kMaxGroupIndentation);\r\n  }\r\n\r\n  if (inspectOptions !== undefined) {\r\n    validateObject(inspectOptions, 'options.inspectOptions');\r\n\r\n    if (inspectOptions.colors !== undefined &&\r\n        options.colorMode !== undefined) {\r\n      throw new ERR_INCOMPATIBLE_OPTION_PAIR(\r\n        'options.inspectOptions.color', 'colorMode');\r\n    }\r\n    optionsMap.set(this, inspectOptions);\r\n  }\r\n\r\n  // Bind the prototype functions to this Console instance\r\n  ArrayPrototypeForEach(ObjectKeys(Console.prototype), (key) => {\r\n    // We have to bind the methods grabbed from the instance instead of from\r\n    // the prototype so that users extending the Console can override them\r\n    // from the prototype chain of the subclass.\r\n    this[key] = FunctionPrototypeBind(this[key], this);\r\n    ObjectDefineProperty(this[key], 'name', {\r\n      __proto__: null,\r\n      value: key,\r\n    });\r\n  });\r\n\r\n  this[kBindStreamsEager](stdout, stderr);\r\n  this[kBindProperties](ignoreErrors, colorMode, groupIndentation);\r\n}\r\n\r\nconst consolePropAttributes = {\r\n  writable: true,\r\n  enumerable: false,\r\n  configurable: true,\r\n};\r\n\r\n// Fixup global.console instanceof global.console.Console\r\nObjectDefineProperty(Console, SymbolHasInstance, {\r\n  __proto__: null,\r\n  value(instance) {\r\n    return instance[kIsConsole];\r\n  },\r\n});\r\n\r\nconst kColorInspectOptions = { colors: true };\r\nconst kNoColorInspectOptions = {};\r\n\r\nObjectDefineProperties(Console.prototype, {\r\n  [kBindStreamsEager]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    // Eager version for the Console constructor\r\n    value: function(stdout, stderr) {\r\n      ObjectDefineProperties(this, {\r\n        '_stdout': { __proto__: null, ...consolePropAttributes, value: stdout },\r\n        '_stderr': { __proto__: null, ...consolePropAttributes, value: stderr },\r\n      });\r\n    },\r\n  },\r\n  [kBindStreamsLazy]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    // Lazily load the stdout and stderr from an object so we don't\r\n    // create the stdio streams when they are not even accessed\r\n    value: function(object) {\r\n      let stdout;\r\n      let stderr;\r\n      ObjectDefineProperties(this, {\r\n        '_stdout': {\r\n          __proto__: null,\r\n          enumerable: false,\r\n          configurable: true,\r\n          get() {\r\n            if (!stdout) stdout = object.stdout;\r\n            return stdout;\r\n          },\r\n          set(value) { stdout = value; },\r\n        },\r\n        '_stderr': {\r\n          __proto__: null,\r\n          enumerable: false,\r\n          configurable: true,\r\n          get() {\r\n            if (!stderr) { stderr = object.stderr; }\r\n            return stderr;\r\n          },\r\n          set(value) { stderr = value; },\r\n        },\r\n      });\r\n    },\r\n  },\r\n  [kBindProperties]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(ignoreErrors, colorMode, groupIndentation = 2) {\r\n      ObjectDefineProperties(this, {\r\n        '_stdoutErrorHandler': {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: createWriteErrorHandler(this, kUseStdout),\r\n        },\r\n        '_stderrErrorHandler': {\r\n          ...consolePropAttributes,\r\n          __proto__: null,\r\n          value: createWriteErrorHandler(this, kUseStderr),\r\n        },\r\n        '_ignoreErrors': {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: Boolean(ignoreErrors),\r\n        },\r\n        '_times': { __proto__: null, ...consolePropAttributes, value: new SafeMap() },\r\n        // Corresponds to https://console.spec.whatwg.org/#count-map\r\n        [kCounts]: { __proto__: null, ...consolePropAttributes, value: new SafeMap() },\r\n        [kColorMode]: { __proto__: null, ...consolePropAttributes, value: colorMode },\r\n        [kIsConsole]: { __proto__: null, ...consolePropAttributes, value: true },\r\n        [kGroupIndent]: { __proto__: null, ...consolePropAttributes, value: '' },\r\n        [kGroupIndentationWidth]: {\r\n          __proto__: null,\r\n          ...consolePropAttributes,\r\n          value: groupIndentation,\r\n        },\r\n        [SymbolToStringTag]: {\r\n          __proto__: null,\r\n          writable: false,\r\n          enumerable: false,\r\n          configurable: true,\r\n          value: 'console',\r\n        },\r\n      });\r\n    },\r\n  },\r\n  [kWriteToConsole]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(streamSymbol, string, color = '') {\r\n      const ignoreErrors = this._ignoreErrors;\r\n      const groupIndent = this[kGroupIndent];\r\n\r\n      const useStdout = streamSymbol === kUseStdout;\r\n      const stream = useStdout ? this._stdout : this._stderr;\r\n      const errorHandler = useStdout ?\r\n        this._stdoutErrorHandler : this._stderrErrorHandler;\r\n\r\n      if (groupIndent.length !== 0) {\r\n        if (StringPrototypeIncludes(string, '\\n')) {\r\n          string = RegExpPrototypeSymbolReplace(/\\n/g, string, `\\n${groupIndent}`);\r\n        }\r\n        string = groupIndent + string;\r\n      }\r\n\r\n      if (color) {\r\n        string = styleText(color, string);\r\n      }\r\n\r\n      string += '\\n';\r\n\r\n      if (ignoreErrors === false) return stream.write(string);\r\n\r\n      // There may be an error occurring synchronously (e.g. for files or TTYs\r\n      // on POSIX systems) or asynchronously (e.g. pipes on POSIX systems), so\r\n      // handle both situations.\r\n      try {\r\n        // Add and later remove a noop error handler to catch synchronous\r\n        // errors.\r\n        if (stream.listenerCount('error') === 0)\r\n          stream.once('error', noop);\r\n\r\n        stream.write(string, errorHandler);\r\n      } catch (e) {\r\n        // Console is a debugging utility, so it swallowing errors is not\r\n        // desirable even in edge cases such as low stack space.\r\n        if (isStackOverflowError(e))\r\n          throw e;\r\n        // Sorry, there's no proper way to pass along the error here.\r\n      } finally {\r\n        stream.removeListener('error', noop);\r\n      }\r\n    },\r\n  },\r\n  [kGetInspectOptions]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(stream) {\r\n      let color = this[kColorMode];\r\n      if (color === 'auto') {\r\n        color = lazyUtilColors().shouldColorize(stream);\r\n      }\r\n\r\n      const options = optionsMap.get(this);\r\n      if (options) {\r\n        if (options.colors === undefined) {\r\n          options.colors = color;\r\n        }\r\n        return options;\r\n      }\r\n\r\n      return color ? kColorInspectOptions : kNoColorInspectOptions;\r\n    },\r\n  },\r\n  [kFormatForStdout]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(args) {\r\n      const opts = this[kGetInspectOptions](this._stdout);\r\n      ArrayPrototypeUnshift(args, opts);\r\n      return ReflectApply(formatWithOptions, null, args);\r\n    },\r\n  },\r\n  [kFormatForStderr]: {\r\n    __proto__: null,\r\n    ...consolePropAttributes,\r\n    value: function(args) {\r\n      const opts = this[kGetInspectOptions](this._stderr);\r\n      ArrayPrototypeUnshift(args, opts);\r\n      return ReflectApply(formatWithOptions, null, args);\r\n    },\r\n  },\r\n});\r\n\r\n// Make a function that can serve as the callback passed to `stream.write()`.\r\nfunction createWriteErrorHandler(instance, streamSymbol) {\r\n  return (err) => {\r\n    // This conditional evaluates to true if and only if there was an error\r\n    // that was not already emitted (which happens when the _write callback\r\n    // is invoked asynchronously).\r\n    const stream = streamSymbol === kUseStdout ?\r\n      instance._stdout : instance._stderr;\r\n    if (err !== null && !stream._writableState.errorEmitted) {\r\n      // If there was an error, it will be emitted on `stream` as\r\n      // an `error` event. Adding a `once` listener will keep that error\r\n      // from becoming an uncaught exception, but since the handler is\r\n      // removed after the event, non-console.* writes won't be affected.\r\n      // we are only adding noop if there is no one else listening for 'error'\r\n      if (stream.listenerCount('error') === 0) {\r\n        stream.once('error', noop);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction timeLogImpl(label, formatted, args) {\r\n  if (args === undefined) {\r\n    this.log('%s: %s', label, formatted);\r\n  } else {\r\n    this.log('%s: %s', label, formatted, ...new SafeArrayIterator(args));\r\n  }\r\n}\r\n\r\nconst consoleMethods = {\r\n  log(...args) {\r\n    this[kWriteToConsole](kUseStdout, this[kFormatForStdout](args));\r\n  },\r\n  warn(...args) {\r\n    const color = (shouldColorize(args) && 'yellow') || '';\r\n    this[kWriteToConsole](kUseStderr, this[kFormatForStderr](args), color);\r\n  },\r\n\r\n  error(...args) {\r\n    const color = (shouldColorize(args) && 'red') || '';\r\n    this[kWriteToConsole](kUseStderr, this[kFormatForStderr](args), color);\r\n  },\r\n\r\n  dir(object, options) {\r\n    this[kWriteToConsole](kUseStdout, inspect(object, {\r\n      customInspect: false,\r\n      ...this[kGetInspectOptions](this._stdout),\r\n      ...options,\r\n    }));\r\n  },\r\n\r\n  time(label = 'default') {\r\n    time(this._times, kTraceConsoleCategory, 'console.time()', kNone, label, `time::${label}`);\r\n  },\r\n\r\n  timeEnd(label = 'default') {\r\n    if (this[kInternalTimeLogImpl] === undefined)\r\n      this[kInternalTimeLogImpl] = FunctionPrototypeBind(timeLogImpl, this);\r\n\r\n    timeEnd(this._times, kTraceConsoleCategory, 'console.timeEnd()', kNone, this[kInternalTimeLogImpl], label, `time::${label}`);\r\n  },\r\n\r\n  timeLog(label = 'default', ...data) {\r\n    if (this[kInternalTimeLogImpl] === undefined)\r\n      this[kInternalTimeLogImpl] = FunctionPrototypeBind(timeLogImpl, this);\r\n\r\n    timeLog(this._times, kTraceConsoleCategory, 'console.timeLog()', kNone, this[kInternalTimeLogImpl], label, `time::${label}`, data);\r\n  },\r\n\r\n  trace: function trace(...args) {\r\n    const err = {\r\n      name: 'Trace',\r\n      message: this[kFormatForStderr](args),\r\n    };\r\n    ErrorCaptureStackTrace(err, trace);\r\n    this.error(err.stack);\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#assert\r\n  assert(expression, ...args) {\r\n    if (!expression) {\r\n      if (args.length && typeof args[0] === 'string') {\r\n        args[0] = `Assertion failed: ${args[0]}`;\r\n      } else {\r\n        ArrayPrototypeUnshift(args, 'Assertion failed');\r\n      }\r\n      // The arguments will be formatted in warn() again\r\n      ReflectApply(this.warn, this, args);\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#clear\r\n  clear() {\r\n    // It only makes sense to clear if _stdout is a TTY.\r\n    // Otherwise, do nothing.\r\n    if (this._stdout.isTTY && process.env.TERM !== 'dumb') {\r\n      // The require is here intentionally to avoid readline being\r\n      // required too early when console is first loaded.\r\n      const {\r\n        cursorTo,\r\n        clearScreenDown,\r\n      } = require('internal/readline/callbacks');\r\n      cursorTo(this._stdout, 0, 0);\r\n      clearScreenDown(this._stdout);\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#count\r\n  count(label = 'default') {\r\n    // Ensures that label is a string, and only things that can be\r\n    // coerced to strings. e.g. Symbol is not allowed\r\n    label = `${label}`;\r\n    const counts = this[kCounts];\r\n    let count = counts.get(label);\r\n    if (count === undefined)\r\n      count = 1;\r\n    else\r\n      count++;\r\n    counts.set(label, count);\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, count);\r\n    this.log(`${label}: ${count}`);\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#countreset\r\n  countReset(label = 'default') {\r\n    const counts = this[kCounts];\r\n    if (!counts.has(label)) {\r\n      process.emitWarning(`Count for '${label}' does not exist`);\r\n      return;\r\n    }\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, 0);\r\n    counts.delete(`${label}`);\r\n  },\r\n\r\n  group(...data) {\r\n    if (data.length > 0) {\r\n      ReflectApply(this.log, this, data);\r\n    }\r\n    this[kGroupIndent] +=\r\n      StringPrototypeRepeat(' ', this[kGroupIndentationWidth]);\r\n  },\r\n\r\n  groupEnd() {\r\n    this[kGroupIndent] = StringPrototypeSlice(\r\n      this[kGroupIndent],\r\n      0,\r\n      this[kGroupIndent].length - this[kGroupIndentationWidth],\r\n    );\r\n  },\r\n\r\n  // https://console.spec.whatwg.org/#table\r\n  table(tabularData, properties) {\r\n    if (properties !== undefined)\r\n      validateArray(properties, 'properties');\r\n\r\n    if (tabularData === null || typeof tabularData !== 'object')\r\n      return this.log(tabularData);\r\n\r\n    cliTable ??= require('internal/cli_table');\r\n    const final = (k, v) => this.log(cliTable(k, v));\r\n\r\n    const _inspect = (v) => {\r\n      const depth = v !== null &&\r\n                    typeof v === 'object' &&\r\n                    !isArray(v) &&\r\n                    ObjectKeys(v).length > 2 ? -1 : 0;\r\n      const opt = {\r\n        depth,\r\n        maxArrayLength: 3,\r\n        breakLength: Infinity,\r\n        ...this[kGetInspectOptions](this._stdout),\r\n      };\r\n      return inspect(v, opt);\r\n    };\r\n    const getIndexArray = (length) => ArrayFrom(\r\n      { length }, (_, i) => _inspect(i));\r\n\r\n    const mapIter = isMapIterator(tabularData);\r\n    let isKeyValue = false;\r\n    let i = 0;\r\n    if (mapIter) {\r\n      const res = previewEntries(tabularData, true);\r\n      tabularData = res[0];\r\n      isKeyValue = res[1];\r\n    }\r\n\r\n    if (isKeyValue || isMap(tabularData)) {\r\n      const keys = [];\r\n      const values = [];\r\n      let length = 0;\r\n      if (mapIter) {\r\n        for (; i < tabularData.length / 2; ++i) {\r\n          ArrayPrototypePush(keys, _inspect(tabularData[i * 2]));\r\n          ArrayPrototypePush(values, _inspect(tabularData[i * 2 + 1]));\r\n          length++;\r\n        }\r\n      } else {\r\n        for (const { 0: k, 1: v } of tabularData) {\r\n          ArrayPrototypePush(keys, _inspect(k));\r\n          ArrayPrototypePush(values, _inspect(v));\r\n          length++;\r\n        }\r\n      }\r\n      return final([\r\n        iterKey, keyKey, valuesKey,\r\n      ], [\r\n        getIndexArray(length),\r\n        keys,\r\n        values,\r\n      ]);\r\n    }\r\n\r\n    const setIter = isSetIterator(tabularData);\r\n    if (setIter)\r\n      tabularData = previewEntries(tabularData);\r\n\r\n    const setlike = setIter || mapIter || isSet(tabularData);\r\n    if (setlike) {\r\n      const values = [];\r\n      let length = 0;\r\n      for (const v of tabularData) {\r\n        ArrayPrototypePush(values, _inspect(v));\r\n        length++;\r\n      }\r\n      return final([iterKey, valuesKey], [getIndexArray(length), values]);\r\n    }\r\n\r\n    const map = { __proto__: null };\r\n    let hasPrimitives = false;\r\n    const valuesKeyArray = [];\r\n    const indexKeyArray = ObjectKeys(tabularData);\r\n\r\n    for (; i < indexKeyArray.length; i++) {\r\n      const item = tabularData[indexKeyArray[i]];\r\n      const primitive = item === null ||\r\n          (typeof item !== 'function' && typeof item !== 'object');\r\n      if (properties === undefined && primitive) {\r\n        hasPrimitives = true;\r\n        valuesKeyArray[i] = _inspect(item);\r\n      } else {\r\n        const keys = properties || ObjectKeys(item);\r\n        for (const key of keys) {\r\n          map[key] ??= [];\r\n          if ((primitive && properties) ||\r\n               !ObjectPrototypeHasOwnProperty(item, key))\r\n            map[key][i] = '';\r\n          else\r\n            map[key][i] = _inspect(item[key]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const keys = ObjectKeys(map);\r\n    const values = ObjectValues(map);\r\n    if (hasPrimitives) {\r\n      ArrayPrototypePush(keys, valuesKey);\r\n      ArrayPrototypePush(values, valuesKeyArray);\r\n    }\r\n    ArrayPrototypeUnshift(keys, indexKey);\r\n    ArrayPrototypeUnshift(values, indexKeyArray);\r\n\r\n    return final(keys, values);\r\n  },\r\n};\r\n\r\nconst keyKey = 'Key';\r\nconst valuesKey = 'Values';\r\nconst indexKey = '(index)';\r\nconst iterKey = '(iteration index)';\r\n\r\nconst isArray = (v) => ArrayIsArray(v) || isTypedArray(v) || isBuffer(v);\r\n\r\n// TODO: remove string type check once the styleText supports objects\r\n// Return true if all args are type string\r\nconst shouldColorize = (args) => {\r\n  return lazyUtilColors().hasColors && !ArrayPrototypeSome(args, (arg) => typeof arg !== 'string');\r\n};\r\n\r\nfunction noop() {}\r\n\r\nfor (const method of ReflectOwnKeys(consoleMethods))\r\n  Console.prototype[method] = consoleMethods[method];\r\n\r\nConsole.prototype.debug = Console.prototype.log;\r\nConsole.prototype.info = Console.prototype.log;\r\nConsole.prototype.dirxml = Console.prototype.log;\r\nConsole.prototype.groupCollapsed = Console.prototype.group;\r\n\r\nfunction initializeGlobalConsole(globalConsole) {\r\n  globalConsole[kBindStreamsLazy](process);\r\n  const {\r\n    namespace: {\r\n      addSerializeCallback,\r\n      isBuildingSnapshot,\r\n    },\r\n  } = require('internal/v8/startup_snapshot');\r\n\r\n  if (!internalBinding('config').hasInspector || !isBuildingSnapshot()) {\r\n    return;\r\n  }\r\n  const { console: consoleFromVM } = internalBinding('inspector');\r\n  const nodeConsoleKeys = ObjectKeys(Console.prototype);\r\n  const vmConsoleKeys = ObjectKeys(consoleFromVM);\r\n  const originalKeys = new SafeSet(vmConsoleKeys.concat(nodeConsoleKeys));\r\n  const inspectorConsoleKeys = new SafeSet();\r\n  for (const key of ObjectKeys(globalConsole)) {\r\n    if (!originalKeys.has(key)) {\r\n      inspectorConsoleKeys.add(key);\r\n    }\r\n  }\r\n  // During deserialization these should be reinstalled to console by\r\n  // V8 when the inspector client is created.\r\n  addSerializeCallback(() => {\r\n    for (const key of inspectorConsoleKeys) {\r\n      globalConsole[key] = undefined;\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  Console,\r\n  kBindStreamsLazy,\r\n  kBindProperties,\r\n  initializeGlobalConsole,\r\n};\r\n"
  },
  "52": {
    "metadata": {
      "scriptId": "52",
      "url": "node:internal/util/inspector",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 115,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "20d6a316df4ed702004eb8bd3c2cc761b2fdb702ee44efcf907c38c668e3939c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4044,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/util/inspector"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSome,\r\n  FunctionPrototypeBind,\r\n  ObjectDefineProperty,\r\n  ObjectKeys,\r\n  ObjectPrototypeHasOwnProperty,\r\n  RegExpPrototypeExec,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst { validatePort } = require('internal/validators');\r\nconst permission = require('internal/process/permission');\r\n\r\nconst kMinPort = 1024;\r\nconst kMaxPort = 65535;\r\nconst kInspectArgRegex = /--inspect(?:-brk|-port)?|--debug-port/;\r\nconst kInspectMsgRegex = /Debugger listening on ws:\\/\\/\\[?(.+?)\\]?:(\\d+)\\/|For help, see: https:\\/\\/nodejs\\.org\\/en\\/docs\\/inspector|Debugger attached|Waiting for the debugger to disconnect\\.\\.\\./;\r\n\r\nconst _isUsingInspector = new SafeWeakMap();\r\nfunction isUsingInspector(execArgv = process.execArgv) {\r\n  if (!_isUsingInspector.has(execArgv)) {\r\n    _isUsingInspector.set(execArgv,\r\n                          ArrayPrototypeSome(execArgv, (arg) => RegExpPrototypeExec(kInspectArgRegex, arg) !== null) ||\r\n      RegExpPrototypeExec(kInspectArgRegex, process.env.NODE_OPTIONS) !== null);\r\n  }\r\n  return _isUsingInspector.get(execArgv);\r\n}\r\n\r\nlet debugPortOffset = 1;\r\nfunction getInspectPort(inspectPort) {\r\n  if (typeof inspectPort === 'function') {\r\n    inspectPort = inspectPort();\r\n  } else if (inspectPort == null) {\r\n    inspectPort = process.debugPort + debugPortOffset;\r\n    if (inspectPort > kMaxPort)\r\n      inspectPort = inspectPort - kMaxPort + kMinPort - 1;\r\n    debugPortOffset++;\r\n  }\r\n  validatePort(inspectPort);\r\n\r\n  return inspectPort;\r\n}\r\n\r\nlet session;\r\nfunction sendInspectorCommand(cb, onError) {\r\n  const { hasInspector } = internalBinding('config');\r\n  if (!hasInspector) return onError();\r\n  // Do not preview when the permission model is enabled\r\n  // because this feature require access to the inspector,\r\n  // which is unavailable in this case.\r\n  if (permission.isEnabled()) return onError();\r\n  const inspector = require('inspector');\r\n  if (session === undefined) session = new inspector.Session();\r\n  session.connect();\r\n  try {\r\n    return cb(session);\r\n  } finally {\r\n    session.disconnect();\r\n  }\r\n}\r\n\r\nfunction isInspectorMessage(string) {\r\n  return isUsingInspector() && RegExpPrototypeExec(kInspectMsgRegex, string) !== null;\r\n}\r\n\r\n// Create a special require function for the inspector command line API\r\nfunction installConsoleExtensions(commandLineApi) {\r\n  if (commandLineApi.require) { return; }\r\n  const { tryGetCwd } = require('internal/process/execution');\r\n  const CJSModule = require('internal/modules/cjs/loader').Module;\r\n  const { makeRequireFunction } = require('internal/modules/helpers');\r\n  const consoleAPIModule = new CJSModule('<inspector console>');\r\n  const cwd = tryGetCwd();\r\n  consoleAPIModule.paths = [];\r\n  ArrayPrototypePushApply(consoleAPIModule.paths, CJSModule._nodeModulePaths(cwd));\r\n  ArrayPrototypePushApply(consoleAPIModule.paths, CJSModule.globalPaths);\r\n  commandLineApi.require = makeRequireFunction(consoleAPIModule);\r\n}\r\n\r\n// Wrap a console implemented by Node.js with features from the VM inspector\r\nfunction wrapConsole(consoleFromNode) {\r\n  const { consoleCall, console: consoleFromVM } = internalBinding('inspector');\r\n  for (const key of ObjectKeys(consoleFromVM)) {\r\n    // If global console has the same method as inspector console,\r\n    // then wrap these two methods into one. Native wrapper will preserve\r\n    // the original stack.\r\n    if (ObjectPrototypeHasOwnProperty(consoleFromNode, key)) {\r\n      consoleFromNode[key] = FunctionPrototypeBind(\r\n        consoleCall,\r\n        consoleFromNode,\r\n        consoleFromVM[key],\r\n        consoleFromNode[key],\r\n      );\r\n      ObjectDefineProperty(consoleFromNode[key], 'name', {\r\n        __proto__: null,\r\n        value: key,\r\n      });\r\n    } else {\r\n      // Add additional console APIs from the inspector\r\n      consoleFromNode[key] = consoleFromVM[key];\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getInspectPort,\r\n  installConsoleExtensions,\r\n  isInspectorMessage,\r\n  isUsingInspector,\r\n  sendInspectorCommand,\r\n  wrapConsole,\r\n};\r\n"
  },
  "53": {
    "metadata": {
      "scriptId": "53",
      "url": "node:internal/event_target",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1169,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "92bc2a06e8776b13e0939940a4c90addf7a8218ac7351990a70e6857ad114489",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 32310,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/event_target"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayFrom,\r\n  ArrayPrototypeReduce,\r\n  Boolean,\r\n  Error,\r\n  FunctionPrototypeCall,\r\n  NumberIsInteger,\r\n  ObjectAssign,\r\n  ObjectDefineProperties,\r\n  ObjectDefineProperty,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ReflectApply,\r\n  SafeFinalizationRegistry,\r\n  SafeMap,\r\n  SafeWeakMap,\r\n  SafeWeakRef,\r\n  SafeWeakSet,\r\n  String,\r\n  Symbol,\r\n  SymbolFor,\r\n  SymbolToStringTag,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_EVENT_RECURSION,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_THIS,\r\n    ERR_MISSING_ARGS,\r\n  },\r\n} = require('internal/errors');\r\nconst {\r\n  validateAbortSignal,\r\n  validateObject,\r\n  validateString,\r\n  validateInternalField,\r\n  kValidateObjectAllowObjects,\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  customInspectSymbol,\r\n  kEmptyObject,\r\n  kEnumerableProperty,\r\n} = require('internal/util');\r\nconst { inspect } = require('util');\r\nconst webidl = require('internal/webidl');\r\n\r\nconst kIsEventTarget = SymbolFor('nodejs.event_target');\r\nconst kIsNodeEventTarget = Symbol('kIsNodeEventTarget');\r\n\r\nconst EventEmitter = require('events');\r\nconst {\r\n  kMaxEventTargetListeners,\r\n  kMaxEventTargetListenersWarned,\r\n} = EventEmitter;\r\n\r\nconst kEvents = Symbol('kEvents');\r\nconst kIsBeingDispatched = Symbol('kIsBeingDispatched');\r\nconst kStop = Symbol('kStop');\r\nconst kTarget = Symbol('kTarget');\r\nconst kHandlers = Symbol('kHandlers');\r\nconst kWeakHandler = Symbol('kWeak');\r\nconst kResistStopPropagation = Symbol('kResistStopPropagation');\r\n\r\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\r\nconst kRemoveWeakListenerHelper = Symbol('nodejs.internal.removeWeakListenerHelper');\r\nconst kCreateEvent = Symbol('kCreateEvent');\r\nconst kNewListener = Symbol('kNewListener');\r\nconst kRemoveListener = Symbol('kRemoveListener');\r\nconst kIsNodeStyleListener = Symbol('kIsNodeStyleListener');\r\nconst kTrustEvent = Symbol('kTrustEvent');\r\n\r\nconst { now } = require('internal/perf/utils');\r\n\r\nconst kType = Symbol('type');\r\nconst kDetail = Symbol('detail');\r\n\r\nconst isTrustedSet = new SafeWeakSet();\r\nconst isTrusted = ObjectGetOwnPropertyDescriptor({\r\n  get isTrusted() {\r\n    return isTrustedSet.has(this);\r\n  },\r\n}, 'isTrusted').get;\r\n\r\nconst isTrustedDescriptor = {\r\n  __proto__: null,\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: isTrusted,\r\n};\r\n\r\nfunction isEvent(value) {\r\n  return typeof value?.[kType] === 'string';\r\n}\r\n\r\nclass Event {\r\n  #cancelable = false;\r\n  #bubbles = false;\r\n  #composed = false;\r\n  #defaultPrevented = false;\r\n  #timestamp = now();\r\n  #propagationStopped = false;\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {{\r\n   *   bubbles?: boolean,\r\n   *   cancelable?: boolean,\r\n   *   composed?: boolean,\r\n   * }} [options]\r\n   */\r\n  constructor(type, options = kEmptyObject) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n    validateObject(options, 'options');\r\n    const { bubbles, cancelable, composed } = options;\r\n    this.#cancelable = !!cancelable;\r\n    this.#bubbles = !!bubbles;\r\n    this.#composed = !!composed;\r\n\r\n    this[kType] = `${type}`;\r\n    if (options?.[kTrustEvent]) {\r\n      isTrustedSet.add(this);\r\n    }\r\n\r\n    this[kTarget] = null;\r\n    this[kIsBeingDispatched] = false;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {boolean} [bubbles]\r\n   * @param {boolean} [cancelable]\r\n   */\r\n  initEvent(type, bubbles = false, cancelable = false) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n\r\n    if (this[kIsBeingDispatched]) {\r\n      return;\r\n    }\r\n    this[kType] = `${type}`;\r\n    this.#bubbles = !!bubbles;\r\n    this.#cancelable = !!cancelable;\r\n  }\r\n\r\n  [customInspectSymbol](depth, options) {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    const name = this.constructor.name;\r\n    if (depth < 0)\r\n      return name;\r\n\r\n    const opts = ObjectAssign({}, options, {\r\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth,\r\n    });\r\n\r\n    return `${name} ${inspect({\r\n      type: this[kType],\r\n      defaultPrevented: this.#defaultPrevented,\r\n      cancelable: this.#cancelable,\r\n      timeStamp: this.#timestamp,\r\n    }, opts)}`;\r\n  }\r\n\r\n  stopImmediatePropagation() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    // Spec mention \"stopImmediatePropagation should set both \"stop propagation\"\r\n    // and \"stop immediate propagation\" flags\"\r\n    // cf: from https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\r\n    this.stopPropagation();\r\n    this[kStop] = true;\r\n  }\r\n\r\n  preventDefault() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    this.#defaultPrevented = true;\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get target() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get currentTarget() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {EventTarget}\r\n   */\r\n  get srcElement() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kType];\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get cancelable() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#cancelable;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get defaultPrevented() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#cancelable && this.#defaultPrevented;\r\n  }\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  get timeStamp() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#timestamp;\r\n  }\r\n\r\n\r\n  // The following are non-op and unused properties/methods from Web API Event.\r\n  // These are not supported in Node.js and are provided purely for\r\n  // API completeness.\r\n  /**\r\n   * @returns {EventTarget[]}\r\n   */\r\n  composedPath() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kIsBeingDispatched] ? [this[kTarget]] : [];\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get returnValue() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return !this.#cancelable || !this.#defaultPrevented;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get bubbles() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#bubbles;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get composed() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#composed;\r\n  }\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  get eventPhase() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this[kIsBeingDispatched] ? Event.AT_TARGET : Event.NONE;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  get cancelBubble() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    return this.#propagationStopped;\r\n  }\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  set cancelBubble(value) {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    if (value) {\r\n      this.#propagationStopped = true;\r\n    }\r\n  }\r\n\r\n  stopPropagation() {\r\n    if (!isEvent(this))\r\n      throw new ERR_INVALID_THIS('Event');\r\n    this.#propagationStopped = true;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(\r\n  Event.prototype, {\r\n    [SymbolToStringTag]: {\r\n      __proto__: null,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true,\r\n      value: 'Event',\r\n    },\r\n    initEvent: kEnumerableProperty,\r\n    stopImmediatePropagation: kEnumerableProperty,\r\n    preventDefault: kEnumerableProperty,\r\n    target: kEnumerableProperty,\r\n    currentTarget: kEnumerableProperty,\r\n    srcElement: kEnumerableProperty,\r\n    type: kEnumerableProperty,\r\n    cancelable: kEnumerableProperty,\r\n    defaultPrevented: kEnumerableProperty,\r\n    timeStamp: kEnumerableProperty,\r\n    composedPath: kEnumerableProperty,\r\n    returnValue: kEnumerableProperty,\r\n    bubbles: kEnumerableProperty,\r\n    composed: kEnumerableProperty,\r\n    eventPhase: kEnumerableProperty,\r\n    cancelBubble: kEnumerableProperty,\r\n    stopPropagation: kEnumerableProperty,\r\n    // Don't conform to the spec with isTrusted. The spec defines it as\r\n    // LegacyUnforgeable but defining it in the constructor has a big\r\n    // performance impact and the property doesn't seem to be useful outside of\r\n    // browsers.\r\n    isTrusted: isTrustedDescriptor,\r\n  });\r\n\r\nconst staticProps = ['NONE', 'CAPTURING_PHASE', 'AT_TARGET', 'BUBBLING_PHASE'];\r\n\r\nObjectDefineProperties(\r\n  Event,\r\n  ArrayPrototypeReduce(staticProps, (result, staticProp, index = 0) => {\r\n    result[staticProp] = {\r\n      __proto__: null,\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: true,\r\n      value: index,\r\n    };\r\n    return result;\r\n  }, {}),\r\n);\r\n\r\nfunction isCustomEvent(value) {\r\n  return isEvent(value) && (value?.[kDetail] !== undefined);\r\n}\r\n\r\nclass CustomEvent extends Event {\r\n  /**\r\n   * @constructor\r\n   * @param {string} type\r\n   * @param {{\r\n   *   bubbles?: boolean,\r\n   *   cancelable?: boolean,\r\n   *   composed?: boolean,\r\n   *   detail?: any,\r\n   * }} [options]\r\n   */\r\n  constructor(type, options = kEmptyObject) {\r\n    if (arguments.length === 0)\r\n      throw new ERR_MISSING_ARGS('type');\r\n    super(type, options);\r\n    this[kDetail] = options?.detail ?? null;\r\n  }\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  get detail() {\r\n    if (!isCustomEvent(this))\r\n      throw new ERR_INVALID_THIS('CustomEvent');\r\n    return this[kDetail];\r\n  }\r\n}\r\n\r\nObjectDefineProperties(CustomEvent.prototype, {\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'CustomEvent',\r\n  },\r\n  detail: kEnumerableProperty,\r\n});\r\n\r\n// Weak listener cleanup\r\n// This has to be lazy for snapshots to work\r\nlet weakListenersState = null;\r\n// The resource needs to retain the callback so that it doesn't\r\n// get garbage collected now that it's weak.\r\nlet objectToWeakListenerMap = null;\r\nfunction weakListeners() {\r\n  weakListenersState ??= new SafeFinalizationRegistry(\r\n    ({ eventTarget, listener, eventType }) => eventTarget.deref()?.[kRemoveWeakListenerHelper](eventType, listener),\r\n  );\r\n  objectToWeakListenerMap ??= new SafeWeakMap();\r\n  return { registry: weakListenersState, map: objectToWeakListenerMap };\r\n}\r\n\r\nconst kFlagOnce = 1 << 0;\r\nconst kFlagCapture = 1 << 1;\r\nconst kFlagPassive = 1 << 2;\r\nconst kFlagNodeStyle = 1 << 3;\r\nconst kFlagWeak = 1 << 4;\r\nconst kFlagRemoved = 1 << 5;\r\nconst kFlagResistStopPropagation = 1 << 6;\r\n\r\n// The listeners for an EventTarget are maintained as a linked list.\r\n// Unfortunately, the way EventTarget is defined, listeners are accounted\r\n// using the tuple [handler,capture], and even if we don't actually make\r\n// use of capture or bubbling, in order to be spec compliant we have to\r\n// take on the additional complexity of supporting it. Fortunately, using\r\n// the linked list makes dispatching faster, even if adding/removing is\r\n// slower.\r\nclass Listener {\r\n  constructor(eventTarget, eventType, previous, listener, once, capture, passive,\r\n              isNodeStyleListener, weak, resistStopPropagation) {\r\n    this.next = undefined;\r\n    if (previous !== undefined)\r\n      previous.next = this;\r\n    this.previous = previous;\r\n    this.listener = listener;\r\n\r\n    let flags = 0b0;\r\n    if (once)\r\n      flags |= kFlagOnce;\r\n    if (capture)\r\n      flags |= kFlagCapture;\r\n    if (passive)\r\n      flags |= kFlagPassive;\r\n    if (isNodeStyleListener)\r\n      flags |= kFlagNodeStyle;\r\n    if (weak)\r\n      flags |= kFlagWeak;\r\n    if (resistStopPropagation)\r\n      flags |= kFlagResistStopPropagation;\r\n    this.flags = flags;\r\n\r\n    this.removed = false;\r\n\r\n    if (this.weak) {\r\n      this.callback = new SafeWeakRef(listener);\r\n      weakListeners().registry.register(listener, {\r\n        __proto__: null,\r\n        // Weak ref so the listener won't hold the eventTarget alive\r\n        eventTarget: new SafeWeakRef(eventTarget),\r\n        listener: this,\r\n        eventType,\r\n      }, this);\r\n      // Make the retainer retain the listener in a WeakMap\r\n      weakListeners().map.set(weak, listener);\r\n      this.listener = this.callback;\r\n    } else if (typeof listener === 'function') {\r\n      this.callback = listener;\r\n      this.listener = listener;\r\n    } else {\r\n      this.callback = async (...args) => {\r\n        if (listener.handleEvent)\r\n          await ReflectApply(listener.handleEvent, listener, args);\r\n      };\r\n      this.listener = listener;\r\n    }\r\n  }\r\n\r\n  get once() {\r\n    return Boolean(this.flags & kFlagOnce);\r\n  }\r\n  get capture() {\r\n    return Boolean(this.flags & kFlagCapture);\r\n  }\r\n  get passive() {\r\n    return Boolean(this.flags & kFlagPassive);\r\n  }\r\n  get isNodeStyleListener() {\r\n    return Boolean(this.flags & kFlagNodeStyle);\r\n  }\r\n  get weak() {\r\n    return Boolean(this.flags & kFlagWeak);\r\n  }\r\n  get resistStopPropagation() {\r\n    return Boolean(this.flags & kFlagResistStopPropagation);\r\n  }\r\n  get removed() {\r\n    return Boolean(this.flags & kFlagRemoved);\r\n  }\r\n  set removed(value) {\r\n    if (value)\r\n      this.flags |= kFlagRemoved;\r\n    else\r\n      this.flags &= ~kFlagRemoved;\r\n  }\r\n\r\n  same(listener, capture) {\r\n    const myListener = this.weak ? this.listener.deref() : this.listener;\r\n    return myListener === listener && this.capture === capture;\r\n  }\r\n\r\n  remove() {\r\n    if (this.previous !== undefined)\r\n      this.previous.next = this.next;\r\n    if (this.next !== undefined)\r\n      this.next.previous = this.previous;\r\n    this.removed = true;\r\n    if (this.weak)\r\n      weakListeners().registry.unregister(this);\r\n  }\r\n}\r\n\r\nfunction initEventTarget(self) {\r\n  self[kEvents] = new SafeMap();\r\n  self[kMaxEventTargetListeners] = EventEmitter.defaultMaxListeners;\r\n  self[kMaxEventTargetListenersWarned] = false;\r\n  self[kHandlers] = new SafeMap();\r\n}\r\n\r\nclass EventTarget {\r\n  // Used in checking whether an object is an EventTarget. This is a well-known\r\n  // symbol as EventTarget may be used cross-realm.\r\n  // Ref: https://github.com/nodejs/node/pull/33661\r\n  static [kIsEventTarget] = true;\r\n\r\n  constructor() {\r\n    initEventTarget(this);\r\n  }\r\n\r\n  [kNewListener](size, type, listener, once, capture, passive, weak) {\r\n    if (this[kMaxEventTargetListeners] > 0 &&\r\n        size > this[kMaxEventTargetListeners] &&\r\n        !this[kMaxEventTargetListenersWarned]) {\r\n      this[kMaxEventTargetListenersWarned] = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const w = new Error('Possible EventTarget memory leak detected. ' +\r\n                          `${size} ${type} listeners ` +\r\n                          `added to ${inspect(this, { depth: -1 })}. MaxListeners is ${this[kMaxEventTargetListeners]}. Use ` +\r\n                          'events.setMaxListeners() to increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.target = this;\r\n      w.type = type;\r\n      w.count = size;\r\n      process.emitWarning(w);\r\n    }\r\n  }\r\n  [kRemoveListener](size, type, listener, capture) {}\r\n\r\n  /**\r\n   * @callback EventTargetCallback\r\n   * @param {Event} event\r\n   */\r\n\r\n  /**\r\n   * @typedef {{ handleEvent: EventTargetCallback }} EventListener\r\n   */\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   *   once?: boolean,\r\n   *   passive?: boolean,\r\n   *   signal?: AbortSignal\r\n   * }} [options]\r\n   */\r\n  addEventListener(type, listener, options = kEmptyObject) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 2)\r\n      throw new ERR_MISSING_ARGS('type', 'listener');\r\n\r\n    // We validateOptions before the validateListener check because the spec\r\n    // requires us to hit getters.\r\n    const {\r\n      once,\r\n      capture,\r\n      passive,\r\n      signal,\r\n      isNodeStyleListener,\r\n      weak,\r\n      resistStopPropagation,\r\n    } = validateEventListenerOptions(options);\r\n\r\n    validateAbortSignal(signal, 'options.signal');\r\n\r\n    if (!validateEventListener(listener)) {\r\n      // The DOM silently allows passing undefined as a second argument\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const w = new Error(`addEventListener called with ${listener}` +\r\n                          ' which has no effect.');\r\n      w.name = 'AddEventListenerArgumentTypeWarning';\r\n      w.target = this;\r\n      w.type = type;\r\n      process.emitWarning(w);\r\n      return;\r\n    }\r\n    type = webidl.converters.DOMString(type);\r\n\r\n    if (signal) {\r\n      if (signal.aborted) {\r\n        return;\r\n      }\r\n      // TODO(benjamingr) make this weak somehow? ideally the signal would\r\n      // not prevent the event target from GC.\r\n      signal.addEventListener('abort', () => {\r\n        this.removeEventListener(type, listener, options);\r\n      }, { __proto__: null, once: true, [kWeakHandler]: this, [kResistStopPropagation]: true });\r\n    }\r\n\r\n    let root = this[kEvents].get(type);\r\n\r\n    if (root === undefined) {\r\n      root = { size: 1, next: undefined, resistStopPropagation: Boolean(resistStopPropagation) };\r\n      // This is the first handler in our linked list.\r\n      new Listener(this, type, root, listener, once, capture, passive,\r\n                   isNodeStyleListener, weak, resistStopPropagation);\r\n      this[kNewListener](\r\n        root.size,\r\n        type,\r\n        listener,\r\n        once,\r\n        capture,\r\n        passive,\r\n        weak);\r\n      this[kEvents].set(type, root);\r\n      return;\r\n    }\r\n\r\n    let handler = root.next;\r\n    let previous = root;\r\n\r\n    // We have to walk the linked list to see if we have a match\r\n    while (handler !== undefined && !handler.same(listener, capture)) {\r\n      previous = handler;\r\n      handler = handler.next;\r\n    }\r\n\r\n    if (handler !== undefined) { // Duplicate! Ignore\r\n      return;\r\n    }\r\n\r\n    new Listener(this, type, previous, listener, once, capture, passive,\r\n                 isNodeStyleListener, weak, resistStopPropagation);\r\n    root.size++;\r\n    root.resistStopPropagation ||= Boolean(resistStopPropagation);\r\n    this[kNewListener](root.size, type, listener, once, capture, passive, weak);\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   */\r\n  removeEventListener(type, listener, options = kEmptyObject) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 2)\r\n      throw new ERR_MISSING_ARGS('type', 'listener');\r\n    if (!validateEventListener(listener))\r\n      return;\r\n\r\n    type = webidl.converters.DOMString(type);\r\n    const capture = options?.capture === true;\r\n\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined)\r\n      return;\r\n\r\n    let handler = root.next;\r\n    while (handler !== undefined) {\r\n      if (handler.same(listener, capture)) {\r\n        handler.remove();\r\n        root.size--;\r\n        if (root.size === 0)\r\n          this[kEvents].delete(type);\r\n        this[kRemoveListener](root.size, type, listener, capture);\r\n        break;\r\n      }\r\n      handler = handler.next;\r\n    }\r\n  }\r\n\r\n  [kRemoveWeakListenerHelper](type, listener) {\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined)\r\n      return;\r\n\r\n    const capture = listener.capture === true;\r\n\r\n    let handler = root.next;\r\n    while (handler !== undefined) {\r\n      if (handler === listener) {\r\n        handler.remove();\r\n        root.size--;\r\n        if (root.size === 0)\r\n          this[kEvents].delete(type);\r\n        // Undefined is passed as the listener as the listener was GCed\r\n        this[kRemoveListener](root.size, type, undefined, capture);\r\n        break;\r\n      }\r\n      handler = handler.next;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  dispatchEvent(event) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    if (arguments.length < 1)\r\n      throw new ERR_MISSING_ARGS('event');\r\n\r\n    if (!(event instanceof Event))\r\n      throw new ERR_INVALID_ARG_TYPE('event', 'Event', event);\r\n\r\n    if (event[kIsBeingDispatched])\r\n      throw new ERR_EVENT_RECURSION(event.type);\r\n\r\n    this[kHybridDispatch](event, event.type, event);\r\n\r\n    return event.defaultPrevented !== true;\r\n  }\r\n\r\n  [kHybridDispatch](nodeValue, type, event) {\r\n    const createEvent = () => {\r\n      if (event === undefined) {\r\n        event = this[kCreateEvent](nodeValue, type);\r\n        event[kTarget] = this;\r\n        event[kIsBeingDispatched] = true;\r\n      }\r\n      return event;\r\n    };\r\n    if (event !== undefined) {\r\n      event[kTarget] = this;\r\n      event[kIsBeingDispatched] = true;\r\n    }\r\n\r\n    const root = this[kEvents].get(type);\r\n    if (root === undefined || root.next === undefined) {\r\n      if (event !== undefined)\r\n        event[kIsBeingDispatched] = false;\r\n      return true;\r\n    }\r\n\r\n    let handler = root.next;\r\n    let next;\r\n\r\n    const iterationCondition = () => {\r\n      if (handler === undefined) {\r\n        return false;\r\n      }\r\n      return root.resistStopPropagation || handler.passive || event?.[kStop] !== true;\r\n    };\r\n    while (iterationCondition()) {\r\n      // Cache the next item in case this iteration removes the current one\r\n      next = handler.next;\r\n\r\n      if (handler.removed || (event?.[kStop] === true && !handler.resistStopPropagation)) {\r\n        // Deal with the case an event is removed while event handlers are\r\n        // Being processed (removeEventListener called from a listener)\r\n        // And the case of event.stopImmediatePropagation() being called\r\n        // For events not flagged as resistStopPropagation\r\n        handler = next;\r\n        continue;\r\n      }\r\n      if (handler.once) {\r\n        handler.remove();\r\n        root.size--;\r\n        const { listener, capture } = handler;\r\n        this[kRemoveListener](root.size, type, listener, capture);\r\n      }\r\n\r\n      try {\r\n        let arg;\r\n        if (handler.isNodeStyleListener) {\r\n          arg = nodeValue;\r\n        } else {\r\n          arg = createEvent();\r\n        }\r\n        const callback = handler.weak ?\r\n          handler.callback.deref() : handler.callback;\r\n        let result;\r\n        if (callback) {\r\n          result = FunctionPrototypeCall(callback, this, arg);\r\n          if (!handler.isNodeStyleListener) {\r\n            arg[kIsBeingDispatched] = false;\r\n          }\r\n        }\r\n        if (result !== undefined && result !== null)\r\n          addCatch(result);\r\n      } catch (err) {\r\n        emitUncaughtException(err);\r\n      }\r\n\r\n      handler = next;\r\n    }\r\n\r\n    if (event !== undefined)\r\n      event[kIsBeingDispatched] = false;\r\n  }\r\n\r\n  [kCreateEvent](nodeValue, type) {\r\n    return new CustomEvent(type, { detail: nodeValue });\r\n  }\r\n  [customInspectSymbol](depth, options) {\r\n    if (!isEventTarget(this))\r\n      throw new ERR_INVALID_THIS('EventTarget');\r\n    const name = this.constructor.name;\r\n    if (depth < 0)\r\n      return name;\r\n\r\n    const opts = ObjectAssign({}, options, {\r\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth,\r\n    });\r\n\r\n    return `${name} ${inspect({}, opts)}`;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(EventTarget.prototype, {\r\n  addEventListener: kEnumerableProperty,\r\n  removeEventListener: kEnumerableProperty,\r\n  dispatchEvent: kEnumerableProperty,\r\n  [SymbolToStringTag]: {\r\n    __proto__: null,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'EventTarget',\r\n  },\r\n});\r\n\r\nfunction initNodeEventTarget(self) {\r\n  initEventTarget(self);\r\n}\r\n\r\nclass NodeEventTarget extends EventTarget {\r\n  static [kIsNodeEventTarget] = true;\r\n  static defaultMaxListeners = 10;\r\n\r\n  constructor() {\r\n    super();\r\n    initNodeEventTarget(this);\r\n  }\r\n\r\n  /**\r\n   * @param {number} n\r\n   */\r\n  setMaxListeners(n) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    EventEmitter.setMaxListeners(n, this);\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getMaxListeners() {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    return this[kMaxEventTargetListeners];\r\n  }\r\n\r\n  /**\r\n   * @returns {string[]}\r\n   */\r\n  eventNames() {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    return ArrayFrom(this[kEvents].keys());\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @returns {number}\r\n   */\r\n  listenerCount(type) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    const root = this[kEvents].get(String(type));\r\n    return root !== undefined ? root.size : 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  off(type, listener, options) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.removeEventListener(type, listener, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @param {{\r\n   *   capture?: boolean,\r\n   * }} [options]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  removeListener(type, listener, options) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.removeEventListener(type, listener, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  on(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener, { [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  addListener(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener, { [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {any} arg\r\n   * @returns {boolean}\r\n   */\r\n  emit(type, arg) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    validateString(type, 'type');\r\n    const hadListeners = this.listenerCount(type) > 0;\r\n    this[kHybridDispatch](arg, type);\r\n    return hadListeners;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {EventTargetCallback|EventListener} listener\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  once(type, listener) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    this.addEventListener(type, listener,\r\n                          { once: true, [kIsNodeStyleListener]: true });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} [type]\r\n   * @returns {NodeEventTarget}\r\n   */\r\n  removeAllListeners(type) {\r\n    if (!isNodeEventTarget(this))\r\n      throw new ERR_INVALID_THIS('NodeEventTarget');\r\n    if (type !== undefined) {\r\n      this[kEvents].delete(String(type));\r\n    } else {\r\n      this[kEvents].clear();\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nObjectDefineProperties(NodeEventTarget.prototype, {\r\n  setMaxListeners: kEnumerableProperty,\r\n  getMaxListeners: kEnumerableProperty,\r\n  eventNames: kEnumerableProperty,\r\n  listenerCount: kEnumerableProperty,\r\n  off: kEnumerableProperty,\r\n  removeListener: kEnumerableProperty,\r\n  on: kEnumerableProperty,\r\n  addListener: kEnumerableProperty,\r\n  once: kEnumerableProperty,\r\n  emit: kEnumerableProperty,\r\n  removeAllListeners: kEnumerableProperty,\r\n});\r\n\r\n// EventTarget API\r\n\r\nfunction validateEventListener(listener) {\r\n  if (typeof listener === 'function' ||\r\n      typeof listener?.handleEvent === 'function') {\r\n    return true;\r\n  }\r\n\r\n  if (listener == null)\r\n    return false;\r\n\r\n  if (typeof listener === 'object') {\r\n    // Require `handleEvent` lazily.\r\n    return true;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE('listener', 'EventListener', listener);\r\n}\r\n\r\nfunction validateEventListenerOptions(options) {\r\n  if (typeof options === 'boolean')\r\n    return { capture: options };\r\n\r\n  if (options === null)\r\n    return kEmptyObject;\r\n  validateObject(options, 'options', kValidateObjectAllowObjects);\r\n  return {\r\n    once: Boolean(options.once),\r\n    capture: Boolean(options.capture),\r\n    passive: Boolean(options.passive),\r\n    signal: options.signal,\r\n    weak: options[kWeakHandler],\r\n    resistStopPropagation: options[kResistStopPropagation] ?? false,\r\n    isNodeStyleListener: Boolean(options[kIsNodeStyleListener]),\r\n  };\r\n}\r\n\r\n// Test whether the argument is an event object. This is far from a fool-proof\r\n// test, for example this input will result in a false positive:\r\n// > isEventTarget({ constructor: EventTarget })\r\n// It stands in its current implementation as a compromise.\r\n// Ref: https://github.com/nodejs/node/pull/33661\r\nfunction isEventTarget(obj) {\r\n  return obj?.constructor?.[kIsEventTarget];\r\n}\r\n\r\nfunction isNodeEventTarget(obj) {\r\n  return obj?.constructor?.[kIsNodeEventTarget];\r\n}\r\n\r\nfunction addCatch(promise) {\r\n  const then = promise.then;\r\n  if (typeof then === 'function') {\r\n    FunctionPrototypeCall(then, promise, undefined, function(err) {\r\n      // The callback is called with nextTick to avoid a follow-up\r\n      // rejection from this promise.\r\n      emitUncaughtException(err);\r\n    });\r\n  }\r\n}\r\n\r\nfunction emitUncaughtException(err) {\r\n  process.nextTick(() => { throw err; });\r\n}\r\n\r\nfunction makeEventHandler(handler) {\r\n  // Event handlers are dispatched in the order they were first set\r\n  // See https://github.com/nodejs/node/pull/35949#issuecomment-722496598\r\n  function eventHandler(...args) {\r\n    if (typeof eventHandler.handler !== 'function') {\r\n      return;\r\n    }\r\n    return ReflectApply(eventHandler.handler, this, args);\r\n  }\r\n  eventHandler.handler = handler;\r\n  return eventHandler;\r\n}\r\n\r\nfunction defineEventHandler(emitter, name, event = name) {\r\n  // 8.1.5.1 Event handlers - basically `on[eventName]` attributes\r\n  const propName = `on${name}`;\r\n  function get() {\r\n    validateInternalField(this, kHandlers, 'EventTarget');\r\n    return this[kHandlers]?.get(event)?.handler ?? null;\r\n  }\r\n  ObjectDefineProperty(get, 'name', {\r\n    __proto__: null,\r\n    value: `get ${propName}`,\r\n  });\r\n\r\n  function set(value) {\r\n    validateInternalField(this, kHandlers, 'EventTarget');\r\n    let wrappedHandler = this[kHandlers]?.get(event);\r\n    if (wrappedHandler) {\r\n      if (typeof wrappedHandler.handler === 'function') {\r\n        this[kEvents].get(event).size--;\r\n        const size = this[kEvents].get(event).size;\r\n        this[kRemoveListener](size, event, wrappedHandler.handler, false);\r\n      }\r\n      wrappedHandler.handler = value;\r\n      if (typeof wrappedHandler.handler === 'function') {\r\n        this[kEvents].get(event).size++;\r\n        const size = this[kEvents].get(event).size;\r\n        this[kNewListener](size, event, value, false, false, false, false);\r\n      }\r\n    } else {\r\n      wrappedHandler = makeEventHandler(value);\r\n      this.addEventListener(event, wrappedHandler);\r\n    }\r\n    this[kHandlers].set(event, wrappedHandler);\r\n  }\r\n  ObjectDefineProperty(set, 'name', {\r\n    __proto__: null,\r\n    value: `set ${propName}`,\r\n  });\r\n\r\n  ObjectDefineProperty(emitter, propName, {\r\n    __proto__: null,\r\n    get,\r\n    set,\r\n    configurable: true,\r\n    enumerable: true,\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  Event,\r\n  CustomEvent,\r\n  EventTarget,\r\n  NodeEventTarget,\r\n  defineEventHandler,\r\n  initEventTarget,\r\n  initNodeEventTarget,\r\n  kCreateEvent,\r\n  kNewListener,\r\n  kTrustEvent,\r\n  kRemoveListener,\r\n  kEvents,\r\n  kWeakHandler,\r\n  kResistStopPropagation,\r\n  isEventTarget,\r\n};\r\n"
  },
  "54": {
    "metadata": {
      "scriptId": "54",
      "url": "node:internal/webidl",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 218,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3f94e44cc1730b9cc5f58fd7a9145349f7fa75d52f1d5e8809560e8b2c4b8cfe",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 5829,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/webidl"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  MathAbs,\r\n  MathMax,\r\n  MathMin,\r\n  MathPow,\r\n  MathSign,\r\n  MathTrunc,\r\n  NumberIsNaN,\r\n  NumberMAX_SAFE_INTEGER,\r\n  NumberMIN_SAFE_INTEGER,\r\n  ObjectAssign,\r\n  SafeSet,\r\n  String,\r\n  TypeError,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n  },\r\n} = require('internal/errors');\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\nconst converters = { __proto__: null };\r\n\r\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\r\nconst integerPart = MathTrunc;\r\n\r\n/* eslint-disable node-core/non-ascii-character */\r\n// Round x to the nearest integer, choosing the even integer if it lies halfway\r\n// between two, and choosing +0 rather than -0.\r\n// This is different from Math.round, which rounds to the next integer in the\r\n// direction of +∞ when the fraction portion is exactly 0.5.\r\n/* eslint-enable node-core/non-ascii-character */\r\nfunction evenRound(x) {\r\n  // Convert -0 to +0.\r\n  const i = integerPart(x) + 0;\r\n  const reminder = MathAbs(x % 1);\r\n  const sign = MathSign(i);\r\n  if (reminder === 0.5) {\r\n    return i % 2 === 0 ? i : i + sign;\r\n  }\r\n  const r = reminder < 0.5 ? i : i + sign;\r\n  // Convert -0 to +0.\r\n  if (r === 0) {\r\n    return 0;\r\n  }\r\n  return r;\r\n}\r\n\r\nfunction pow2(exponent) {\r\n  // << operates on 32 bit signed integers.\r\n  if (exponent < 31) {\r\n    return 1 << exponent;\r\n  }\r\n  if (exponent === 31) {\r\n    return 0x8000_0000;\r\n  }\r\n  if (exponent === 32) {\r\n    return 0x1_0000_0000;\r\n  }\r\n  return MathPow(2, exponent);\r\n}\r\n\r\n// https://tc39.es/ecma262/#eqn-modulo\r\n// The notation “x modulo y” computes a value k of the same sign as y.\r\nfunction modulo(x, y) {\r\n  const r = x % y;\r\n  // Convert -0 to +0.\r\n  if (r === 0) {\r\n    return 0;\r\n  }\r\n  return r;\r\n}\r\n\r\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\r\nfunction convertToInt(name, value, bitLength, options = kEmptyObject) {\r\n  const { signed = false, enforceRange = false, clamp = false } = options;\r\n\r\n  let upperBound;\r\n  let lowerBound;\r\n  // 1. If bitLength is 64, then:\r\n  if (bitLength === 64) {\r\n    // 1.1. Let upperBound be 2^53 − 1.\r\n    upperBound = NumberMAX_SAFE_INTEGER;\r\n    // 1.2. If signedness is \"unsigned\", then let lowerBound be 0.\r\n    // 1.3. Otherwise let lowerBound be −2^53 + 1.\r\n    lowerBound = !signed ? 0 : NumberMIN_SAFE_INTEGER;\r\n  } else if (!signed) {\r\n    // 2. Otherwise, if signedness is \"unsigned\", then:\r\n    // 2.1. Let lowerBound be 0.\r\n    // 2.2. Let upperBound be 2^bitLength − 1.\r\n    lowerBound = 0;\r\n    upperBound = pow2(bitLength) - 1;\r\n  } else {\r\n    // 3. Otherwise:\r\n    // 3.1. Let lowerBound be -2^(bitLength − 1).\r\n    // 3.2. Let upperBound be 2^(bitLength − 1) − 1.\r\n    lowerBound = -pow2(bitLength - 1);\r\n    upperBound = pow2(bitLength - 1) - 1;\r\n  }\r\n\r\n  // 4. Let x be ? ToNumber(V).\r\n  let x = +value;\r\n  // 5. If x is −0, then set x to +0.\r\n  if (x === 0) {\r\n    x = 0;\r\n  }\r\n\r\n  // 6. If the conversion is to an IDL type associated with the [EnforceRange]\r\n  // extended attribute, then:\r\n  if (enforceRange) {\r\n    // 6.1. If x is NaN, +∞, or −∞, then throw a TypeError.\r\n    if (NumberIsNaN(x) || x === Infinity || x === -Infinity) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, x);\r\n    }\r\n    // 6.2. Set x to IntegerPart(x).\r\n    x = integerPart(x);\r\n\r\n    // 6.3. If x < lowerBound or x > upperBound, then throw a TypeError.\r\n    if (x < lowerBound || x > upperBound) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, x);\r\n    }\r\n\r\n    // 6.4. Return x.\r\n    return x;\r\n  }\r\n\r\n  // 7. If x is not NaN and the conversion is to an IDL type associated with\r\n  // the [Clamp] extended attribute, then:\r\n  if (clamp && !NumberIsNaN(x)) {\r\n    // 7.1. Set x to min(max(x, lowerBound), upperBound).\r\n    x = MathMin(MathMax(x, lowerBound), upperBound);\r\n\r\n    // 7.2. Round x to the nearest integer, choosing the even integer if it\r\n    // lies halfway between two, and choosing +0 rather than −0.\r\n    x = evenRound(x);\r\n\r\n    // 7.3. Return x.\r\n    return x;\r\n  }\r\n\r\n  // 8. If x is NaN, +0, +∞, or −∞, then return +0.\r\n  if (NumberIsNaN(x) || x === 0 || x === Infinity || x === -Infinity) {\r\n    return 0;\r\n  }\r\n\r\n  // 9. Set x to IntegerPart(x).\r\n  x = integerPart(x);\r\n\r\n  // 10. Set x to x modulo 2^bitLength.\r\n  x = modulo(x, pow2(bitLength));\r\n\r\n  // 11. If signedness is \"signed\" and x ≥ 2^(bitLength − 1), then return x −\r\n  // 2^bitLength.\r\n  if (signed && x >= pow2(bitLength - 1)) {\r\n    return x - pow2(bitLength);\r\n  }\r\n\r\n  // 12. Otherwise, return x.\r\n  return x;\r\n}\r\n\r\n/**\r\n * @see https://webidl.spec.whatwg.org/#es-DOMString\r\n * @param {any} V\r\n * @returns {string}\r\n */\r\nconverters.DOMString = function DOMString(V) {\r\n  if (typeof V === 'symbol') {\r\n    throw new ERR_INVALID_ARG_VALUE('value', V);\r\n  }\r\n\r\n  return String(V);\r\n};\r\n\r\nfunction codedTypeError(message, errorProperties = kEmptyObject) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new TypeError(message);\r\n  ObjectAssign(err, errorProperties);\r\n  return err;\r\n}\r\n\r\nfunction makeException(message, opts = kEmptyObject) {\r\n  const prefix = opts.prefix ? opts.prefix + ': ' : '';\r\n  const context = opts.context?.length === 0 ?\r\n    '' : (opts.context ?? 'Value') + ' ';\r\n  return codedTypeError(\r\n    `${prefix}${context}${message}`,\r\n    { code: opts.code || 'ERR_INVALID_ARG_TYPE' },\r\n  );\r\n}\r\n\r\nfunction createEnumConverter(name, values) {\r\n  const E = new SafeSet(values);\r\n\r\n  return function(V, opts = kEmptyObject) {\r\n    const S = String(V);\r\n\r\n    if (!E.has(S)) {\r\n      throw makeException(\r\n        `value '${S}' is not a valid enum value of type ${name}.`,\r\n        { __proto__: null, ...opts, code: 'ERR_INVALID_ARG_VALUE' });\r\n    }\r\n\r\n    return S;\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  converters,\r\n  convertToInt,\r\n  createEnumConverter,\r\n  evenRound,\r\n  makeException,\r\n};\r\n"
  },
  "55": {
    "metadata": {
      "scriptId": "55",
      "url": "node:internal/perf/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 34,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "6571844d3738cd47bc364fddfce8e055d1eb9c61426c1dd0c1a864acc9463a2e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 844,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/perf/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  constants: {\r\n    NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN,\r\n    NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP,\r\n  },\r\n  milestones,\r\n  now,\r\n} = internalBinding('performance');\r\n\r\nfunction getTimeOrigin() {\r\n  // Do not cache this to prevent it from being serialized into the\r\n  // snapshot.\r\n  return milestones[NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN] / 1e6;\r\n}\r\n\r\n// Returns the milestone relative to the process start time in milliseconds.\r\nfunction getMilestoneTimestamp(milestoneIdx) {\r\n  const ns = milestones[milestoneIdx];\r\n  if (ns === -1)\r\n    return ns;\r\n  return ns / 1e6 - getTimeOrigin();\r\n}\r\n\r\nfunction getTimeOriginTimestamp() {\r\n  return milestones[NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP] / 1e3;\r\n}\r\n\r\nmodule.exports = {\r\n  now,\r\n  getMilestoneTimestamp,\r\n  getTimeOriginTimestamp,\r\n};\r\n"
  },
  "56": {
    "metadata": {
      "scriptId": "56",
      "url": "node:internal/bootstrap/web/exposed-window-or-worker",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 92,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3dac1db713ef173cf784aaa9c5c93627a0ec3ef51963b9bfae61a535b4431f89",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3686,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/web/exposed-window-or-worker"
    },
    "source": "'use strict';\r\n\r\n/**\r\n * This file exposes web interfaces that is defined with the WebIDL\r\n * Exposed=Window + Exposed=(Window,Worker) extended attribute or exposed in\r\n * WindowOrWorkerGlobalScope mixin.\r\n * See more details at https://webidl.spec.whatwg.org/#Exposed and\r\n * https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope.\r\n */\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  defineOperation,\r\n  defineLazyProperties,\r\n  defineReplaceableLazyAttribute,\r\n  exposeLazyInterfaces,\r\n} = require('internal/util');\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope\r\nconst timers = require('timers');\r\ndefineOperation(globalThis, 'clearInterval', timers.clearInterval);\r\ndefineOperation(globalThis, 'clearTimeout', timers.clearTimeout);\r\ndefineOperation(globalThis, 'setInterval', timers.setInterval);\r\ndefineOperation(globalThis, 'setTimeout', timers.setTimeout);\r\n\r\nconst {\r\n  queueMicrotask,\r\n} = require('internal/process/task_queues');\r\ndefineOperation(globalThis, 'queueMicrotask', queueMicrotask);\r\n\r\nconst { structuredClone } = internalBinding('messaging');\r\ndefineOperation(globalThis, 'structuredClone', structuredClone);\r\ndefineLazyProperties(globalThis, 'buffer', ['atob', 'btoa']);\r\n\r\n// https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\r\nexposeLazyInterfaces(globalThis, 'internal/worker/io', ['BroadcastChannel']);\r\nexposeLazyInterfaces(globalThis, 'internal/worker/io', [\r\n  'MessageChannel', 'MessagePort',\r\n]);\r\n// https://www.w3.org/TR/FileAPI/#dfn-Blob\r\nexposeLazyInterfaces(globalThis, 'internal/blob', ['Blob']);\r\n// https://www.w3.org/TR/FileAPI/#dfn-file\r\nexposeLazyInterfaces(globalThis, 'internal/file', ['File']);\r\n// https://www.w3.org/TR/hr-time-2/#the-performance-attribute\r\nexposeLazyInterfaces(globalThis, 'perf_hooks', [\r\n  'Performance', 'PerformanceEntry', 'PerformanceMark', 'PerformanceMeasure',\r\n  'PerformanceObserver', 'PerformanceObserverEntryList', 'PerformanceResourceTiming',\r\n]);\r\n\r\ndefineReplaceableLazyAttribute(globalThis, 'perf_hooks', ['performance']);\r\n\r\n// https://w3c.github.io/FileAPI/#creating-revoking\r\nconst { installObjectURLMethods } = require('internal/url');\r\ninstallObjectURLMethods();\r\n\r\nlet fetchImpl;\r\n// https://fetch.spec.whatwg.org/#fetch-method\r\nObjectDefineProperty(globalThis, 'fetch', {\r\n  __proto__: null,\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: true,\r\n  value: function fetch(input, init = undefined) { // eslint-disable-line func-name-matching\r\n    if (!fetchImpl) { // Implement lazy loading of undici module for fetch function\r\n      const undiciModule = require('internal/deps/undici/undici');\r\n      fetchImpl = undiciModule.fetch;\r\n    }\r\n    return fetchImpl(input, init);\r\n  },\r\n});\r\n\r\n// https://xhr.spec.whatwg.org/#interface-formdata\r\n// https://fetch.spec.whatwg.org/#headers-class\r\n// https://fetch.spec.whatwg.org/#request-class\r\n// https://fetch.spec.whatwg.org/#response-class\r\nexposeLazyInterfaces(globalThis, 'internal/deps/undici/undici', [\r\n  'FormData', 'Headers', 'Request', 'Response', 'MessageEvent',\r\n]);\r\n\r\n// https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events.org/\r\n// https://websockets.spec.whatwg.org/\r\nexposeLazyInterfaces(globalThis, 'internal/deps/undici/undici', ['EventSource', 'WebSocket']);\r\n\r\n// The WebAssembly Web API which relies on Response.\r\n// https:// webassembly.github.io/spec/web-api/#streaming-modules\r\ninternalBinding('wasm_web_api').setImplementation((streamState, source) => {\r\n  require('internal/wasm_web_api').wasmStreamingCallback(streamState, source);\r\n});\r\n"
  },
  "57": {
    "metadata": {
      "scriptId": "57",
      "url": "node:internal/bootstrap/switches/is_main_thread",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 318,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e1f7e76944b2b842cc0a880145e207d6e7b47e70b752d0e335abf16cf3ef6177",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9028,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/switches/is_main_thread"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ObjectDefineProperty,\r\n} = primordials;\r\n\r\nconst rawMethods = internalBinding('process_methods');\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n// TODO(joyeecheung): deprecate and remove these underscore methods\r\nprocess._debugProcess = rawMethods._debugProcess;\r\nprocess._debugEnd = rawMethods._debugEnd;\r\n\r\n// See the discussion in https://github.com/nodejs/node/issues/19009 and\r\n// https://github.com/nodejs/node/pull/34010 for why these are no-ops.\r\n// Five word summary: they were broken beyond repair.\r\nprocess._startProfilerIdleNotifier = () => {};\r\nprocess._stopProfilerIdleNotifier = () => {};\r\n\r\nfunction defineStream(name, getter) {\r\n  ObjectDefineProperty(process, name, {\r\n    __proto__: null,\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getter,\r\n  });\r\n}\r\n\r\ndefineStream('stdout', getStdout);\r\ndefineStream('stdin', getStdin);\r\ndefineStream('stderr', getStderr);\r\n\r\n// Worker threads don't receive signals.\r\nconst {\r\n  startListeningIfSignal,\r\n  stopListeningIfSignal,\r\n} = require('internal/process/signal');\r\nprocess.on('newListener', startListeningIfSignal);\r\nprocess.on('removeListener', stopListeningIfSignal);\r\n\r\n// ---- keep the attachment of the wrappers above so that it's easier to ----\r\n// ----              compare the setups side-by-side                    -----\r\n\r\nconst { guessHandleType } = require('internal/util');\r\n\r\nfunction createWritableStdioStream(fd) {\r\n  let stream;\r\n  // Note stream._type is used for test-module-load-list.js\r\n  switch (guessHandleType(fd)) {\r\n    case 'TTY': {\r\n      const tty = require('tty');\r\n      stream = new tty.WriteStream(fd);\r\n      stream._type = 'tty';\r\n      break;\r\n    }\r\n\r\n    case 'FILE': {\r\n      const SyncWriteStream = require('internal/fs/sync_write_stream');\r\n      stream = new SyncWriteStream(fd, { autoClose: false });\r\n      stream._type = 'fs';\r\n      break;\r\n    }\r\n\r\n    case 'PIPE':\r\n    case 'TCP': {\r\n      const net = require('net');\r\n\r\n      // If fd is already being used for the IPC channel, libuv will return\r\n      // an error when trying to use it again. In that case, create the socket\r\n      // using the existing handle instead of the fd.\r\n      if (process.channel && process.channel.fd === fd) {\r\n        const { kChannelHandle } = require('internal/child_process');\r\n        stream = new net.Socket({\r\n          handle: process[kChannelHandle],\r\n          readable: false,\r\n          writable: true,\r\n        });\r\n      } else {\r\n        stream = new net.Socket({\r\n          fd,\r\n          readable: false,\r\n          writable: true,\r\n        });\r\n      }\r\n\r\n      stream._type = 'pipe';\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      // Provide a dummy black-hole output for e.g. non-console\r\n      // Windows applications.\r\n      const { Writable } = require('stream');\r\n      stream = new Writable({\r\n        write(buf, enc, cb) {\r\n          cb();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // For supporting legacy API we put the FD here.\r\n  stream.fd = fd;\r\n\r\n  stream._isStdio = true;\r\n\r\n  return stream;\r\n}\r\n\r\nfunction dummyDestroy(err, cb) {\r\n  cb(err);\r\n  this._undestroy();\r\n\r\n  // We need to emit 'close' anyway so that the closing\r\n  // of the stream is observable. We just make sure we\r\n  // are not going to do it twice.\r\n  // The 'close' event is needed so that finished and\r\n  // pipeline work correctly.\r\n  if (!this._writableState.emitClose) {\r\n    process.nextTick(() => {\r\n      this.emit('close');\r\n    });\r\n  }\r\n}\r\n\r\nlet stdin;\r\nlet stdout;\r\nlet stderr;\r\n\r\nlet stdoutDestroy;\r\nlet stderrDestroy;\r\n\r\nfunction refreshStdoutOnSigWinch() {\r\n  stdout._refreshSize();\r\n}\r\n\r\nfunction refreshStderrOnSigWinch() {\r\n  stderr._refreshSize();\r\n}\r\n\r\nfunction addCleanup(fn) {\r\n  if (isBuildingSnapshot()) {\r\n    addSerializeCallback(fn);\r\n  }\r\n}\r\n\r\nfunction getStdout() {\r\n  if (stdout) return stdout;\r\n  stdout = createWritableStdioStream(1);\r\n  stdout.destroySoon = stdout.destroy;\r\n  // Override _destroy so that the fd is never actually closed.\r\n  stdoutDestroy = stdout._destroy;\r\n  stdout._destroy = dummyDestroy;\r\n  if (stdout.isTTY) {\r\n    process.on('SIGWINCH', refreshStdoutOnSigWinch);\r\n  }\r\n\r\n  addCleanup(function cleanupStdout() {\r\n    stdout._destroy = stdoutDestroy;\r\n    stdout.destroy();\r\n    process.removeListener('SIGWINCH', refreshStdoutOnSigWinch);\r\n    stdout = undefined;\r\n  });\r\n  // No need to add deserialize callback because stdout = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stdout;\r\n}\r\n\r\nfunction getStderr() {\r\n  if (stderr) return stderr;\r\n  stderr = createWritableStdioStream(2);\r\n  stderr.destroySoon = stderr.destroy;\r\n  stderrDestroy = stderr._destroy;\r\n  // Override _destroy so that the fd is never actually closed.\r\n  stderr._destroy = dummyDestroy;\r\n  if (stderr.isTTY) {\r\n    process.on('SIGWINCH', refreshStderrOnSigWinch);\r\n  }\r\n  addCleanup(function cleanupStderr() {\r\n    stderr._destroy = stderrDestroy;\r\n    stderr.destroy();\r\n    process.removeListener('SIGWINCH', refreshStderrOnSigWinch);\r\n    stderr = undefined;\r\n  });\r\n  // No need to add deserialize callback because stderr = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stderr;\r\n}\r\n\r\nfunction getStdin() {\r\n  if (stdin) return stdin;\r\n  const fd = 0;\r\n\r\n  switch (guessHandleType(fd)) {\r\n    case 'TTY': {\r\n      const tty = require('tty');\r\n      stdin = new tty.ReadStream(fd);\r\n      break;\r\n    }\r\n\r\n    case 'FILE': {\r\n      const fs = require('fs');\r\n      stdin = new fs.ReadStream(null, { fd: fd, autoClose: false });\r\n      break;\r\n    }\r\n\r\n    case 'PIPE':\r\n    case 'TCP': {\r\n      const net = require('net');\r\n\r\n      // It could be that process has been started with an IPC channel\r\n      // sitting on fd=0, in such case the pipe for this fd is already\r\n      // present and creating a new one will lead to the assertion failure\r\n      // in libuv.\r\n      if (process.channel && process.channel.fd === fd) {\r\n        stdin = new net.Socket({\r\n          handle: process.channel,\r\n          readable: true,\r\n          writable: false,\r\n          manualStart: true,\r\n        });\r\n      } else {\r\n        stdin = new net.Socket({\r\n          fd: fd,\r\n          readable: true,\r\n          writable: false,\r\n          manualStart: true,\r\n        });\r\n      }\r\n      // Make sure the stdin can't be `.end()`-ed\r\n      stdin._writableState.ended = true;\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      // Provide a dummy contentless input for e.g. non-console\r\n      // Windows applications.\r\n      const { Readable } = require('stream');\r\n      stdin = new Readable({ read() {} });\r\n      stdin.push(null);\r\n    }\r\n  }\r\n\r\n  // For supporting legacy API we put the FD here.\r\n  stdin.fd = fd;\r\n\r\n  // `stdin` starts out life in a paused state, but node doesn't\r\n  // know yet. Explicitly to readStop() it to put it in the\r\n  // not-reading state.\r\n  if (stdin._handle && stdin._handle.readStop) {\r\n    stdin._handle.reading = false;\r\n    stdin._readableState.reading = false;\r\n    stdin._handle.readStop();\r\n  }\r\n\r\n  // If the user calls stdin.pause(), then we need to stop reading\r\n  // once the stream implementation does so (one nextTick later),\r\n  // so that the process can close down.\r\n  stdin.on('pause', () => {\r\n    process.nextTick(onpause);\r\n  });\r\n\r\n  function onpause() {\r\n    if (!stdin._handle)\r\n      return;\r\n    if (stdin._handle.reading && !stdin.readableFlowing) {\r\n      stdin._readableState.reading = false;\r\n      stdin._handle.reading = false;\r\n      stdin._handle.readStop();\r\n    }\r\n  }\r\n\r\n  addCleanup(function cleanupStdin() {\r\n    stdin.destroy();\r\n    stdin = undefined;\r\n  });\r\n  // No need to add deserialize callback because stdin = undefined above\r\n  // causes the stream to be lazily initialized again later.\r\n  return stdin;\r\n}\r\n\r\n// Used by internal tests.\r\nrawMethods.resetStdioForTesting = function() {\r\n  stdin = undefined;\r\n  stdout = undefined;\r\n  stderr = undefined;\r\n};\r\n\r\n// Needed by the module loader and generally needed everywhere.\r\nrequire('fs');\r\nrequire('util');\r\nrequire('url'); // eslint-disable-line no-restricted-modules\r\ninternalBinding('module_wrap');\r\nrequire('internal/modules/cjs/loader');\r\nrequire('internal/modules/esm/utils');\r\n\r\n// Needed to refresh the time origin.\r\nrequire('internal/perf/utils');\r\n// Needed to register the async hooks.\r\nif (internalBinding('config').hasInspector) {\r\n  require('internal/inspector_async_hook');\r\n}\r\n// Needed to set the wasm web API callbacks.\r\ninternalBinding('wasm_web_api');\r\n// Needed to detect whether it's on main thread.\r\ninternalBinding('worker');\r\n// Needed by most execution modes.\r\nrequire('internal/modules/run_main');\r\n// Needed to refresh DNS configurations.\r\nrequire('internal/dns/utils');\r\n// Needed by almost all execution modes. It's fine to\r\n// load them into the snapshot as long as we don't run\r\n// any of the initialization.\r\nrequire('internal/process/pre_execution');\r\n"
  },
  "58": {
    "metadata": {
      "scriptId": "58",
      "url": "node:internal/v8/startup_snapshot",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 120,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "842ae8e7b851d97e32b7261b07e7625f68d9dfddd0ec5b6c1551dda3f9e821c1",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 3502,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/v8/startup_snapshot"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  validateFunction,\r\n} = require('internal/validators');\r\nconst {\r\n  codes: {\r\n    ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION,\r\n    ERR_NOT_BUILDING_SNAPSHOT,\r\n    ERR_NOT_SUPPORTED_IN_SNAPSHOT,\r\n  },\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  setSerializeCallback,\r\n  setDeserializeCallback,\r\n  setDeserializeMainFunction: _setDeserializeMainFunction,\r\n  isBuildingSnapshotBuffer,\r\n} = internalBinding('mksnapshot');\r\n\r\nfunction isBuildingSnapshot() {\r\n  return isBuildingSnapshotBuffer[0];\r\n}\r\n\r\nfunction throwIfNotBuildingSnapshot() {\r\n  if (!isBuildingSnapshot()) {\r\n    throw new ERR_NOT_BUILDING_SNAPSHOT();\r\n  }\r\n}\r\n\r\nfunction throwIfBuildingSnapshot(reason) {\r\n  if (isBuildingSnapshot()) {\r\n    throw new ERR_NOT_SUPPORTED_IN_SNAPSHOT(reason);\r\n  }\r\n}\r\n\r\nconst deserializeCallbacks = [];\r\nlet deserializeCallbackIsSet = false;\r\nfunction runDeserializeCallbacks() {\r\n  while (deserializeCallbacks.length > 0) {\r\n    const { 0: callback, 1: data } = deserializeCallbacks.shift();\r\n    callback(data);\r\n  }\r\n}\r\n\r\nfunction addDeserializeCallback(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  validateFunction(callback, 'callback');\r\n  if (!deserializeCallbackIsSet) {\r\n    // TODO(joyeecheung): when the main function handling is done in JS,\r\n    // the deserialize callbacks can always be invoked. For now only\r\n    // store it in C++ when it's actually used to avoid unnecessary\r\n    // C++ -> JS costs.\r\n    setDeserializeCallback(runDeserializeCallbacks);\r\n    deserializeCallbackIsSet = true;\r\n  }\r\n  deserializeCallbacks.push([callback, data]);\r\n}\r\n\r\nconst serializeCallbacks = [];\r\nfunction runSerializeCallbacks() {\r\n  while (serializeCallbacks.length > 0) {\r\n    const { 0: callback, 1: data } = serializeCallbacks.shift();\r\n    callback(data);\r\n  }\r\n}\r\n\r\nfunction addSerializeCallback(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  validateFunction(callback, 'callback');\r\n  serializeCallbacks.push([callback, data]);\r\n}\r\n\r\nfunction initializeCallbacks() {\r\n  // Only run the serialize callbacks in snapshot building mode, otherwise\r\n  // they throw.\r\n  if (isBuildingSnapshot()) {\r\n    setSerializeCallback(runSerializeCallbacks);\r\n  }\r\n}\r\n\r\nlet deserializeMainIsSet = false;\r\nfunction setDeserializeMainFunction(callback, data) {\r\n  throwIfNotBuildingSnapshot();\r\n  // TODO(joyeecheung): In lib/internal/bootstrap/node.js, create a default\r\n  // main function to run the lib/internal/main scripts and make sure that\r\n  // the main function set in the snapshot building process takes precedence.\r\n  validateFunction(callback, 'callback');\r\n  if (deserializeMainIsSet) {\r\n    throw new ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION();\r\n  }\r\n  deserializeMainIsSet = true;\r\n\r\n  _setDeserializeMainFunction(function deserializeMain() {\r\n    const {\r\n      prepareMainThreadExecution,\r\n      markBootstrapComplete,\r\n    } = require('internal/process/pre_execution');\r\n\r\n    // This should be in sync with run_main_module.js until we make that\r\n    // a built-in main function.\r\n    // TODO(joyeecheung): make a copy of argv[0] and insert it as argv[1].\r\n    prepareMainThreadExecution(false);\r\n    markBootstrapComplete();\r\n    callback(data);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  initializeCallbacks,\r\n  runDeserializeCallbacks,\r\n  throwIfBuildingSnapshot,\r\n  // Exposed to require('v8').startupSnapshot\r\n  namespace: {\r\n    addDeserializeCallback,\r\n    addSerializeCallback,\r\n    setDeserializeMainFunction,\r\n    isBuildingSnapshot,\r\n  },\r\n};\r\n"
  },
  "59": {
    "metadata": {
      "scriptId": "59",
      "url": "node:internal/process/signal",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 54,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "d5ecbf2a21047842402a4ff884381e9d4c2f0fc87c9c08d8d7ab6915241a5cb3",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 1234,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/signal"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  FunctionPrototypeBind,\r\n  SafeMap,\r\n} = primordials;\r\n\r\nconst {\r\n  ErrnoException,\r\n} = require('internal/errors');\r\n\r\nconst { signals } = internalBinding('constants').os;\r\n\r\nlet Signal;\r\nconst signalWraps = new SafeMap();\r\n\r\nfunction isSignal(event) {\r\n  return typeof event === 'string' && signals[event] !== undefined;\r\n}\r\n\r\n// Detect presence of a listener for the special signal types\r\nfunction startListeningIfSignal(type) {\r\n  if (isSignal(type) && !signalWraps.has(type)) {\r\n    if (Signal === undefined)\r\n      Signal = internalBinding('signal_wrap').Signal;\r\n    const wrap = new Signal();\r\n\r\n    wrap.unref();\r\n\r\n    wrap.onsignal = FunctionPrototypeBind(process.emit, process, type, type);\r\n\r\n    const signum = signals[type];\r\n    const err = wrap.start(signum);\r\n    if (err) {\r\n      wrap.close();\r\n      throw new ErrnoException(err, 'uv_signal_start');\r\n    }\r\n\r\n    signalWraps.set(type, wrap);\r\n  }\r\n}\r\n\r\nfunction stopListeningIfSignal(type) {\r\n  const wrap = signalWraps.get(type);\r\n  if (wrap !== undefined && process.listenerCount(type) === 0) {\r\n    wrap.close();\r\n    signalWraps.delete(type);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  startListeningIfSignal,\r\n  stopListeningIfSignal,\r\n};\r\n"
  },
  "60": {
    "metadata": {
      "scriptId": "60",
      "url": "node:url",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1047,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "3e6a91d8aea1c658fa5d11d0028b956ac762b8bc83477d37bfdb6d8370bdc649",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 33704,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:url"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  Boolean,\r\n  Int8Array,\r\n  ObjectKeys,\r\n  StringPrototypeCharCodeAt,\r\n  decodeURIComponent,\r\n} = primordials;\r\n\r\nconst { toASCII } = require('internal/idna');\r\nconst { encodeStr, hexTable } = require('internal/querystring');\r\nconst querystring = require('querystring');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_URL,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  validateString,\r\n  validateObject,\r\n} = require('internal/validators');\r\n\r\n// This ensures setURLConstructor() is called before the native\r\n// URL::ToObject() method is used.\r\nconst { spliceOne } = require('internal/util');\r\n\r\n// WHATWG URL implementation provided by internal/url\r\nconst {\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  fileURLToPath,\r\n  pathToFileURL: _pathToFileURL,\r\n  urlToHttpOptions,\r\n  unsafeProtocol,\r\n  hostlessProtocol,\r\n  slashedProtocol,\r\n} = require('internal/url');\r\n\r\nconst bindingUrl = internalBinding('url');\r\n\r\nconst { getOptionValue } = require('internal/options');\r\n\r\n// Original url.parse() API\r\n\r\nfunction Url() {\r\n  this.protocol = null;\r\n  this.slashes = null;\r\n  this.auth = null;\r\n  this.host = null;\r\n  this.port = null;\r\n  this.hostname = null;\r\n  this.hash = null;\r\n  this.search = null;\r\n  this.query = null;\r\n  this.pathname = null;\r\n  this.path = null;\r\n  this.href = null;\r\n}\r\n\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n\r\n// define these here so at least they only have to be\r\n// compiled once on the first module load.\r\nconst protocolPattern = /^[a-z0-9.+-]+:/i;\r\nconst portPattern = /:[0-9]*$/;\r\nconst hostPattern = /^\\/\\/[^@/]+@[^@/]+/;\r\n\r\n// Special case for a simple path URL\r\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/;\r\n\r\nconst hostnameMaxLen = 255;\r\nconst {\r\n  CHAR_SPACE,\r\n  CHAR_TAB,\r\n  CHAR_CARRIAGE_RETURN,\r\n  CHAR_LINE_FEED,\r\n  CHAR_NO_BREAK_SPACE,\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE,\r\n  CHAR_HASH,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LEFT_SQUARE_BRACKET,\r\n  CHAR_RIGHT_SQUARE_BRACKET,\r\n  CHAR_LEFT_ANGLE_BRACKET,\r\n  CHAR_RIGHT_ANGLE_BRACKET,\r\n  CHAR_LEFT_CURLY_BRACKET,\r\n  CHAR_RIGHT_CURLY_BRACKET,\r\n  CHAR_QUESTION_MARK,\r\n  CHAR_DOUBLE_QUOTE,\r\n  CHAR_SINGLE_QUOTE,\r\n  CHAR_PERCENT,\r\n  CHAR_SEMICOLON,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_CIRCUMFLEX_ACCENT,\r\n  CHAR_GRAVE_ACCENT,\r\n  CHAR_VERTICAL_LINE,\r\n  CHAR_AT,\r\n  CHAR_COLON,\r\n} = require('internal/constants');\r\n\r\nlet urlParseWarned = false;\r\n\r\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\r\n  if (!urlParseWarned && getOptionValue('--pending-deprecation')) {\r\n    urlParseWarned = true;\r\n    process.emitWarning(\r\n      '`url.parse()` behavior is not standardized and prone to ' +\r\n      'errors that have security implications. Use the WHATWG URL API ' +\r\n      'instead. CVEs are not issued for `url.parse()` vulnerabilities.',\r\n      'DeprecationWarning',\r\n      'DEP0169',\r\n    );\r\n  }\r\n\r\n  if (url instanceof Url) return url;\r\n\r\n  const urlObject = new Url();\r\n  urlObject.parse(url, parseQueryString, slashesDenoteHost);\r\n  return urlObject;\r\n}\r\n\r\nfunction isIpv6Hostname(hostname) {\r\n  return (\r\n    StringPrototypeCharCodeAt(hostname, 0) === CHAR_LEFT_SQUARE_BRACKET &&\r\n    StringPrototypeCharCodeAt(hostname, hostname.length - 1) ===\r\n    CHAR_RIGHT_SQUARE_BRACKET\r\n  );\r\n}\r\n\r\n// This prevents some common spoofing bugs due to our use of IDNA toASCII. For\r\n// compatibility, the set of characters we use here is the *intersection* of\r\n// \"forbidden host code point\" in the WHATWG URL Standard [1] and the\r\n// characters in the host parsing loop in Url.prototype.parse, with the\r\n// following additions:\r\n//\r\n// - ':' since this could cause a \"protocol spoofing\" bug\r\n// - '@' since this could cause parts of the hostname to be confused with auth\r\n// - '[' and ']' since this could cause a non-IPv6 hostname to be interpreted\r\n//   as IPv6 by isIpv6Hostname above\r\n//\r\n// [1]: https://url.spec.whatwg.org/#forbidden-host-code-point\r\nconst forbiddenHostChars = /[\\0\\t\\n\\r #%/:<>?@[\\\\\\]^|]/;\r\n// For IPv6, permit '[', ']', and ':'.\r\nconst forbiddenHostCharsIpv6 = /[\\0\\t\\n\\r #%/<>?@\\\\^|]/;\r\n\r\nUrl.prototype.parse = function parse(url, parseQueryString, slashesDenoteHost) {\r\n  validateString(url, 'url');\r\n\r\n  // Copy chrome, IE, opera backslash-handling behavior.\r\n  // Back slashes before the query string get converted to forward slashes\r\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\r\n  let hasHash = false;\r\n  let hasAt = false;\r\n  let start = -1;\r\n  let end = -1;\r\n  let rest = '';\r\n  let lastPos = 0;\r\n  for (let i = 0, inWs = false, split = false; i < url.length; ++i) {\r\n    const code = url.charCodeAt(i);\r\n\r\n    // Find first and last non-whitespace characters for trimming\r\n    const isWs = code < 33 ||\r\n                 code === CHAR_NO_BREAK_SPACE ||\r\n                 code === CHAR_ZERO_WIDTH_NOBREAK_SPACE;\r\n    if (start === -1) {\r\n      if (isWs)\r\n        continue;\r\n      lastPos = start = i;\r\n    } else if (inWs) {\r\n      if (!isWs) {\r\n        end = -1;\r\n        inWs = false;\r\n      }\r\n    } else if (isWs) {\r\n      end = i;\r\n      inWs = true;\r\n    }\r\n\r\n    // Only convert backslashes while we haven't seen a split character\r\n    if (!split) {\r\n      switch (code) {\r\n        case CHAR_AT:\r\n          hasAt = true;\r\n          break;\r\n        case CHAR_HASH:\r\n          hasHash = true;\r\n        // Fall through\r\n        case CHAR_QUESTION_MARK:\r\n          split = true;\r\n          break;\r\n        case CHAR_BACKWARD_SLASH:\r\n          if (i - lastPos > 0)\r\n            rest += url.slice(lastPos, i);\r\n          rest += '/';\r\n          lastPos = i + 1;\r\n          break;\r\n      }\r\n    } else if (!hasHash && code === CHAR_HASH) {\r\n      hasHash = true;\r\n    }\r\n  }\r\n\r\n  // Check if string was non-empty (including strings with only whitespace)\r\n  if (start !== -1) {\r\n    if (lastPos === start) {\r\n      // We didn't convert any backslashes\r\n\r\n      if (end === -1) {\r\n        if (start === 0)\r\n          rest = url;\r\n        else\r\n          rest = url.slice(start);\r\n      } else {\r\n        rest = url.slice(start, end);\r\n      }\r\n    } else if (end === -1 && lastPos < url.length) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos);\r\n    } else if (end !== -1 && lastPos < end) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos, end);\r\n    }\r\n  }\r\n\r\n  if (!slashesDenoteHost && !hasHash && !hasAt) {\r\n    // Try fast path regexp\r\n    const simplePath = simplePathPattern.exec(rest);\r\n    if (simplePath) {\r\n      this.path = rest;\r\n      this.href = rest;\r\n      this.pathname = simplePath[1];\r\n      if (simplePath[2]) {\r\n        this.search = simplePath[2];\r\n        if (parseQueryString) {\r\n          this.query = querystring.parse(this.search.slice(1));\r\n        } else {\r\n          this.query = this.search.slice(1);\r\n        }\r\n      } else if (parseQueryString) {\r\n        this.search = null;\r\n        this.query = { __proto__: null };\r\n      }\r\n      return this;\r\n    }\r\n  }\r\n\r\n  let proto = protocolPattern.exec(rest);\r\n  let lowerProto;\r\n  if (proto) {\r\n    proto = proto[0];\r\n    lowerProto = proto.toLowerCase();\r\n    this.protocol = lowerProto;\r\n    rest = rest.slice(proto.length);\r\n  }\r\n\r\n  // Figure out if it's got a host\r\n  // user@server is *always* interpreted as a hostname, and url\r\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n  // how the browser resolves relative URLs.\r\n  let slashes;\r\n  if (slashesDenoteHost || proto || hostPattern.test(rest)) {\r\n    slashes = rest.charCodeAt(0) === CHAR_FORWARD_SLASH &&\r\n              rest.charCodeAt(1) === CHAR_FORWARD_SLASH;\r\n    if (slashes && !(proto && hostlessProtocol.has(lowerProto))) {\r\n      rest = rest.slice(2);\r\n      this.slashes = true;\r\n    }\r\n  }\r\n\r\n  if (!hostlessProtocol.has(lowerProto) &&\r\n      (slashes || (proto && !slashedProtocol.has(proto)))) {\r\n\r\n    // there's a hostname.\r\n    // the first instance of /, ?, ;, or # ends the host.\r\n    //\r\n    // If there is an @ in the hostname, then non-host chars *are* allowed\r\n    // to the left of the last @ sign, unless some host-ending character\r\n    // comes *before* the @-sign.\r\n    // URLs are obnoxious.\r\n    //\r\n    // ex:\r\n    // http://a@b@c/ => user:a@b host:c\r\n    // http://a@b?@c => user:a host:b path:/?@c\r\n\r\n    let hostEnd = -1;\r\n    let atSign = -1;\r\n    let nonHost = -1;\r\n    for (let i = 0; i < rest.length; ++i) {\r\n      switch (rest.charCodeAt(i)) {\r\n        case CHAR_TAB:\r\n        case CHAR_LINE_FEED:\r\n        case CHAR_CARRIAGE_RETURN:\r\n          // WHATWG URL removes tabs, newlines, and carriage returns. Let's do that too.\r\n          rest = rest.slice(0, i) + rest.slice(i + 1);\r\n          i -= 1;\r\n          break;\r\n        case CHAR_SPACE:\r\n        case CHAR_DOUBLE_QUOTE:\r\n        case CHAR_PERCENT:\r\n        case CHAR_SINGLE_QUOTE:\r\n        case CHAR_SEMICOLON:\r\n        case CHAR_LEFT_ANGLE_BRACKET:\r\n        case CHAR_RIGHT_ANGLE_BRACKET:\r\n        case CHAR_BACKWARD_SLASH:\r\n        case CHAR_CIRCUMFLEX_ACCENT:\r\n        case CHAR_GRAVE_ACCENT:\r\n        case CHAR_LEFT_CURLY_BRACKET:\r\n        case CHAR_VERTICAL_LINE:\r\n        case CHAR_RIGHT_CURLY_BRACKET:\r\n          // Characters that are never ever allowed in a hostname from RFC 2396\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          break;\r\n        case CHAR_HASH:\r\n        case CHAR_FORWARD_SLASH:\r\n        case CHAR_QUESTION_MARK:\r\n          // Find the first instance of any host-ending characters\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          hostEnd = i;\r\n          break;\r\n        case CHAR_AT:\r\n          // At this point, either we have an explicit point where the\r\n          // auth portion cannot go past, or the last @ char is the decider.\r\n          atSign = i;\r\n          nonHost = -1;\r\n          break;\r\n      }\r\n      if (hostEnd !== -1)\r\n        break;\r\n    }\r\n    start = 0;\r\n    if (atSign !== -1) {\r\n      this.auth = decodeURIComponent(rest.slice(0, atSign));\r\n      start = atSign + 1;\r\n    }\r\n    if (nonHost === -1) {\r\n      this.host = rest.slice(start);\r\n      rest = '';\r\n    } else {\r\n      this.host = rest.slice(start, nonHost);\r\n      rest = rest.slice(nonHost);\r\n    }\r\n\r\n    // pull out port.\r\n    this.parseHost();\r\n\r\n    // We've indicated that there is a hostname,\r\n    // so even if it's empty, it has to be present.\r\n    if (typeof this.hostname !== 'string')\r\n      this.hostname = '';\r\n\r\n    const hostname = this.hostname;\r\n\r\n    // If hostname begins with [ and ends with ]\r\n    // assume that it's an IPv6 address.\r\n    const ipv6Hostname = isIpv6Hostname(hostname);\r\n\r\n    // validate a little.\r\n    if (!ipv6Hostname) {\r\n      rest = getHostname(this, rest, hostname, url);\r\n    }\r\n\r\n    if (this.hostname.length > hostnameMaxLen) {\r\n      this.hostname = '';\r\n    } else {\r\n      // Hostnames are always lower case.\r\n      this.hostname = this.hostname.toLowerCase();\r\n    }\r\n\r\n    if (this.hostname !== '') {\r\n      if (ipv6Hostname) {\r\n        if (forbiddenHostCharsIpv6.test(this.hostname)) {\r\n          throw new ERR_INVALID_URL(url);\r\n        }\r\n      } else {\r\n        // IDNA Support: Returns a punycoded representation of \"domain\".\r\n        // It only converts parts of the domain name that\r\n        // have non-ASCII characters, i.e. it doesn't matter if\r\n        // you call it with a domain that already is ASCII-only.\r\n        this.hostname = toASCII(this.hostname);\r\n\r\n        // Prevent two potential routes of hostname spoofing.\r\n        // 1. If this.hostname is empty, it must have become empty due to toASCII\r\n        //    since we checked this.hostname above.\r\n        // 2. If any of forbiddenHostChars appears in this.hostname, it must have\r\n        //    also gotten in due to toASCII. This is since getHostname would have\r\n        //    filtered them out otherwise.\r\n        // Rather than trying to correct this by moving the non-host part into\r\n        // the pathname as we've done in getHostname, throw an exception to\r\n        // convey the severity of this issue.\r\n        if (this.hostname === '' || forbiddenHostChars.test(this.hostname)) {\r\n          throw new ERR_INVALID_URL(url);\r\n        }\r\n      }\r\n    }\r\n\r\n    const p = this.port ? ':' + this.port : '';\r\n    const h = this.hostname || '';\r\n    this.host = h + p;\r\n\r\n    // strip [ and ] from the hostname\r\n    // the host field still retains them, though\r\n    if (ipv6Hostname) {\r\n      this.hostname = this.hostname.slice(1, -1);\r\n      if (rest[0] !== '/') {\r\n        rest = '/' + rest;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Now rest is set to the post-host stuff.\r\n  // Chop off any delim chars.\r\n  if (!unsafeProtocol.has(lowerProto)) {\r\n    // First, make 100% sure that any \"autoEscape\" chars get\r\n    // escaped, even if encodeURIComponent doesn't think they\r\n    // need to be.\r\n    rest = autoEscapeStr(rest);\r\n  }\r\n\r\n  let questionIdx = -1;\r\n  let hashIdx = -1;\r\n  for (let i = 0; i < rest.length; ++i) {\r\n    const code = rest.charCodeAt(i);\r\n    if (code === CHAR_HASH) {\r\n      this.hash = rest.slice(i);\r\n      hashIdx = i;\r\n      break;\r\n    } else if (code === CHAR_QUESTION_MARK && questionIdx === -1) {\r\n      questionIdx = i;\r\n    }\r\n  }\r\n\r\n  if (questionIdx !== -1) {\r\n    if (hashIdx === -1) {\r\n      this.search = rest.slice(questionIdx);\r\n      this.query = rest.slice(questionIdx + 1);\r\n    } else {\r\n      this.search = rest.slice(questionIdx, hashIdx);\r\n      this.query = rest.slice(questionIdx + 1, hashIdx);\r\n    }\r\n    if (parseQueryString) {\r\n      this.query = querystring.parse(this.query);\r\n    }\r\n  } else if (parseQueryString) {\r\n    // No query string, but parseQueryString still requested\r\n    this.search = null;\r\n    this.query = { __proto__: null };\r\n  }\r\n\r\n  const useQuestionIdx =\r\n    questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx);\r\n  const firstIdx = useQuestionIdx ? questionIdx : hashIdx;\r\n  if (firstIdx === -1) {\r\n    if (rest.length > 0)\r\n      this.pathname = rest;\r\n  } else if (firstIdx > 0) {\r\n    this.pathname = rest.slice(0, firstIdx);\r\n  }\r\n  if (slashedProtocol.has(lowerProto) &&\r\n      this.hostname && !this.pathname) {\r\n    this.pathname = '/';\r\n  }\r\n\r\n  // To support http.request\r\n  if (this.pathname || this.search) {\r\n    const p = this.pathname || '';\r\n    const s = this.search || '';\r\n    this.path = p + s;\r\n  }\r\n\r\n  // Finally, reconstruct the href based on what has been validated.\r\n  this.href = this.format();\r\n  return this;\r\n};\r\n\r\nlet warnInvalidPort = true;\r\nfunction getHostname(self, rest, hostname, url) {\r\n  for (let i = 0; i < hostname.length; ++i) {\r\n    const code = hostname.charCodeAt(i);\r\n    const isValid = (code !== CHAR_FORWARD_SLASH &&\r\n                     code !== CHAR_BACKWARD_SLASH &&\r\n                     code !== CHAR_HASH &&\r\n                     code !== CHAR_QUESTION_MARK &&\r\n                     code !== CHAR_COLON);\r\n\r\n    if (!isValid) {\r\n      // If leftover starts with :, then it represents an invalid port.\r\n      // But url.parse() is lenient about it for now.\r\n      // Issue a warning and continue.\r\n      if (warnInvalidPort && code === CHAR_COLON) {\r\n        const detail = `The URL ${url} is invalid. Future versions of Node.js will throw an error.`;\r\n        process.emitWarning(detail, 'DeprecationWarning', 'DEP0170');\r\n        warnInvalidPort = false;\r\n      }\r\n      self.hostname = hostname.slice(0, i);\r\n      return `/${hostname.slice(i)}${rest}`;\r\n    }\r\n  }\r\n  return rest;\r\n}\r\n\r\n// Escaped characters. Use empty strings to fill up unused entries.\r\n// Using Array is faster than Object/Map\r\nconst escapedCodes = [\r\n  /* 0 - 9 */ '', '', '', '', '', '', '', '', '', '%09',\r\n  /* 10 - 19 */ '%0A', '', '', '%0D', '', '', '', '', '', '',\r\n  /* 20 - 29 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 30 - 39 */ '', '', '%20', '', '%22', '', '', '', '', '%27',\r\n  /* 40 - 49 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 50 - 59 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 60 - 69 */ '%3C', '', '%3E', '', '', '', '', '', '', '',\r\n  /* 70 - 79 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 80 - 89 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 90 - 99 */ '', '', '%5C', '', '%5E', '', '%60', '', '', '',\r\n  /* 100 - 109 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 110 - 119 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 120 - 125 */ '', '', '', '%7B', '%7C', '%7D',\r\n];\r\n\r\n// Automatically escape all delimiters and unwise characters from RFC 2396.\r\n// Also escape single quotes in case of an XSS attack.\r\n// Return the escaped string.\r\nfunction autoEscapeStr(rest) {\r\n  let escaped = '';\r\n  let lastEscapedPos = 0;\r\n  for (let i = 0; i < rest.length; ++i) {\r\n    // `escaped` contains substring up to the last escaped character.\r\n    const escapedChar = escapedCodes[rest.charCodeAt(i)];\r\n    if (escapedChar) {\r\n      // Concat if there are ordinary characters in the middle.\r\n      if (i > lastEscapedPos)\r\n        escaped += rest.slice(lastEscapedPos, i);\r\n      escaped += escapedChar;\r\n      lastEscapedPos = i + 1;\r\n    }\r\n  }\r\n  if (lastEscapedPos === 0)  // Nothing has been escaped.\r\n    return rest;\r\n\r\n  // There are ordinary characters at the end.\r\n  if (lastEscapedPos < rest.length)\r\n    escaped += rest.slice(lastEscapedPos);\r\n\r\n  return escaped;\r\n}\r\n\r\n// Format a parsed object into a url string\r\nfunction urlFormat(urlObject, options) {\r\n  // Ensure it's an object, and not a string url.\r\n  // If it's an object, this is a no-op.\r\n  // this way, you can call urlParse() on strings\r\n  // to clean up potentially wonky urls.\r\n  if (typeof urlObject === 'string') {\r\n    urlObject = urlParse(urlObject);\r\n  } else if (typeof urlObject !== 'object' || urlObject === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('urlObject',\r\n                                   ['Object', 'string'], urlObject);\r\n  } else if (urlObject instanceof URL) {\r\n    let fragment = true;\r\n    let unicode = false;\r\n    let search = true;\r\n    let auth = true;\r\n\r\n    if (options) {\r\n      validateObject(options, 'options');\r\n\r\n      if (options.fragment != null) {\r\n        fragment = Boolean(options.fragment);\r\n      }\r\n\r\n      if (options.unicode != null) {\r\n        unicode = Boolean(options.unicode);\r\n      }\r\n\r\n      if (options.search != null) {\r\n        search = Boolean(options.search);\r\n      }\r\n\r\n      if (options.auth != null) {\r\n        auth = Boolean(options.auth);\r\n      }\r\n    }\r\n\r\n    return bindingUrl.format(urlObject.href, fragment, unicode, search, auth);\r\n  }\r\n\r\n  return Url.prototype.format.call(urlObject);\r\n}\r\n\r\n// These characters do not need escaping:\r\n// ! - . _ ~\r\n// ' ( ) * :\r\n// digits\r\n// alpha (uppercase)\r\n// alpha (lowercase)\r\nconst noEscapeAuth = new Int8Array([\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, // 0x70 - 0x7F\r\n]);\r\n\r\nUrl.prototype.format = function format() {\r\n  let auth = this.auth || '';\r\n  if (auth) {\r\n    auth = encodeStr(auth, noEscapeAuth, hexTable);\r\n    auth += '@';\r\n  }\r\n\r\n  let protocol = this.protocol || '';\r\n  let pathname = this.pathname || '';\r\n  let hash = this.hash || '';\r\n  let host = '';\r\n  let query = '';\r\n\r\n  if (this.host) {\r\n    host = auth + this.host;\r\n  } else if (this.hostname) {\r\n    host = auth + (\r\n      this.hostname.includes(':') && !isIpv6Hostname(this.hostname) ?\r\n        '[' + this.hostname + ']' :\r\n        this.hostname\r\n    );\r\n    if (this.port) {\r\n      host += ':' + this.port;\r\n    }\r\n  }\r\n\r\n  if (this.query !== null && typeof this.query === 'object') {\r\n    query = querystring.stringify(this.query);\r\n  }\r\n\r\n  let search = this.search || (query && ('?' + query)) || '';\r\n\r\n  if (protocol && protocol.charCodeAt(protocol.length - 1) !== 58/* : */)\r\n    protocol += ':';\r\n\r\n  let newPathname = '';\r\n  let lastPos = 0;\r\n  for (let i = 0; i < pathname.length; ++i) {\r\n    switch (pathname.charCodeAt(i)) {\r\n      case CHAR_HASH:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%23';\r\n        lastPos = i + 1;\r\n        break;\r\n      case CHAR_QUESTION_MARK:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%3F';\r\n        lastPos = i + 1;\r\n        break;\r\n    }\r\n  }\r\n  if (lastPos > 0) {\r\n    if (lastPos !== pathname.length)\r\n      pathname = newPathname + pathname.slice(lastPos);\r\n    else\r\n      pathname = newPathname;\r\n  }\r\n\r\n  // Only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n  // unless they had them to begin with.\r\n  if (this.slashes || slashedProtocol.has(protocol)) {\r\n    if (this.slashes || host) {\r\n      if (pathname && pathname.charCodeAt(0) !== CHAR_FORWARD_SLASH)\r\n        pathname = '/' + pathname;\r\n      host = '//' + host;\r\n    } else if (protocol.length >= 4 &&\r\n               protocol.charCodeAt(0) === 102/* f */ &&\r\n               protocol.charCodeAt(1) === 105/* i */ &&\r\n               protocol.charCodeAt(2) === 108/* l */ &&\r\n               protocol.charCodeAt(3) === 101/* e */) {\r\n      host = '//';\r\n    }\r\n  }\r\n\r\n  search = search.replace(/#/g, '%23');\r\n\r\n  if (hash && hash.charCodeAt(0) !== CHAR_HASH)\r\n    hash = '#' + hash;\r\n  if (search && search.charCodeAt(0) !== CHAR_QUESTION_MARK)\r\n    search = '?' + search;\r\n\r\n  return protocol + host + pathname + search + hash;\r\n};\r\n\r\nfunction urlResolve(source, relative) {\r\n  return urlParse(source, false, true).resolve(relative);\r\n}\r\n\r\nUrl.prototype.resolve = function resolve(relative) {\r\n  return this.resolveObject(urlParse(relative, false, true)).format();\r\n};\r\n\r\nfunction urlResolveObject(source, relative) {\r\n  if (!source) return relative;\r\n  return urlParse(source, false, true).resolveObject(relative);\r\n}\r\n\r\nUrl.prototype.resolveObject = function resolveObject(relative) {\r\n  if (typeof relative === 'string') {\r\n    const rel = new Url();\r\n    rel.parse(relative, false, true);\r\n    relative = rel;\r\n  }\r\n\r\n  const result = new Url();\r\n  const tkeys = ObjectKeys(this);\r\n  for (let tk = 0; tk < tkeys.length; tk++) {\r\n    const tkey = tkeys[tk];\r\n    result[tkey] = this[tkey];\r\n  }\r\n\r\n  // Hash is always overridden, no matter what.\r\n  // even href=\"\" will remove it.\r\n  result.hash = relative.hash;\r\n\r\n  // If the relative url is empty, then there's nothing left to do here.\r\n  if (relative.href === '') {\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // Hrefs like //foo/bar always cut to the protocol.\r\n  if (relative.slashes && !relative.protocol) {\r\n    // Take everything except the protocol from relative\r\n    const rkeys = ObjectKeys(relative);\r\n    for (let rk = 0; rk < rkeys.length; rk++) {\r\n      const rkey = rkeys[rk];\r\n      if (rkey !== 'protocol')\r\n        result[rkey] = relative[rkey];\r\n    }\r\n\r\n    // urlParse appends trailing / to urls like http://www.example.com\r\n    if (slashedProtocol.has(result.protocol) &&\r\n        result.hostname && !result.pathname) {\r\n      result.path = result.pathname = '/';\r\n    }\r\n\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (relative.protocol && relative.protocol !== result.protocol) {\r\n    // If it's a known url protocol, then changing\r\n    // the protocol does weird things\r\n    // first, if it's not file:, then we MUST have a host,\r\n    // and if there was a path\r\n    // to begin with, then we MUST have a path.\r\n    // if it is file:, then the host is dropped,\r\n    // because that's known to be hostless.\r\n    // anything else is assumed to be absolute.\r\n    if (!slashedProtocol.has(relative.protocol)) {\r\n      const keys = ObjectKeys(relative);\r\n      for (let v = 0; v < keys.length; v++) {\r\n        const k = keys[v];\r\n        result[k] = relative[k];\r\n      }\r\n      result.href = result.format();\r\n      return result;\r\n    }\r\n\r\n    result.protocol = relative.protocol;\r\n    if (!relative.host &&\r\n        !/^file:?$/.test(relative.protocol) &&\r\n        !hostlessProtocol.has(relative.protocol)) {\r\n      const relPath = (relative.pathname || '').split('/');\r\n      while (relPath.length && !(relative.host = relPath.shift()));\r\n      if (!relative.host) relative.host = '';\r\n      if (!relative.hostname) relative.hostname = '';\r\n      if (relPath[0] !== '') relPath.unshift('');\r\n      if (relPath.length < 2) relPath.unshift('');\r\n      result.pathname = relPath.join('/');\r\n    } else {\r\n      result.pathname = relative.pathname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    result.host = relative.host || '';\r\n    result.auth = relative.auth;\r\n    result.hostname = relative.hostname || relative.host;\r\n    result.port = relative.port;\r\n    // To support http.request\r\n    if (result.pathname || result.search) {\r\n      const p = result.pathname || '';\r\n      const s = result.search || '';\r\n      result.path = p + s;\r\n    }\r\n    result.slashes = result.slashes || relative.slashes;\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  const isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/');\r\n  const isRelAbs = (\r\n    relative.host || (relative.pathname && relative.pathname.charAt(0) === '/')\r\n  );\r\n  let mustEndAbs = (isRelAbs || isSourceAbs ||\r\n                    (result.host && relative.pathname));\r\n  const removeAllDots = mustEndAbs;\r\n  let srcPath = (result.pathname && result.pathname.split('/')) || [];\r\n  const relPath = (relative.pathname && relative.pathname.split('/')) || [];\r\n  const noLeadingSlashes = result.protocol &&\r\n      !slashedProtocol.has(result.protocol);\r\n\r\n  // If the url is a non-slashed url, then relative\r\n  // links like ../.. should be able\r\n  // to crawl up to the hostname, as well.  This is strange.\r\n  // result.protocol has already been set by now.\r\n  // Later on, put the first path part into the host field.\r\n  if (noLeadingSlashes) {\r\n    result.hostname = '';\r\n    result.port = null;\r\n    if (result.host) {\r\n      if (srcPath[0] === '') srcPath[0] = result.host;\r\n      else srcPath.unshift(result.host);\r\n    }\r\n    result.host = '';\r\n    if (relative.protocol) {\r\n      relative.hostname = null;\r\n      relative.port = null;\r\n      result.auth = null;\r\n      if (relative.host) {\r\n        if (relPath[0] === '') relPath[0] = relative.host;\r\n        else relPath.unshift(relative.host);\r\n      }\r\n      relative.host = null;\r\n    }\r\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\r\n  }\r\n\r\n  if (isRelAbs) {\r\n    // it's absolute.\r\n    if (relative.host || relative.host === '') {\r\n      if (result.host !== relative.host) result.auth = null;\r\n      result.host = relative.host;\r\n      result.port = relative.port;\r\n    }\r\n    if (relative.hostname || relative.hostname === '') {\r\n      if (result.hostname !== relative.hostname) result.auth = null;\r\n      result.hostname = relative.hostname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    srcPath = relPath;\r\n    // Fall through to the dot-handling below.\r\n  } else if (relPath.length) {\r\n    // it's relative\r\n    // throw away the existing file, and take the new path instead.\r\n    if (!srcPath) srcPath = [];\r\n    srcPath.pop();\r\n    srcPath = srcPath.concat(relPath);\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n  } else if (relative.search !== null && relative.search !== undefined) {\r\n    // Just pull out the search.\r\n    // like href='?foo'.\r\n    // Put this after the other two cases because it simplifies the booleans\r\n    if (noLeadingSlashes) {\r\n      result.hostname = result.host = srcPath.shift();\r\n      // Occasionally the auth can get stuck only in host.\r\n      // This especially happens in cases like\r\n      // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n      const authInHost =\r\n        result.host && result.host.indexOf('@') > 0 && result.host.split('@');\r\n      if (authInHost) {\r\n        result.auth = authInHost.shift();\r\n        result.host = result.hostname = authInHost.shift();\r\n      }\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    // To support http.request\r\n    if (result.pathname !== null || result.search !== null) {\r\n      result.path = (result.pathname ? result.pathname : '') +\r\n                    (result.search ? result.search : '');\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    // No path at all. All other things were already handled above.\r\n    result.pathname = null;\r\n    // To support http.request\r\n    if (result.search) {\r\n      result.path = '/' + result.search;\r\n    } else {\r\n      result.path = null;\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // If a url ENDs in . or .., then it must get a trailing slash.\r\n  // however, if it ends in anything else non-slashy,\r\n  // then it must NOT get a trailing slash.\r\n  let last = srcPath.slice(-1)[0];\r\n  const hasTrailingSlash = (\r\n    ((result.host || relative.host || srcPath.length > 1) &&\r\n    (last === '.' || last === '..')) || last === '');\r\n\r\n  // Strip single dots, resolve double dots to parent dir\r\n  // if the path tries to go above the root, `up` ends up > 0\r\n  let up = 0;\r\n  for (let i = srcPath.length - 1; i >= 0; i--) {\r\n    last = srcPath[i];\r\n    if (last === '.') {\r\n      spliceOne(srcPath, i);\r\n    } else if (last === '..') {\r\n      spliceOne(srcPath, i);\r\n      up++;\r\n    } else if (up) {\r\n      spliceOne(srcPath, i);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  // If the path is allowed to go above the root, restore leading ..s\r\n  if (!mustEndAbs && !removeAllDots) {\r\n    while (up--) {\r\n      srcPath.unshift('..');\r\n    }\r\n  }\r\n\r\n  if (mustEndAbs && srcPath[0] !== '' &&\r\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (hasTrailingSlash && (srcPath.join('/').slice(-1) !== '/')) {\r\n    srcPath.push('');\r\n  }\r\n\r\n  const isAbsolute = srcPath[0] === '' ||\r\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\r\n\r\n  // put the host back\r\n  if (noLeadingSlashes) {\r\n    result.hostname =\r\n      result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\r\n    // Occasionally the auth can get stuck only in host.\r\n    // This especially happens in cases like\r\n    // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n    const authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n      result.host.split('@') : false;\r\n    if (authInHost) {\r\n      result.auth = authInHost.shift();\r\n      result.host = result.hostname = authInHost.shift();\r\n    }\r\n  }\r\n\r\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n\r\n  if (mustEndAbs && !isAbsolute) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    result.pathname = null;\r\n    result.path = null;\r\n  } else {\r\n    result.pathname = srcPath.join('/');\r\n  }\r\n\r\n  // To support request.http\r\n  if (result.pathname !== null || result.search !== null) {\r\n    result.path = (result.pathname ? result.pathname : '') +\r\n                  (result.search ? result.search : '');\r\n  }\r\n  result.auth = relative.auth || result.auth;\r\n  result.slashes = result.slashes || relative.slashes;\r\n  result.href = result.format();\r\n  return result;\r\n};\r\n\r\nUrl.prototype.parseHost = function parseHost() {\r\n  let host = this.host;\r\n  let port = portPattern.exec(host);\r\n  if (port) {\r\n    port = port[0];\r\n    if (port !== ':') {\r\n      this.port = port.slice(1);\r\n    }\r\n    host = host.slice(0, host.length - port.length);\r\n  }\r\n  if (host) this.hostname = host;\r\n};\r\n\r\n// When used internally, we are not obligated to associate TypeError with\r\n// this function, so non-strings can be rejected by underlying implementation.\r\n// Public API has to validate input and throw appropriate error.\r\nfunction pathToFileURL(path, options) {\r\n  validateString(path, 'path');\r\n\r\n  return _pathToFileURL(path, options);\r\n}\r\n\r\nmodule.exports = {\r\n  // Original API\r\n  Url,\r\n  parse: urlParse,\r\n  resolve: urlResolve,\r\n  resolveObject: urlResolveObject,\r\n  format: urlFormat,\r\n\r\n  // WHATWG API\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n\r\n  // Utilities\r\n  pathToFileURL,\r\n  fileURLToPath,\r\n  urlToHttpOptions,\r\n};\r\n"
  },
  "62": {
    "metadata": {
      "scriptId": "62",
      "url": "node:internal/modules/cjs/loader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 1706,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "8e6d5e49e7c1c0410f04d3c87310f28ad8b44c7338f4edafe7ce5b2ab562e592",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 57012,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/cjs/loader"
    },
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ArrayPrototypeFilter,\r\n  ArrayPrototypeIncludes,\r\n  ArrayPrototypeIndexOf,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypePushApply,\r\n  ArrayPrototypeSlice,\r\n  ArrayPrototypeSplice,\r\n  ArrayPrototypeUnshift,\r\n  ArrayPrototypeUnshiftApply,\r\n  Boolean,\r\n  Error,\r\n  JSONParse,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  ObjectGetPrototypeOf,\r\n  ObjectKeys,\r\n  ObjectPrototype,\r\n  ObjectPrototypeHasOwnProperty,\r\n  ObjectSetPrototypeOf,\r\n  Proxy,\r\n  ReflectApply,\r\n  ReflectSet,\r\n  RegExpPrototypeExec,\r\n  SafeMap,\r\n  String,\r\n  StringPrototypeCharAt,\r\n  StringPrototypeCharCodeAt,\r\n  StringPrototypeEndsWith,\r\n  StringPrototypeIndexOf,\r\n  StringPrototypeRepeat,\r\n  StringPrototypeSlice,\r\n  StringPrototypeSplit,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n} = primordials;\r\nconst {\r\n  privateSymbols: {\r\n    module_source_private_symbol,\r\n    module_export_names_private_symbol,\r\n    module_circular_visited_private_symbol,\r\n    module_export_private_symbol,\r\n    module_parent_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n\r\nconst { kEvaluated } = internalBinding('module_wrap');\r\n\r\n// Internal properties for Module instances.\r\n/**\r\n * Cached {@link Module} source string.\r\n */\r\nconst kModuleSource = module_source_private_symbol;\r\n/**\r\n * Cached {@link Module} export names for ESM loader.\r\n */\r\nconst kModuleExportNames = module_export_names_private_symbol;\r\n/**\r\n * {@link Module} circular dependency visited flag.\r\n */\r\nconst kModuleCircularVisited = module_circular_visited_private_symbol;\r\n/**\r\n * {@link Module} export object snapshot for ESM loader.\r\n */\r\nconst kModuleExport = module_export_private_symbol;\r\n/**\r\n * {@link Module} parent module.\r\n */\r\nconst kModuleParent = module_parent_private_symbol;\r\n\r\nconst kIsMainSymbol = Symbol('kIsMainSymbol');\r\nconst kIsCachedByESMLoader = Symbol('kIsCachedByESMLoader');\r\nconst kRequiredModuleSymbol = Symbol('kRequiredModuleSymbol');\r\nconst kIsExecuting = Symbol('kIsExecuting');\r\n// Set first due to cycle with ESM loader functions.\r\nmodule.exports = {\r\n  kModuleSource,\r\n  kModuleExport,\r\n  kModuleExportNames,\r\n  kModuleCircularVisited,\r\n  initializeCJS,\r\n  Module,\r\n  wrapSafe,\r\n  wrapModuleLoad,\r\n  kIsMainSymbol,\r\n  kIsCachedByESMLoader,\r\n  kRequiredModuleSymbol,\r\n  kIsExecuting,\r\n};\r\n\r\nconst { BuiltinModule } = require('internal/bootstrap/realm');\r\nconst {\r\n  maybeCacheSourceMap,\r\n} = require('internal/source_map/source_map_cache');\r\nconst { pathToFileURL, fileURLToPath, isURL } = require('internal/url');\r\nconst {\r\n  pendingDeprecate,\r\n  emitExperimentalWarning,\r\n  kEmptyObject,\r\n  setOwnProperty,\r\n  getLazy,\r\n} = require('internal/util');\r\nconst {\r\n  makeContextifyScript,\r\n  runScriptInThisContext,\r\n} = require('internal/vm');\r\nconst {\r\n  containsModuleSyntax,\r\n  compileFunctionForCJSLoader,\r\n} = internalBinding('contextify');\r\n\r\nconst assert = require('internal/assert');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst { internalModuleStat } = internalBinding('fs');\r\nconst { safeGetenv } = internalBinding('credentials');\r\nconst {\r\n  getCjsConditions,\r\n  initializeCjsConditions,\r\n  loadBuiltinModule,\r\n  makeRequireFunction,\r\n  setHasStartedUserCJSExecution,\r\n  stripBOM,\r\n  toRealPath,\r\n} = require('internal/modules/helpers');\r\nconst packageJsonReader = require('internal/modules/package_json_reader');\r\nconst { getOptionValue, getEmbedderOptions } = require('internal/options');\r\nconst shouldReportRequiredModules = getLazy(() => process.env.WATCH_REPORT_DEPENDENCIES);\r\n\r\nconst permission = require('internal/process/permission');\r\nconst {\r\n  vm_dynamic_import_default_internal,\r\n} = internalBinding('symbols');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_MODULE_SPECIFIER,\r\n    ERR_REQUIRE_CYCLE_MODULE,\r\n    ERR_REQUIRE_ESM,\r\n    ERR_UNKNOWN_BUILTIN_MODULE,\r\n  },\r\n  setArrowMessage,\r\n} = require('internal/errors');\r\nconst { validateString } = require('internal/validators');\r\n\r\nconst {\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON,\r\n  CHAR_DOT,\r\n  CHAR_FORWARD_SLASH,\r\n} = require('internal/constants');\r\n\r\nconst {\r\n  isProxy,\r\n} = require('internal/util/types');\r\n\r\nconst { debuglog, debugWithTimer } = require('internal/util/debuglog');\r\n\r\nlet { startTimer, endTimer } = debugWithTimer('module_timer', (start, end) => {\r\n  startTimer = start;\r\n  endTimer = end;\r\n});\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst relativeResolveCache = { __proto__: null };\r\n\r\nlet requireDepth = 0;\r\nlet isPreloading = false;\r\nlet statCache = null;\r\n\r\n/**\r\n * Internal method to add tracing capabilities for Module._load.\r\n *\r\n * See more {@link Module._load}\r\n */\r\nfunction wrapModuleLoad(request, parent, isMain) {\r\n  const logLabel = `[${parent?.id || ''}] [${request}]`;\r\n  const traceLabel = `require('${request}')`;\r\n\r\n  startTimer(logLabel, traceLabel);\r\n\r\n  try {\r\n    return Module._load(request, parent, isMain);\r\n  } finally {\r\n    endTimer(logLabel, traceLabel);\r\n  }\r\n}\r\n\r\n/**\r\n * Get a path's properties, using an in-memory cache to minimize lookups.\r\n * @param {string} filename Absolute path to the file\r\n */\r\nfunction stat(filename) {\r\n  filename = path.toNamespacedPath(filename);\r\n  if (statCache !== null) {\r\n    const result = statCache.get(filename);\r\n    if (result !== undefined) { return result; }\r\n  }\r\n  const result = internalModuleStat(filename);\r\n  if (statCache !== null && result >= 0) {\r\n    // Only set cache when `internalModuleStat(filename)` succeeds.\r\n    statCache.set(filename, result);\r\n  }\r\n  return result;\r\n}\r\n\r\nlet _stat = stat;\r\nObjectDefineProperty(Module, '_stat', {\r\n  __proto__: null,\r\n  get() { return _stat; },\r\n  set(stat) {\r\n    emitExperimentalWarning('Module._stat');\r\n    _stat = stat;\r\n    return true;\r\n  },\r\n  configurable: true,\r\n});\r\n\r\n/**\r\n * Update the parent's children array with the child module.\r\n * @param {Module} parent Module requiring the children\r\n * @param {Module} child Module being required\r\n * @param {boolean} scan Add the child to the parent's children if not already present\r\n */\r\nfunction updateChildren(parent, child, scan) {\r\n  const children = parent?.children;\r\n  if (children && !(scan && ArrayPrototypeIncludes(children, child))) {\r\n    ArrayPrototypePush(children, child);\r\n  }\r\n}\r\n\r\n/**\r\n * Tell the watch mode that a module was required.\r\n * @param {string} filename Absolute path of the module\r\n */\r\nfunction reportModuleToWatchMode(filename) {\r\n  if (shouldReportRequiredModules() && process.send) {\r\n    process.send({ 'watch:require': [filename] });\r\n  }\r\n}\r\n\r\n/**\r\n * Tell the watch mode that a module was not found.\r\n * @param {string} basePath The absolute path that errored\r\n * @param {string[]} extensions The extensions that were tried\r\n */\r\nfunction reportModuleNotFoundToWatchMode(basePath, extensions) {\r\n  if (shouldReportRequiredModules() && process.send) {\r\n    process.send({ 'watch:require': ArrayPrototypeMap(extensions, (ext) => path.resolve(`${basePath}${ext}`)) });\r\n  }\r\n}\r\n\r\n/**\r\n * Create a new module instance.\r\n * @param {string} id\r\n * @param {Module} parent\r\n */\r\nfunction Module(id = '', parent) {\r\n  this.id = id;\r\n  this.path = path.dirname(id);\r\n  setOwnProperty(this, 'exports', {});\r\n  this[kModuleParent] = parent;\r\n  updateChildren(parent, this, false);\r\n  this.filename = null;\r\n  this.loaded = false;\r\n  this.children = [];\r\n}\r\n\r\n/** @type {Record<string, Module>} */\r\nModule._cache = { __proto__: null };\r\n/** @type {Record<string, string>} */\r\nModule._pathCache = { __proto__: null };\r\n/** @type {Record<string, (module: Module, filename: string) => void>} */\r\nModule._extensions = { __proto__: null };\r\n/** @type {string[]} */\r\nlet modulePaths = [];\r\n/** @type {string[]} */\r\nModule.globalPaths = [];\r\n\r\nlet patched = false;\r\n\r\n/**\r\n * Add the CommonJS wrapper around a module's source code.\r\n * @param {string} script Module source code\r\n */\r\nlet wrap = function(script) { // eslint-disable-line func-style\r\n  return Module.wrapper[0] + script + Module.wrapper[1];\r\n};\r\n\r\nconst wrapper = [\r\n  '(function (exports, require, module, __filename, __dirname) { ',\r\n  '\\n});',\r\n];\r\n\r\nlet wrapperProxy = new Proxy(wrapper, {\r\n  __proto__: null,\r\n\r\n  set(target, property, value, receiver) {\r\n    patched = true;\r\n    return ReflectSet(target, property, value, receiver);\r\n  },\r\n\r\n  defineProperty(target, property, descriptor) {\r\n    patched = true;\r\n    return ObjectDefineProperty(target, property, descriptor);\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Module, 'wrap', {\r\n  __proto__: null,\r\n  get() {\r\n    return wrap;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrap = value;\r\n  },\r\n});\r\n\r\nObjectDefineProperty(Module, 'wrapper', {\r\n  __proto__: null,\r\n  get() {\r\n    return wrapperProxy;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrapperProxy = value;\r\n  },\r\n});\r\n\r\nconst isPreloadingDesc = { get() { return isPreloading; } };\r\nObjectDefineProperty(Module.prototype, 'isPreloading', isPreloadingDesc);\r\nObjectDefineProperty(BuiltinModule.prototype, 'isPreloading', isPreloadingDesc);\r\n\r\n/**\r\n * Get the parent of the current module from our cache.\r\n * @this {Module}\r\n */\r\nfunction getModuleParent() {\r\n  return this[kModuleParent];\r\n}\r\n\r\n/**\r\n * Set the parent of the current module in our cache.\r\n * @this {Module}\r\n * @param {Module} value\r\n */\r\nfunction setModuleParent(value) {\r\n  this[kModuleParent] = value;\r\n}\r\n\r\nlet debug = debuglog('module', (fn) => {\r\n  debug = fn;\r\n});\r\n\r\nObjectDefineProperty(Module.prototype, 'parent', {\r\n  __proto__: null,\r\n  get: pendingDeprecate(\r\n    getModuleParent,\r\n    'module.parent is deprecated due to accuracy issues. Please use ' +\r\n      'require.main to find program entry point instead.',\r\n    'DEP0144',\r\n  ),\r\n  set: pendingDeprecate(\r\n    setModuleParent,\r\n    'module.parent is deprecated due to accuracy issues. Please use ' +\r\n      'require.main to find program entry point instead.',\r\n    'DEP0144',\r\n  ),\r\n});\r\nModule._debug = pendingDeprecate(debug, 'Module._debug is deprecated.', 'DEP0077');\r\nModule.isBuiltin = BuiltinModule.isBuiltin;\r\n\r\n/**\r\n * Prepare to run CommonJS code.\r\n * This function is called during pre-execution, before any user code is run.\r\n */\r\nfunction initializeCJS() {\r\n  // This need to be done at runtime in case --expose-internals is set.\r\n  const builtinModules = BuiltinModule.getCanBeRequiredByUsersWithoutSchemeList();\r\n  Module.builtinModules = ObjectFreeze(builtinModules);\r\n\r\n  initializeCjsConditions();\r\n\r\n  if (!getEmbedderOptions().noGlobalSearchPaths) {\r\n    Module._initPaths();\r\n  }\r\n\r\n  // TODO(joyeecheung): deprecate this in favor of a proper hook?\r\n  Module.runMain =\r\n    require('internal/modules/run_main').executeUserEntryPoint;\r\n\r\n  if (getOptionValue('--experimental-require-module')) {\r\n    emitExperimentalWarning('Support for loading ES Module in require()');\r\n    Module._extensions['.mjs'] = loadESMFromCJS;\r\n  }\r\n}\r\n\r\n// Given a module name, and a list of paths to test, returns the first\r\n// matching file in the following precedence.\r\n//\r\n// require(\"a.<ext>\")\r\n//   -> a.<ext>\r\n//\r\n// require(\"a\")\r\n//   -> a\r\n//   -> a.<ext>\r\n//   -> a/index.<ext>\r\n\r\nlet _readPackage = packageJsonReader.readPackage;\r\nObjectDefineProperty(Module, '_readPackage', {\r\n  __proto__: null,\r\n  get() { return _readPackage; },\r\n  set(readPackage) {\r\n    emitExperimentalWarning('Module._readPackage');\r\n    _readPackage = readPackage;\r\n    return true;\r\n  },\r\n  configurable: true,\r\n});\r\n\r\n/**\r\n * Try to load a specifier as a package.\r\n * @param {string} requestPath The path to what we are trying to load\r\n * @param {string[]} exts File extensions to try appending in order to resolve the file\r\n * @param {boolean} isMain Whether the file is the main entry point of the app\r\n * @param {string} originalPath The specifier passed to `require`\r\n */\r\nfunction tryPackage(requestPath, exts, isMain, originalPath) {\r\n  const { main: pkg, pjsonPath } = _readPackage(requestPath);\r\n\r\n  if (!pkg) {\r\n    return tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n  }\r\n\r\n  const filename = path.resolve(requestPath, pkg);\r\n  let actual = tryFile(filename, isMain) ||\r\n    tryExtensions(filename, exts, isMain) ||\r\n    tryExtensions(path.resolve(filename, 'index'), exts, isMain);\r\n  if (actual === false) {\r\n    actual = tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n    if (!actual) {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const err = new Error(\r\n        `Cannot find module '${filename}'. ` +\r\n        'Please verify that the package.json has a valid \"main\" entry',\r\n      );\r\n      err.code = 'MODULE_NOT_FOUND';\r\n      err.path = pjsonPath;\r\n      err.requestPath = originalPath;\r\n      // TODO(BridgeAR): Add the requireStack as well.\r\n      throw err;\r\n    } else {\r\n      process.emitWarning(\r\n        `Invalid 'main' field in '${pjsonPath}' of '${pkg}'. ` +\r\n          'Please either fix that or report it to the module author',\r\n        'DeprecationWarning',\r\n        'DEP0128',\r\n      );\r\n    }\r\n  }\r\n  return actual;\r\n}\r\n\r\n/**\r\n * Check if the file exists and is not a directory if using `--preserve-symlinks` and `isMain` is false or\r\n * `--preserve-symlinks-main` and `isMain` is true , keep symlinks intact, otherwise resolve to the absolute realpath.\r\n * @param {string} requestPath The path to the file to load.\r\n * @param {boolean} isMain Whether the file is the main module.\r\n */\r\nfunction tryFile(requestPath, isMain) {\r\n  const rc = _stat(requestPath);\r\n  if (rc !== 0) { return; }\r\n  if (getOptionValue(isMain ? '--preserve-symlinks-main' : '--preserve-symlinks')) {\r\n    return path.resolve(requestPath);\r\n  }\r\n  return toRealPath(requestPath);\r\n}\r\n\r\n/**\r\n * Given a path, check if the file exists with any of the set extensions.\r\n * @param {string} basePath The path and filename without extension\r\n * @param {string[]} exts The extensions to try\r\n * @param {boolean} isMain Whether the module is the main module\r\n */\r\nfunction tryExtensions(basePath, exts, isMain) {\r\n  for (let i = 0; i < exts.length; i++) {\r\n    const filename = tryFile(basePath + exts[i], isMain);\r\n\r\n    if (filename) {\r\n      return filename;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Find the longest (possibly multi-dot) extension registered in `Module._extensions`.\r\n * @param {string} filename The filename to find the longest registered extension for.\r\n */\r\nfunction findLongestRegisteredExtension(filename) {\r\n  const name = path.basename(filename);\r\n  let currentExtension;\r\n  let index;\r\n  let startIndex = 0;\r\n  while ((index = StringPrototypeIndexOf(name, '.', startIndex)) !== -1) {\r\n    startIndex = index + 1;\r\n    if (index === 0) { continue; } // Skip dotfiles like .gitignore\r\n    currentExtension = StringPrototypeSlice(name, index);\r\n    if (Module._extensions[currentExtension]) { return currentExtension; }\r\n  }\r\n  return '.js';\r\n}\r\n\r\n/**\r\n * Tries to get the absolute file path of the parent module.\r\n * @param {Module} parent The parent module object.\r\n */\r\nfunction trySelfParentPath(parent) {\r\n  if (!parent) { return false; }\r\n\r\n  if (parent.filename) {\r\n    return parent.filename;\r\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\r\n    try {\r\n      return process.cwd() + path.sep;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Attempt to resolve a module request using the parent module package metadata.\r\n * @param {string} parentPath The path of the parent module\r\n * @param {string} request The module request to resolve\r\n */\r\nfunction trySelf(parentPath, request) {\r\n  if (!parentPath) { return false; }\r\n\r\n  const pkg = packageJsonReader.getNearestParentPackageJSON(parentPath);\r\n  if (pkg?.data.exports === undefined || pkg.data.name === undefined) {\r\n    return false;\r\n  }\r\n\r\n  let expansion;\r\n  if (request === pkg.data.name) {\r\n    expansion = '.';\r\n  } else if (StringPrototypeStartsWith(request, `${pkg.data.name}/`)) {\r\n    expansion = '.' + StringPrototypeSlice(request, pkg.data.name.length);\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const { packageExportsResolve } = require('internal/modules/esm/resolve');\r\n    return finalizeEsmResolution(packageExportsResolve(\r\n      pathToFileURL(pkg.path + '/package.json'), expansion, pkg.data,\r\n      pathToFileURL(parentPath), getCjsConditions()), parentPath, pkg.path);\r\n  } catch (e) {\r\n    if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n      throw createEsmNotFoundErr(request, pkg.path + '/package.json');\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * This only applies to requests of a specific form:\r\n * 1. `name/.*`\r\n * 2. `@scope/name/.*`\r\n */\r\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\r\n\r\n/**\r\n * Resolves the exports for a given module path and request.\r\n * @param {string} nmPath The path to the module.\r\n * @param {string} request The request for the module.\r\n */\r\nfunction resolveExports(nmPath, request) {\r\n  // The implementation's behavior is meant to mirror resolution in ESM.\r\n  const { 1: name, 2: expansion = '' } =\r\n    RegExpPrototypeExec(EXPORTS_PATTERN, request) || kEmptyObject;\r\n  if (!name) { return; }\r\n  const pkgPath = path.resolve(nmPath, name);\r\n  const pkg = _readPackage(pkgPath);\r\n  if (pkg.exists && pkg.exports != null) {\r\n    try {\r\n      const { packageExportsResolve } = require('internal/modules/esm/resolve');\r\n      return finalizeEsmResolution(packageExportsResolve(\r\n        pathToFileURL(pkgPath + '/package.json'), '.' + expansion, pkg, null,\r\n        getCjsConditions()), null, pkgPath);\r\n    } catch (e) {\r\n      if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n        throw createEsmNotFoundErr(request, pkgPath + '/package.json');\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\n// We don't cache this in case user extends the extensions.\r\nfunction getDefaultExtensions() {\r\n  const extensions = ObjectKeys(Module._extensions);\r\n  if (!getOptionValue('--experimental-require-module')) {\r\n    return extensions;\r\n  }\r\n  // If the .mjs extension is added by --experimental-require-module,\r\n  // remove it from the supported default extensions to maintain\r\n  // compatibility.\r\n  // TODO(joyeecheung): allow both .mjs and .cjs?\r\n  return ArrayPrototypeFilter(extensions, (ext) => ext !== '.mjs' || Module._extensions['.mjs'] !== loadESMFromCJS);\r\n}\r\n\r\n/**\r\n * Get the absolute path to a module.\r\n * @param {string} request Relative or absolute file path\r\n * @param {Array<string>} paths Folders to search as file paths\r\n * @param {boolean} isMain Whether the request is the main app entry point\r\n * @returns {string | false}\r\n */\r\nModule._findPath = function(request, paths, isMain) {\r\n  const absoluteRequest = path.isAbsolute(request);\r\n  if (absoluteRequest) {\r\n    paths = [''];\r\n  } else if (!paths || paths.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths, '\\x00');\r\n  const entry = Module._pathCache[cacheKey];\r\n  if (entry) {\r\n    return entry;\r\n  }\r\n\r\n  let exts;\r\n  const trailingSlash = request.length > 0 &&\r\n    (StringPrototypeCharCodeAt(request, request.length - 1) === CHAR_FORWARD_SLASH || (\r\n      StringPrototypeCharCodeAt(request, request.length - 1) === CHAR_DOT &&\r\n      (\r\n        request.length === 1 ||\r\n        StringPrototypeCharCodeAt(request, request.length - 2) === CHAR_FORWARD_SLASH ||\r\n        (StringPrototypeCharCodeAt(request, request.length - 2) === CHAR_DOT && (\r\n          request.length === 2 ||\r\n          StringPrototypeCharCodeAt(request, request.length - 3) === CHAR_FORWARD_SLASH\r\n        ))\r\n      )\r\n    ));\r\n\r\n  const isRelative = StringPrototypeCharCodeAt(request, 0) === CHAR_DOT &&\r\n    (\r\n      request.length === 1 ||\r\n      StringPrototypeCharCodeAt(request, 1) === CHAR_FORWARD_SLASH ||\r\n      (isWindows && StringPrototypeCharCodeAt(request, 1) === CHAR_BACKWARD_SLASH) ||\r\n      (StringPrototypeCharCodeAt(request, 1) === CHAR_DOT && ((\r\n        request.length === 2 ||\r\n        StringPrototypeCharCodeAt(request, 2) === CHAR_FORWARD_SLASH) ||\r\n        (isWindows && StringPrototypeCharCodeAt(request, 2) === CHAR_BACKWARD_SLASH)))\r\n    );\r\n  let insidePath = true;\r\n  if (isRelative) {\r\n    const normalizedRequest = path.normalize(request);\r\n    if (StringPrototypeStartsWith(normalizedRequest, '..')) {\r\n      insidePath = false;\r\n    }\r\n  }\r\n\r\n  // For each path\r\n  for (let i = 0; i < paths.length; i++) {\r\n    // Don't search further if path doesn't exist\r\n    // or doesn't have permission to it\r\n    const curPath = paths[i];\r\n    if (insidePath && curPath &&\r\n      ((permission.isEnabled() && !permission.has('fs.read', curPath)) || _stat(curPath) < 1)\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    if (!absoluteRequest) {\r\n      const exportsResolved = resolveExports(curPath, request);\r\n      if (exportsResolved) {\r\n        return exportsResolved;\r\n      }\r\n    }\r\n\r\n    const basePath = path.resolve(curPath, request);\r\n    let filename;\r\n\r\n    const rc = _stat(basePath);\r\n    if (!trailingSlash) {\r\n      if (rc === 0) {  // File.\r\n        if (!isMain) {\r\n          if (getOptionValue('--preserve-symlinks')) {\r\n            filename = path.resolve(basePath);\r\n          } else {\r\n            filename = toRealPath(basePath);\r\n          }\r\n        } else if (getOptionValue('--preserve-symlinks-main')) {\r\n          // For the main module, we use the --preserve-symlinks-main flag instead\r\n          // mainly for backward compatibility, as the preserveSymlinks flag\r\n          // historically has not applied to the main module.  Most likely this\r\n          // was intended to keep .bin/ binaries working, as following those\r\n          // symlinks is usually required for the imports in the corresponding\r\n          // files to resolve; that said, in some use cases following symlinks\r\n          // causes bigger problems which is why the --preserve-symlinks-main option\r\n          // is needed.\r\n          filename = path.resolve(basePath);\r\n        } else {\r\n          filename = toRealPath(basePath);\r\n        }\r\n      }\r\n\r\n      if (!filename) {\r\n        // Try it with each of the extensions\r\n        if (exts === undefined) {\r\n          exts = getDefaultExtensions();\r\n        }\r\n        filename = tryExtensions(basePath, exts, isMain);\r\n      }\r\n    }\r\n\r\n    if (!filename && rc === 1) {  // Directory.\r\n      // try it with each of the extensions at \"index\"\r\n      if (exts === undefined) {\r\n        exts = getDefaultExtensions();\r\n      }\r\n      filename = tryPackage(basePath, exts, isMain, request);\r\n    }\r\n\r\n    if (filename) {\r\n      Module._pathCache[cacheKey] = filename;\r\n      return filename;\r\n    }\r\n\r\n    const extensions = [''];\r\n    if (exts !== undefined) {\r\n      ArrayPrototypePushApply(extensions, exts);\r\n    }\r\n    reportModuleNotFoundToWatchMode(basePath, extensions);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/** `node_modules` character codes reversed */\r\nconst nmChars = [ 115, 101, 108, 117, 100, 111, 109, 95, 101, 100, 111, 110 ];\r\nconst nmLen = nmChars.length;\r\nif (isWindows) {\r\n  /**\r\n   * Get the paths to the `node_modules` folder for a given path.\r\n   * @param {string} from `__dirname` of the module\r\n   */\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n\r\n    // return root node_modules when path is 'D:\\\\'.\r\n    // path.resolve will make sure from.length >=3 in Windows.\r\n    if (StringPrototypeCharCodeAt(from, from.length - 1) ===\r\n          CHAR_BACKWARD_SLASH &&\r\n        StringPrototypeCharCodeAt(from, from.length - 2) === CHAR_COLON) {\r\n      return [from + 'node_modules'];\r\n    }\r\n\r\n    /** @type {string[]} */\r\n    const paths = [];\r\n    for (let i = from.length - 1, p = 0, last = from.length; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(from, i);\r\n      // The path segment separator check ('\\' and '/') was used to get\r\n      // node_modules path for every path segment.\r\n      // Use colon as an extra condition since we can get node_modules\r\n      // path for drive root like 'C:\\node_modules' and don't need to\r\n      // parse drive name.\r\n      if (code === CHAR_BACKWARD_SLASH ||\r\n          code === CHAR_FORWARD_SLASH ||\r\n          code === CHAR_COLON) {\r\n        if (p !== nmLen) {\r\n          ArrayPrototypePush(\r\n            paths,\r\n            StringPrototypeSlice(from, 0, last) + '\\\\node_modules',\r\n          );\r\n        }\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return paths;\r\n  };\r\n} else { // posix\r\n  /**\r\n   * Get the paths to the `node_modules` folder for a given path.\r\n   * @param {string} from `__dirname` of the module\r\n   */\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n    // Return early not only to avoid unnecessary work, but to *avoid* returning\r\n    // an array of two items for a root: [ '//node_modules', '/node_modules' ]\r\n    if (from === '/') {\r\n      return ['/node_modules'];\r\n    }\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n    /** @type {string[]} */\r\n    const paths = [];\r\n    for (let i = from.length - 1, p = 0, last = from.length; i >= 0; --i) {\r\n      const code = StringPrototypeCharCodeAt(from, i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        if (p !== nmLen) {\r\n          ArrayPrototypePush(\r\n            paths,\r\n            StringPrototypeSlice(from, 0, last) + '/node_modules',\r\n          );\r\n        }\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Append /node_modules to handle root paths.\r\n    ArrayPrototypePush(paths, '/node_modules');\r\n\r\n    return paths;\r\n  };\r\n}\r\n\r\n/**\r\n * Get the paths for module resolution.\r\n * @param {string} request\r\n * @param {Module} parent\r\n */\r\nModule._resolveLookupPaths = function(request, parent) {\r\n  if (BuiltinModule.normalizeRequirableId(request)) {\r\n    debug('looking for %j in []', request);\r\n    return null;\r\n  }\r\n\r\n  // Check for node modules paths.\r\n  if (StringPrototypeCharAt(request, 0) !== '.' ||\r\n      (request.length > 1 &&\r\n      StringPrototypeCharAt(request, 1) !== '.' &&\r\n      StringPrototypeCharAt(request, 1) !== '/' &&\r\n      (!isWindows || StringPrototypeCharAt(request, 1) !== '\\\\'))) {\r\n\r\n    /** @type {string[]} */\r\n    let paths;\r\n    if (parent?.paths?.length) {\r\n      paths = ArrayPrototypeSlice(modulePaths);\r\n      ArrayPrototypeUnshiftApply(paths, parent.paths);\r\n    } else {\r\n      paths = modulePaths;\r\n    }\r\n\r\n    debug('looking for %j in %j', request, paths);\r\n    return paths.length > 0 ? paths : null;\r\n  }\r\n\r\n  // In REPL, parent.filename is null.\r\n  if (!parent || !parent.id || !parent.filename) {\r\n    // Make require('./path/to/foo') work - normally the path is taken\r\n    // from realpath(__filename) but in REPL there is no filename\r\n    const mainPaths = ['.'];\r\n\r\n    debug('looking for %j in %j', request, mainPaths);\r\n    return mainPaths;\r\n  }\r\n\r\n  debug('RELATIVE: requested: %s from parent.id %s', request, parent.id);\r\n\r\n  const parentDir = [path.dirname(parent.filename)];\r\n  debug('looking for %j', parentDir);\r\n  return parentDir;\r\n};\r\n\r\n/**\r\n * Emits a warning when a non-existent property of module exports is accessed inside a circular dependency.\r\n * @param {string} prop The name of the non-existent property.\r\n */\r\nfunction emitCircularRequireWarning(prop) {\r\n  process.emitWarning(\r\n    `Accessing non-existent property '${String(prop)}' of module exports ` +\r\n    'inside circular dependency',\r\n  );\r\n}\r\n\r\n// A Proxy that can be used as the prototype of a module.exports object and\r\n// warns when non-existent properties are accessed.\r\nconst CircularRequirePrototypeWarningProxy = new Proxy({}, {\r\n  __proto__: null,\r\n\r\n  get(target, prop) {\r\n    // Allow __esModule access in any case because it is used in the output\r\n    // of transpiled code to determine whether something comes from an\r\n    // ES module, and is not used as a regular key of `module.exports`.\r\n    if (prop in target || prop === '__esModule') { return target[prop]; }\r\n    emitCircularRequireWarning(prop);\r\n    return undefined;\r\n  },\r\n\r\n  getOwnPropertyDescriptor(target, prop) {\r\n    if (ObjectPrototypeHasOwnProperty(target, prop) || prop === '__esModule') {\r\n      return ObjectGetOwnPropertyDescriptor(target, prop);\r\n    }\r\n    emitCircularRequireWarning(prop);\r\n    return undefined;\r\n  },\r\n});\r\n\r\n/**\r\n * Returns the exports object for a module that has a circular `require`.\r\n * If the exports object is a plain object, it is wrapped in a proxy that warns\r\n * about circular dependencies.\r\n * @param {Module} module The module instance\r\n */\r\nfunction getExportsForCircularRequire(module) {\r\n  const requiredESM = module[kRequiredModuleSymbol];\r\n  if (requiredESM && requiredESM.getStatus() !== kEvaluated) {\r\n    let message = `Cannot require() ES Module ${module.id} in a cycle.`;\r\n    const parent = module[kModuleParent];\r\n    if (parent) {\r\n      message += ` (from ${parent.filename})`;\r\n    }\r\n    throw new ERR_REQUIRE_CYCLE_MODULE(message);\r\n  }\r\n\r\n  if (module.exports &&\r\n      !isProxy(module.exports) &&\r\n      ObjectGetPrototypeOf(module.exports) === ObjectPrototype &&\r\n      // Exclude transpiled ES6 modules / TypeScript code because those may\r\n      // employ unusual patterns for accessing 'module.exports'. That should\r\n      // be okay because ES6 modules have a different approach to circular\r\n      // dependencies anyway.\r\n      !module.exports.__esModule) {\r\n    // This is later unset once the module is done loading.\r\n    ObjectSetPrototypeOf(\r\n      module.exports, CircularRequirePrototypeWarningProxy);\r\n  }\r\n\r\n  return module.exports;\r\n}\r\n\r\n/**\r\n * Load a module from cache if it exists, otherwise create a new module instance.\r\n * 1. If a module already exists in the cache: return its exports object.\r\n * 2. If the module is native: call\r\n *    `BuiltinModule.prototype.compileForPublicLoader()` and return the exports.\r\n * 3. Otherwise, create a new module for the file and save it to the cache.\r\n *    Then have it load the file contents before returning its exports object.\r\n * @param {string} request Specifier of module to load via `require`\r\n * @param {Module} parent Absolute path of the module importing the child\r\n * @param {boolean} isMain Whether the module is the main entry point\r\n */\r\nModule._load = function(request, parent, isMain) {\r\n  let relResolveCacheIdentifier;\r\n  if (parent) {\r\n    debug('Module._load REQUEST %s parent: %s', request, parent.id);\r\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\r\n    // caching is required to allow cache invalidation without changing the old\r\n    // cache key names.\r\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\r\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\r\n    reportModuleToWatchMode(filename);\r\n    if (filename !== undefined) {\r\n      const cachedModule = Module._cache[filename];\r\n      if (cachedModule !== undefined) {\r\n        updateChildren(parent, cachedModule, true);\r\n        if (!cachedModule.loaded) {\r\n          return getExportsForCircularRequire(cachedModule);\r\n        }\r\n        return cachedModule.exports;\r\n      }\r\n      delete relativeResolveCache[relResolveCacheIdentifier];\r\n    }\r\n  }\r\n\r\n  if (StringPrototypeStartsWith(request, 'node:')) {\r\n    // Slice 'node:' prefix\r\n    const id = StringPrototypeSlice(request, 5);\r\n\r\n    if (!BuiltinModule.canBeRequiredByUsers(id)) {\r\n      throw new ERR_UNKNOWN_BUILTIN_MODULE(request);\r\n    }\r\n\r\n    const module = loadBuiltinModule(id, request);\r\n    return module.exports;\r\n  }\r\n\r\n  const filename = Module._resolveFilename(request, parent, isMain);\r\n  const cachedModule = Module._cache[filename];\r\n  if (cachedModule !== undefined) {\r\n    updateChildren(parent, cachedModule, true);\r\n    if (cachedModule.loaded) {\r\n      return cachedModule.exports;\r\n    }\r\n    // If it's not cached by the ESM loader, the loading request\r\n    // comes from required CJS, and we can consider it a circular\r\n    // dependency when it's cached.\r\n    if (!cachedModule[kIsCachedByESMLoader]) {\r\n      return getExportsForCircularRequire(cachedModule);\r\n    }\r\n    // If it's cached by the ESM loader as a way to indirectly pass\r\n    // the module in to avoid creating it twice, the loading request\r\n    // came from imported CJS. In that case use the kModuleCircularVisited\r\n    // to determine if it's loading or not.\r\n    if (cachedModule[kModuleCircularVisited]) {\r\n      return getExportsForCircularRequire(cachedModule);\r\n    }\r\n    // This is an ESM loader created cache entry, mark it as visited and fallthrough to loading the module.\r\n    cachedModule[kModuleCircularVisited] = true;\r\n  }\r\n\r\n  if (BuiltinModule.canBeRequiredWithoutScheme(filename)) {\r\n    const mod = loadBuiltinModule(filename, request);\r\n    return mod.exports;\r\n  }\r\n\r\n  // Don't call updateChildren(), Module constructor already does.\r\n  const module = cachedModule || new Module(filename, parent);\r\n\r\n  if (!cachedModule) {\r\n    if (isMain) {\r\n      setOwnProperty(process, 'mainModule', module);\r\n      setOwnProperty(module.require, 'main', process.mainModule);\r\n      module.id = '.';\r\n      module[kIsMainSymbol] = true;\r\n    } else {\r\n      module[kIsMainSymbol] = false;\r\n    }\r\n\r\n    reportModuleToWatchMode(filename);\r\n    Module._cache[filename] = module;\r\n    module[kIsCachedByESMLoader] = false;\r\n  }\r\n\r\n  if (parent !== undefined) {\r\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\r\n  }\r\n\r\n  let threw = true;\r\n  try {\r\n    module.load(filename);\r\n    threw = false;\r\n  } finally {\r\n    if (threw) {\r\n      delete Module._cache[filename];\r\n      if (parent !== undefined) {\r\n        delete relativeResolveCache[relResolveCacheIdentifier];\r\n        const children = parent?.children;\r\n        if (ArrayIsArray(children)) {\r\n          const index = ArrayPrototypeIndexOf(children, module);\r\n          if (index !== -1) {\r\n            ArrayPrototypeSplice(children, index, 1);\r\n          }\r\n        }\r\n      }\r\n    } else if (module.exports &&\r\n               !isProxy(module.exports) &&\r\n               ObjectGetPrototypeOf(module.exports) ===\r\n                 CircularRequirePrototypeWarningProxy) {\r\n      ObjectSetPrototypeOf(module.exports, ObjectPrototype);\r\n    }\r\n  }\r\n\r\n  return module.exports;\r\n};\r\n\r\n/**\r\n * Given a `require` string and its context, get its absolute file path.\r\n * @param {string} request The specifier to resolve\r\n * @param {Module} parent The module containing the `require` call\r\n * @param {boolean} isMain Whether the module is the main entry point\r\n * @param {ResolveFilenameOptions} options Options object\r\n * @typedef {object} ResolveFilenameOptions\r\n * @property {string[]} paths Paths to search for modules in\r\n */\r\nModule._resolveFilename = function(request, parent, isMain, options) {\r\n  if (BuiltinModule.normalizeRequirableId(request)) {\r\n    return request;\r\n  }\r\n\r\n  let paths;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    if (ArrayIsArray(options.paths)) {\r\n      const isRelative = StringPrototypeStartsWith(request, './') ||\r\n          StringPrototypeStartsWith(request, '../') ||\r\n          ((isWindows && StringPrototypeStartsWith(request, '.\\\\')) ||\r\n          StringPrototypeStartsWith(request, '..\\\\'));\r\n\r\n      if (isRelative) {\r\n        paths = options.paths;\r\n      } else {\r\n        const fakeParent = new Module('', null);\r\n\r\n        paths = [];\r\n\r\n        for (let i = 0; i < options.paths.length; i++) {\r\n          const path = options.paths[i];\r\n          fakeParent.paths = Module._nodeModulePaths(path);\r\n          const lookupPaths = Module._resolveLookupPaths(request, fakeParent);\r\n\r\n          for (let j = 0; j < lookupPaths.length; j++) {\r\n            if (!ArrayPrototypeIncludes(paths, lookupPaths[j])) {\r\n              ArrayPrototypePush(paths, lookupPaths[j]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (options.paths === undefined) {\r\n      paths = Module._resolveLookupPaths(request, parent);\r\n    } else {\r\n      throw new ERR_INVALID_ARG_VALUE('options.paths', options.paths);\r\n    }\r\n  } else {\r\n    paths = Module._resolveLookupPaths(request, parent);\r\n  }\r\n\r\n  if (request[0] === '#' && (parent?.filename || parent?.id === '<repl>')) {\r\n    const parentPath = parent?.filename ?? process.cwd() + path.sep;\r\n    const pkg = packageJsonReader.getNearestParentPackageJSON(parentPath) || { __proto__: null };\r\n    if (pkg.data?.imports != null) {\r\n      try {\r\n        const { packageImportsResolve } = require('internal/modules/esm/resolve');\r\n        return finalizeEsmResolution(\r\n          packageImportsResolve(request, pathToFileURL(parentPath),\r\n                                getCjsConditions()), parentPath,\r\n          pkg.path);\r\n      } catch (e) {\r\n        if (e.code === 'ERR_MODULE_NOT_FOUND') {\r\n          throw createEsmNotFoundErr(request);\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Try module self resolution first\r\n  const parentPath = trySelfParentPath(parent);\r\n  const selfResolved = trySelf(parentPath, request);\r\n  if (selfResolved) {\r\n    const cacheKey = request + '\\x00' +\r\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths, '\\x00'));\r\n    Module._pathCache[cacheKey] = selfResolved;\r\n    return selfResolved;\r\n  }\r\n\r\n  // Look up the filename first, since that's the cache key.\r\n  const filename = Module._findPath(request, paths, isMain);\r\n  if (filename) { return filename; }\r\n  const requireStack = [];\r\n  for (let cursor = parent;\r\n    cursor;\r\n    cursor = cursor[kModuleParent]) {\r\n    ArrayPrototypePush(requireStack, cursor.filename || cursor.id);\r\n  }\r\n  let message = `Cannot find module '${request}'`;\r\n  if (requireStack.length > 0) {\r\n    message = message + '\\nRequire stack:\\n- ' +\r\n              ArrayPrototypeJoin(requireStack, '\\n- ');\r\n  }\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  err.code = 'MODULE_NOT_FOUND';\r\n  err.requireStack = requireStack;\r\n  throw err;\r\n};\r\n\r\n/**\r\n * Finishes resolving an ES module specifier into an absolute file path.\r\n * @param {string} resolved The resolved module specifier\r\n * @param {string} parentPath The path of the parent module\r\n * @param {string} pkgPath The path of the package.json file\r\n * @throws {ERR_INVALID_MODULE_SPECIFIER} If the resolved module specifier contains encoded `/` or `\\\\` characters\r\n * @throws {Error} If the module cannot be found\r\n */\r\nfunction finalizeEsmResolution(resolved, parentPath, pkgPath) {\r\n  const { encodedSepRegEx } = require('internal/modules/esm/resolve');\r\n  if (RegExpPrototypeExec(encodedSepRegEx, resolved) !== null) {\r\n    throw new ERR_INVALID_MODULE_SPECIFIER(\r\n      resolved, 'must not include encoded \"/\" or \"\\\\\" characters', parentPath);\r\n  }\r\n  const filename = fileURLToPath(resolved);\r\n  const actual = tryFile(filename);\r\n  if (actual) {\r\n    return actual;\r\n  }\r\n  const err = createEsmNotFoundErr(filename,\r\n                                   path.resolve(pkgPath, 'package.json'));\r\n  throw err;\r\n}\r\n\r\n/**\r\n * Creates an error object for when a requested ES module cannot be found.\r\n * @param {string} request The name of the requested module\r\n * @param {string} [path] The path to the requested module\r\n */\r\nfunction createEsmNotFoundErr(request, path) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(`Cannot find module '${request}'`);\r\n  err.code = 'MODULE_NOT_FOUND';\r\n  if (path) {\r\n    err.path = path;\r\n  }\r\n  // TODO(BridgeAR): Add the requireStack as well.\r\n  return err;\r\n}\r\n\r\n/**\r\n * Given a file name, pass it to the proper extension handler.\r\n * @param {string} filename The `require` specifier\r\n */\r\nModule.prototype.load = function(filename) {\r\n  debug('load %j for module %j', filename, this.id);\r\n\r\n  assert(!this.loaded);\r\n  this.filename = filename;\r\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\r\n\r\n  const extension = findLongestRegisteredExtension(filename);\r\n  // allow .mjs to be overridden\r\n  if (StringPrototypeEndsWith(filename, '.mjs') && !Module._extensions['.mjs']) {\r\n    throw new ERR_REQUIRE_ESM(filename, true);\r\n  }\r\n\r\n  Module._extensions[extension](this, filename);\r\n  this.loaded = true;\r\n\r\n  // Create module entry at load time to snapshot exports correctly\r\n  const exports = this.exports;\r\n  // Preemptively cache for ESM loader.\r\n  this[kModuleExport] = exports;\r\n};\r\n\r\n/**\r\n * Loads a module at the given file path. Returns that module's `exports` property.\r\n * @param {string} id\r\n * @throws {ERR_INVALID_ARG_TYPE} When `id` is not a string\r\n */\r\nModule.prototype.require = function(id) {\r\n  validateString(id, 'id');\r\n  if (id === '') {\r\n    throw new ERR_INVALID_ARG_VALUE('id', id,\r\n                                    'must be a non-empty string');\r\n  }\r\n  requireDepth++;\r\n  try {\r\n    return wrapModuleLoad(id, this, /* isMain */ false);\r\n  } finally {\r\n    requireDepth--;\r\n  }\r\n};\r\n\r\n/**\r\n * Resolved path to `process.argv[1]` will be lazily placed here\r\n * (needed for setting breakpoint when called with `--inspect-brk`).\r\n * @type {string | undefined}\r\n */\r\nlet resolvedArgv;\r\nlet hasPausedEntry = false;\r\n/** @type {import('vm').Script} */\r\n\r\n/**\r\n * Resolve and evaluate it synchronously as ESM if it's ESM.\r\n * @param {Module} mod CJS module instance\r\n * @param {string} filename Absolute path of the file.\r\n */\r\nfunction loadESMFromCJS(mod, filename) {\r\n  const source = getMaybeCachedSource(mod, filename);\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  const isMain = mod[kIsMainSymbol];\r\n  if (isMain) {\r\n    require('internal/modules/run_main').runEntryPointWithESMLoader((cascadedLoader) => {\r\n      const mainURL = pathToFileURL(filename).href;\r\n      cascadedLoader.import(mainURL, undefined, { __proto__: null }, true);\r\n    });\r\n    // ESM won't be accessible via process.mainModule.\r\n    setOwnProperty(process, 'mainModule', undefined);\r\n  } else {\r\n    // TODO(joyeecheung): we may want to invent optional special handling for default exports here.\r\n    // For now, it's good enough to be identical to what `import()` returns.\r\n    mod.exports = cascadedLoader.importSyncForRequire(mod, filename, source, isMain, mod[kModuleParent]);\r\n  }\r\n}\r\n\r\n/**\r\n * Wraps the given content in a script and runs it in a new context.\r\n * @param {string} filename The name of the file being loaded\r\n * @param {string} content The content of the file being loaded\r\n * @param {Module} cjsModuleInstance The CommonJS loader instance\r\n * @param {object} codeCache The SEA code cache\r\n * @param {'commonjs'|undefined} format Intended format of the module.\r\n */\r\nfunction wrapSafe(filename, content, cjsModuleInstance, codeCache, format) {\r\n  assert(format !== 'module');  // ESM should be handled in loadESMFromCJS().\r\n  const hostDefinedOptionId = vm_dynamic_import_default_internal;\r\n  const importModuleDynamically = vm_dynamic_import_default_internal;\r\n  if (patched) {\r\n    const wrapped = Module.wrap(content);\r\n    const script = makeContextifyScript(\r\n      wrapped,                 // code\r\n      filename,                // filename\r\n      0,                       // lineOffset\r\n      0,                       // columnOffset\r\n      undefined,               // cachedData\r\n      false,                   // produceCachedData\r\n      undefined,               // parsingContext\r\n      hostDefinedOptionId,     // hostDefinedOptionId\r\n      importModuleDynamically, // importModuleDynamically\r\n    );\r\n\r\n    // Cache the source map for the module if present.\r\n    const { sourceMapURL } = script;\r\n    if (sourceMapURL) {\r\n      maybeCacheSourceMap(filename, content, cjsModuleInstance, false, undefined, sourceMapURL);\r\n    }\r\n\r\n    return {\r\n      __proto__: null,\r\n      function: runScriptInThisContext(script, true, false),\r\n      sourceMapURL,\r\n    };\r\n  }\r\n\r\n  const isMain = !!(cjsModuleInstance && cjsModuleInstance[kIsMainSymbol]);\r\n  const shouldDetectModule = (format !== 'commonjs' && getOptionValue('--experimental-detect-module'));\r\n  const result = compileFunctionForCJSLoader(content, filename, isMain, shouldDetectModule);\r\n\r\n  // cachedDataRejected is only set for cache coming from SEA.\r\n  if (codeCache &&\r\n      result.cachedDataRejected !== false &&\r\n      internalBinding('sea').isSea()) {\r\n    process.emitWarning('Code cache data rejected.');\r\n  }\r\n\r\n  // Cache the source map for the module if present.\r\n  if (result.sourceMapURL) {\r\n    maybeCacheSourceMap(filename, content, cjsModuleInstance, false, undefined, result.sourceMapURL);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Run the file contents in the correct scope or sandbox. Expose the correct helper variables (`require`, `module`,\r\n * `exports`) to the file. Returns exception, if any.\r\n * @param {string} content The source code of the module\r\n * @param {string} filename The file path of the module\r\n * @param {'module'|'commonjs'|undefined} format Intended format of the module.\r\n */\r\nModule.prototype._compile = function(content, filename, format) {\r\n  let redirects;\r\n\r\n  let compiledWrapper;\r\n  if (format !== 'module') {\r\n    const result = wrapSafe(filename, content, this, undefined, format);\r\n    compiledWrapper = result.function;\r\n    if (result.canParseAsESM) {\r\n      format = 'module';\r\n    }\r\n  }\r\n\r\n  // TODO(joyeecheung): when the module is the entry point, consider allowing TLA.\r\n  // Only modules being require()'d really need to avoid TLA.\r\n  if (format === 'module') {\r\n    // Pass the source into the .mjs extension handler indirectly through the cache.\r\n    this[kModuleSource] = content;\r\n    loadESMFromCJS(this, filename);\r\n    return;\r\n  }\r\n\r\n  // TODO(joyeecheung): the detection below is unnecessarily complex. Using the\r\n  // kIsMainSymbol, or a kBreakOnStartSymbol that gets passed from\r\n  // higher level instead of doing hacky detection here.\r\n  let inspectorWrapper = null;\r\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\r\n    if (!resolvedArgv) {\r\n      // We enter the repl if we're not given a filename argument.\r\n      if (process.argv[1]) {\r\n        try {\r\n          resolvedArgv = Module._resolveFilename(process.argv[1], null, false);\r\n        } catch {\r\n          // We only expect this codepath to be reached in the case of a\r\n          // preloaded module (it will fail earlier with the main entry)\r\n          assert(ArrayIsArray(getOptionValue('--require')));\r\n        }\r\n      } else {\r\n        resolvedArgv = 'repl';\r\n      }\r\n    }\r\n\r\n    // Set breakpoint on module start\r\n    if (resolvedArgv && !hasPausedEntry && filename === resolvedArgv) {\r\n      hasPausedEntry = true;\r\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\r\n    }\r\n  }\r\n  const dirname = path.dirname(filename);\r\n  const require = makeRequireFunction(this, redirects);\r\n  let result;\r\n  const exports = this.exports;\r\n  const thisValue = exports;\r\n  const module = this;\r\n  if (requireDepth === 0) { statCache = new SafeMap(); }\r\n  setHasStartedUserCJSExecution();\r\n  this[kIsExecuting] = true;\r\n  if (inspectorWrapper) {\r\n    result = inspectorWrapper(compiledWrapper, thisValue, exports,\r\n                              require, module, filename, dirname);\r\n  } else {\r\n    result = ReflectApply(compiledWrapper, thisValue,\r\n                          [exports, require, module, filename, dirname]);\r\n  }\r\n  this[kIsExecuting] = false;\r\n  if (requireDepth === 0) { statCache = null; }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get the source code of a module, using cached ones if it's cached.\r\n * @param {Module} mod Module instance whose source is potentially already cached.\r\n * @param {string} filename Absolute path to the file of the module.\r\n * @returns {string}\r\n */\r\nfunction getMaybeCachedSource(mod, filename) {\r\n  // If already analyzed the source, then it will be cached.\r\n  let content;\r\n  if (mod[kModuleSource] !== undefined) {\r\n    content = mod[kModuleSource];\r\n    mod[kModuleSource] = undefined;\r\n  } else {\r\n    // TODO(joyeecheung): we can read a buffer instead to speed up\r\n    // compilation.\r\n    content = fs.readFileSync(filename, 'utf8');\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Built-in handler for `.js` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.js'] = function(module, filename) {\r\n  // If already analyzed the source, then it will be cached.\r\n  const content = getMaybeCachedSource(module, filename);\r\n\r\n  let format;\r\n  if (StringPrototypeEndsWith(filename, '.js')) {\r\n    const pkg = packageJsonReader.getNearestParentPackageJSON(filename);\r\n    // Function require shouldn't be used in ES modules.\r\n    if (pkg?.data.type === 'module') {\r\n      if (getOptionValue('--experimental-require-module')) {\r\n        module._compile(content, filename, 'module');\r\n        return;\r\n      }\r\n\r\n      // This is an error path because `require` of a `.js` file in a `\"type\": \"module\"` scope is not allowed.\r\n      const parent = module[kModuleParent];\r\n      const parentPath = parent?.filename;\r\n      const packageJsonPath = path.resolve(pkg.path, 'package.json');\r\n      const usesEsm = containsModuleSyntax(content, filename);\r\n      const err = new ERR_REQUIRE_ESM(filename, usesEsm, parentPath,\r\n                                      packageJsonPath);\r\n      // Attempt to reconstruct the parent require frame.\r\n      if (Module._cache[parentPath]) {\r\n        let parentSource;\r\n        try {\r\n          parentSource = fs.readFileSync(parentPath, 'utf8');\r\n        } catch {\r\n          // Continue regardless of error.\r\n        }\r\n        if (parentSource) {\r\n          const errLine = StringPrototypeSplit(\r\n            StringPrototypeSlice(err.stack, StringPrototypeIndexOf(\r\n              err.stack, '    at ')), '\\n', 1)[0];\r\n          const { 1: line, 2: col } =\r\n              RegExpPrototypeExec(/(\\d+):(\\d+)\\)/, errLine) || [];\r\n          if (line && col) {\r\n            const srcLine = StringPrototypeSplit(parentSource, '\\n')[line - 1];\r\n            const frame = `${parentPath}:${line}\\n${srcLine}\\n${\r\n              StringPrototypeRepeat(' ', col - 1)}^\\n`;\r\n            setArrowMessage(err, frame);\r\n          }\r\n        }\r\n      }\r\n      throw err;\r\n    } else if (pkg?.data.type === 'commonjs') {\r\n      format = 'commonjs';\r\n    }\r\n  } else if (StringPrototypeEndsWith(filename, '.cjs')) {\r\n    format = 'commonjs';\r\n  }\r\n\r\n  module._compile(content, filename, format);\r\n};\r\n\r\n/**\r\n * Native handler for `.json` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.json'] = function(module, filename) {\r\n  const content = fs.readFileSync(filename, 'utf8');\r\n\r\n  try {\r\n    setOwnProperty(module, 'exports', JSONParse(stripBOM(content)));\r\n  } catch (err) {\r\n    err.message = filename + ': ' + err.message;\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Native handler for `.node` files.\r\n * @param {Module} module The module to compile\r\n * @param {string} filename The file path of the module\r\n */\r\nModule._extensions['.node'] = function(module, filename) {\r\n  // Be aware this doesn't use `content`\r\n  return process.dlopen(module, path.toNamespacedPath(filename));\r\n};\r\n\r\n/**\r\n * Creates a `require` function that can be used to load modules from the specified path.\r\n * @param {string} filename The path to the module\r\n */\r\nfunction createRequireFromPath(filename) {\r\n  // Allow a directory to be passed as the filename\r\n  const trailingSlash =\r\n    StringPrototypeEndsWith(filename, '/') ||\r\n    (isWindows && StringPrototypeEndsWith(filename, '\\\\'));\r\n\r\n  const proxyPath = trailingSlash ?\r\n    path.join(filename, 'noop.js') :\r\n    filename;\r\n\r\n  const m = new Module(proxyPath);\r\n  m.filename = proxyPath;\r\n\r\n  m.paths = Module._nodeModulePaths(m.path);\r\n  return makeRequireFunction(m, null);\r\n}\r\n\r\nconst createRequireError = 'must be a file URL object, file URL string, or ' +\r\n  'absolute path string';\r\n\r\n/**\r\n * Creates a new `require` function that can be used to load modules.\r\n * @param {string | URL} filename The path or URL to the module context for this `require`\r\n * @throws {ERR_INVALID_ARG_VALUE} If `filename` is not a string or URL, or if it is a relative path that cannot be\r\n * resolved to an absolute path.\r\n */\r\nfunction createRequire(filename) {\r\n  let filepath;\r\n\r\n  if (isURL(filename) ||\r\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\r\n    try {\r\n      filepath = fileURLToPath(filename);\r\n    } catch {\r\n      throw new ERR_INVALID_ARG_VALUE('filename', filename,\r\n                                      createRequireError);\r\n    }\r\n  } else if (typeof filename !== 'string') {\r\n    throw new ERR_INVALID_ARG_VALUE('filename', filename, createRequireError);\r\n  } else {\r\n    filepath = filename;\r\n  }\r\n  return createRequireFromPath(filepath);\r\n}\r\n\r\nModule.createRequire = createRequire;\r\n\r\n/**\r\n * Define the paths to use for resolving a module.\r\n */\r\nModule._initPaths = function() {\r\n  const homeDir = isWindows ? process.env.USERPROFILE : safeGetenv('HOME');\r\n  const nodePath = isWindows ? process.env.NODE_PATH : safeGetenv('NODE_PATH');\r\n\r\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\r\n  // $PREFIX\\node.exe where $PREFIX is the root of the Node.js installation.\r\n  const prefixDir = isWindows ?\r\n    path.resolve(process.execPath, '..') :\r\n    path.resolve(process.execPath, '..', '..');\r\n\r\n  const paths = [path.resolve(prefixDir, 'lib', 'node')];\r\n\r\n  if (homeDir) {\r\n    ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_libraries'));\r\n    ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_modules'));\r\n  }\r\n\r\n  if (nodePath) {\r\n    ArrayPrototypeUnshiftApply(paths, ArrayPrototypeFilter(\r\n      StringPrototypeSplit(nodePath, path.delimiter),\r\n      Boolean,\r\n    ));\r\n  }\r\n\r\n  modulePaths = paths;\r\n\r\n  // Clone as a shallow copy, for introspection.\r\n  Module.globalPaths = ArrayPrototypeSlice(modulePaths);\r\n};\r\n\r\n/**\r\n * Handle modules loaded via `--require`.\r\n * @param {string[]} requests The values of `--require`\r\n */\r\nModule._preloadModules = function(requests) {\r\n  if (!ArrayIsArray(requests)) { return; }\r\n\r\n  isPreloading = true;\r\n\r\n  // Preloaded modules have a dummy parent module which is deemed to exist\r\n  // in the current working directory. This seeds the search path for\r\n  // preloaded modules.\r\n  const parent = new Module('internal/preload', null);\r\n  try {\r\n    parent.paths = Module._nodeModulePaths(process.cwd());\r\n  } catch (e) {\r\n    if (e.code !== 'ENOENT') {\r\n      isPreloading = false;\r\n      throw e;\r\n    }\r\n  }\r\n  for (let n = 0; n < requests.length; n++) {\r\n    parent.require(requests[n]);\r\n  }\r\n  isPreloading = false;\r\n};\r\n\r\n/**\r\n * If the user has overridden an export from a builtin module, this function can ensure that the override is used in\r\n * both CommonJS and ES module contexts.\r\n */\r\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\r\n  for (const mod of BuiltinModule.map.values()) {\r\n    if (BuiltinModule.canBeRequiredWithoutScheme(mod.id)) {\r\n      mod.syncExports();\r\n    }\r\n  }\r\n};\r\n\r\nObjectDefineProperty(Module.prototype, 'constructor', {\r\n  __proto__: null,\r\n  get: function() {\r\n    return Module;\r\n  },\r\n  configurable: false,\r\n  enumerable: false,\r\n});\r\n\r\n// Backwards compatibility\r\nModule.Module = Module;\r\n"
  },
  "63": {
    "metadata": {
      "scriptId": "63",
      "url": "node:internal/modules/package_json_reader",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 163,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "25fac6744b229006c670c098770767b1eafd3d5187ec490d06e840a12c591a3d",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4998,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/package_json_reader"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  JSONParse,\r\n  ObjectDefineProperty,\r\n  StringPrototypeLastIndexOf,\r\n  StringPrototypeSlice,\r\n} = primordials;\r\nconst modulesBinding = internalBinding('modules');\r\nconst { resolve, sep } = require('path');\r\nconst { kEmptyObject } = require('internal/util');\r\n\r\n/**\r\n * @param {string} path\r\n * @param {import('typings/internalBinding/modules').SerializedPackageConfig} contents\r\n * @returns {import('typings/internalBinding/modules').PackageConfig}\r\n */\r\nfunction deserializePackageJSON(path, contents) {\r\n  if (contents === undefined) {\r\n    return {\r\n      __proto__: null,\r\n      exists: false,\r\n      pjsonPath: path,\r\n      type: 'none', // Ignore unknown types for forwards compatibility\r\n    };\r\n  }\r\n\r\n  let pjsonPath = path;\r\n  const {\r\n    0: name,\r\n    1: main,\r\n    2: type,\r\n    3: plainImports,\r\n    4: plainExports,\r\n    5: optionalFilePath,\r\n  } = contents;\r\n\r\n  // This is required to be used in getPackageScopeConfig.\r\n  if (optionalFilePath) {\r\n    pjsonPath = optionalFilePath;\r\n  }\r\n\r\n  // The imports and exports fields can be either undefined or a string.\r\n  // - If it's a string, it's either plain string or a stringified JSON string.\r\n  // - If it's a stringified JSON string, it starts with either '[' or '{'.\r\n  const requiresJSONParse = (value) => (value !== undefined && (value[0] === '[' || value[0] === '{'));\r\n\r\n  return {\r\n    __proto__: null,\r\n    exists: true,\r\n    pjsonPath,\r\n    name,\r\n    main,\r\n    type,\r\n    // This getters are used to lazily parse the imports and exports fields.\r\n    get imports() {\r\n      const value = requiresJSONParse(plainImports) ? JSONParse(plainImports) : plainImports;\r\n      ObjectDefineProperty(this, 'imports', { __proto__: null, value });\r\n      return this.imports;\r\n    },\r\n    get exports() {\r\n      const value = requiresJSONParse(plainExports) ? JSONParse(plainExports) : plainExports;\r\n      ObjectDefineProperty(this, 'exports', { __proto__: null, value });\r\n      return this.exports;\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Reads a package.json file and returns the parsed contents.\r\n * @param {string} jsonPath\r\n * @param {{\r\n *   base?: URL | string,\r\n *   specifier?: URL | string,\r\n *   isESM?: boolean,\r\n * }} options\r\n * @returns {import('typings/internalBinding/modules').PackageConfig}\r\n */\r\nfunction read(jsonPath, { base, specifier, isESM } = kEmptyObject) {\r\n  // This function will be called by both CJS and ESM, so we need to make sure\r\n  // non-null attributes are converted to strings.\r\n  const parsed = modulesBinding.readPackageJSON(\r\n    jsonPath,\r\n    isESM,\r\n    base == null ? undefined : `${base}`,\r\n    specifier == null ? undefined : `${specifier}`,\r\n  );\r\n\r\n  return deserializePackageJSON(jsonPath, parsed);\r\n}\r\n\r\n/**\r\n * @deprecated Expected to be removed in favor of `read` in the future.\r\n * Behaves the same was as `read`, but appends package.json to the path.\r\n * @param {string} requestPath\r\n * @return {PackageConfig}\r\n */\r\nfunction readPackage(requestPath) {\r\n  // TODO(@anonrig): Remove this function.\r\n  return read(resolve(requestPath, 'package.json'));\r\n}\r\n\r\n/**\r\n * Get the nearest parent package.json file from a given path.\r\n * Return the package.json data and the path to the package.json file, or undefined.\r\n * @param {string} checkPath The path to start searching from.\r\n * @returns {undefined | {data: import('typings/internalBinding/modules').PackageConfig, path: string}}\r\n */\r\nfunction getNearestParentPackageJSON(checkPath) {\r\n  const result = modulesBinding.getNearestParentPackageJSON(checkPath);\r\n\r\n  if (result === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  const data = deserializePackageJSON(checkPath, result);\r\n\r\n  // Path should be the root folder of the matched package.json\r\n  // For example for ~/path/package.json, it should be ~/path\r\n  const path = StringPrototypeSlice(data.pjsonPath, 0, StringPrototypeLastIndexOf(data.pjsonPath, sep));\r\n\r\n  return { data, path };\r\n}\r\n\r\n/**\r\n * Returns the package configuration for the given resolved URL.\r\n * @param {URL | string} resolved - The resolved URL.\r\n * @returns {import('typings/internalBinding/modules').PackageConfig} - The package configuration.\r\n */\r\nfunction getPackageScopeConfig(resolved) {\r\n  const result = modulesBinding.getPackageScopeConfig(`${resolved}`);\r\n\r\n  if (ArrayIsArray(result)) {\r\n    return deserializePackageJSON(`${resolved}`, result);\r\n  }\r\n\r\n  // This means that the response is a string\r\n  // and it is the path to the package.json file\r\n  return {\r\n    __proto__: null,\r\n    pjsonPath: result,\r\n    exists: false,\r\n    type: 'none',\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the package type for a given URL.\r\n * @param {URL} url - The URL to get the package type for.\r\n */\r\nfunction getPackageType(url) {\r\n  // TODO(@anonrig): Write a C++ function that returns only \"type\".\r\n  return getPackageScopeConfig(url).type;\r\n}\r\n\r\nmodule.exports = {\r\n  read,\r\n  readPackage,\r\n  getNearestParentPackageJSON,\r\n  getPackageScopeConfig,\r\n  getPackageType,\r\n};\r\n"
  },
  "64": {
    "metadata": {
      "scriptId": "64",
      "url": "node:internal/modules/esm/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 358,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "9937b6a125408bd025de644ffb76e164406139de0c1d18c2ae24461239ef4079",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 13640,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/esm/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayIsArray,\r\n  ObjectFreeze,\r\n  SafeSet,\r\n  SafeWeakMap,\r\n} = primordials;\r\n\r\nconst {\r\n  privateSymbols: {\r\n    host_defined_option_symbol,\r\n  },\r\n} = internalBinding('util');\r\nconst {\r\n  source_text_module_default_hdo,\r\n  vm_dynamic_import_default_internal,\r\n  vm_dynamic_import_main_context_default,\r\n  vm_dynamic_import_missing_flag,\r\n  vm_dynamic_import_no_callback,\r\n} = internalBinding('symbols');\r\n\r\nconst { ModuleWrap } = internalBinding('module_wrap');\r\nconst {\r\n  maybeCacheSourceMap,\r\n} = require('internal/source_map/source_map_cache');\r\n\r\nconst {\r\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG,\r\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING,\r\n  ERR_INVALID_ARG_VALUE,\r\n} = require('internal/errors').codes;\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  loadPreloadModules,\r\n  initializeFrozenIntrinsics,\r\n} = require('internal/process/pre_execution');\r\nconst {\r\n  emitExperimentalWarning,\r\n  getCWDURL,\r\n} = require('internal/util');\r\nconst {\r\n  setImportModuleDynamicallyCallback,\r\n  setInitializeImportMetaObjectCallback,\r\n} = internalBinding('module_wrap');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  normalizeReferrerURL,\r\n} = require('internal/modules/helpers');\r\n\r\nlet defaultConditions;\r\n/**\r\n * Returns the default conditions for ES module loading.\r\n */\r\nfunction getDefaultConditions() {\r\n  assert(defaultConditions !== undefined);\r\n  return defaultConditions;\r\n}\r\n\r\n/** @type {Set<string>} */\r\nlet defaultConditionsSet;\r\n/**\r\n * Returns the default conditions for ES module loading, as a Set.\r\n */\r\nfunction getDefaultConditionsSet() {\r\n  assert(defaultConditionsSet !== undefined);\r\n  return defaultConditionsSet;\r\n}\r\n\r\n/**\r\n * Initializes the default conditions for ESM module loading.\r\n * This function is called during pre-execution, before any user code is run.\r\n */\r\nfunction initializeDefaultConditions() {\r\n  const userConditions = getOptionValue('--conditions');\r\n  const noAddons = getOptionValue('--no-addons');\r\n  const addonConditions = noAddons ? [] : ['node-addons'];\r\n\r\n  defaultConditions = ObjectFreeze([\r\n    'node',\r\n    'import',\r\n    ...addonConditions,\r\n    ...userConditions,\r\n  ]);\r\n  defaultConditionsSet = new SafeSet(defaultConditions);\r\n}\r\n\r\n/**\r\n * @param {string[]} [conditions]\r\n * @returns {Set<string>}\r\n */\r\nfunction getConditionsSet(conditions) {\r\n  if (conditions !== undefined && conditions !== getDefaultConditions()) {\r\n    if (!ArrayIsArray(conditions)) {\r\n      throw new ERR_INVALID_ARG_VALUE('conditions', conditions,\r\n                                      'expected an array');\r\n    }\r\n    return new SafeSet(conditions);\r\n  }\r\n  return getDefaultConditionsSet();\r\n}\r\n\r\n/**\r\n * @callback ImportModuleDynamicallyCallback\r\n * @param {string} specifier\r\n * @param {ModuleWrap|ContextifyScript|Function|vm.Module} callbackReferrer\r\n * @param {Record<string, string>} attributes\r\n * @returns { Promise<void> }\r\n */\r\n\r\n/**\r\n * @callback InitializeImportMetaCallback\r\n * @param {object} meta\r\n * @param {ModuleWrap|ContextifyScript|Function|vm.Module} callbackReferrer\r\n */\r\n\r\n/**\r\n * @typedef {{\r\n *   callbackReferrer: ModuleWrap|ContextifyScript|Function|vm.Module\r\n *   initializeImportMeta? : InitializeImportMetaCallback,\r\n *   importModuleDynamically? : ImportModuleDynamicallyCallback\r\n * }} ModuleRegistry\r\n */\r\n\r\n/**\r\n * @type {WeakMap<symbol, ModuleRegistry>}\r\n */\r\nconst moduleRegistries = new SafeWeakMap();\r\n\r\n/**\r\n * @typedef {ContextifyScript|Function|ModuleWrap|ContextifiedObject} Referrer\r\n * A referrer can be a Script Record, a Cyclic Module Record, or a Realm Record\r\n * as defined in https://tc39.es/ecma262/#sec-HostLoadImportedModule.\r\n *\r\n * In Node.js, a referrer is represented by a wrapper object of these records.\r\n * A referrer object has a field |host_defined_option_symbol| initialized with\r\n * a symbol.\r\n */\r\n\r\n/**\r\n * V8 would make sure that as long as import() can still be initiated from\r\n * the referrer, the symbol referenced by |host_defined_option_symbol| should\r\n * be alive, which in term would keep the settings object alive through the\r\n * WeakMap, and in turn that keeps the referrer object alive, which would be\r\n * passed into the callbacks.\r\n * The reference goes like this:\r\n * [v8::internal::Script] (via host defined options) ----1--> [idSymbol]\r\n * [callbackReferrer] (via host_defined_option_symbol) ------2------^  |\r\n *                                 ^----------3---- (via WeakMap)------\r\n * 1+3 makes sure that as long as import() can still be initiated, the\r\n * referrer wrap is still around and can be passed into the callbacks.\r\n * 2 is only there so that we can get the id symbol to configure the\r\n * weak map.\r\n * @param {Referrer} referrer The referrer to\r\n *   get the id symbol from. This is different from callbackReferrer which\r\n *   could be set by the caller.\r\n * @param {ModuleRegistry} registry\r\n */\r\nfunction registerModule(referrer, registry) {\r\n  const idSymbol = referrer[host_defined_option_symbol];\r\n  if (idSymbol === vm_dynamic_import_no_callback ||\r\n      idSymbol === vm_dynamic_import_missing_flag ||\r\n      idSymbol === vm_dynamic_import_main_context_default ||\r\n      idSymbol === vm_dynamic_import_default_internal) {\r\n    // The referrer is compiled without custom callbacks, so there is\r\n    // no registry to hold on to. We'll throw\r\n    // ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING when a callback is\r\n    // needed.\r\n    return;\r\n  }\r\n  // To prevent it from being GC'ed.\r\n  registry.callbackReferrer ??= referrer;\r\n  moduleRegistries.set(idSymbol, registry);\r\n}\r\n\r\n/**\r\n * Proxy the import meta handling to the default loader for source text modules.\r\n * @param {Record<string, string | Function>} meta - The import.meta object to initialize.\r\n * @param {ModuleWrap} wrap - The ModuleWrap of the SourceTextModule where `import.meta` is referenced.\r\n */\r\nfunction defaultInitializeImportMetaForModule(meta, wrap) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.importMetaInitialize(meta, { url: wrap.url });\r\n}\r\n\r\n/**\r\n * Defines the `import.meta` object for a given module.\r\n * @param {symbol} symbol - Reference to the module.\r\n * @param {Record<string, string | Function>} meta - The import.meta object to initialize.\r\n * @param {ModuleWrap} wrap - The ModuleWrap of the SourceTextModule where `import.meta` is referenced.\r\n */\r\nfunction initializeImportMetaObject(symbol, meta, wrap) {\r\n  if (symbol === source_text_module_default_hdo) {\r\n    defaultInitializeImportMetaForModule(meta, wrap);\r\n    return;\r\n  }\r\n  const data = moduleRegistries.get(symbol);\r\n  assert(data, `import.meta registry not found for ${wrap.url}`);\r\n  const { initializeImportMeta, callbackReferrer } = data;\r\n  if (initializeImportMeta !== undefined) {\r\n    meta = initializeImportMeta(meta, callbackReferrer);\r\n  }\r\n}\r\n\r\n/**\r\n * Proxy the dynamic import handling to the default loader for source text modules.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n */\r\nfunction defaultImportModuleDynamicallyForModule(specifier, attributes, referrerName) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.import(specifier, referrerName, attributes);\r\n}\r\n\r\n/**\r\n * Proxy the dynamic import to the default loader for classic scripts.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n */\r\nfunction defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName) {\r\n  const parentURL = normalizeReferrerURL(referrerName);\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  return cascadedLoader.import(specifier, parentURL, attributes);\r\n}\r\n\r\n/**\r\n * Asynchronously imports a module dynamically using a callback function. The native callback.\r\n * @param {symbol} referrerSymbol - Referrer symbol of the registered script, function, module, or contextified object.\r\n * @param {string} specifier - The module specifier string.\r\n * @param {Record<string, string>} attributes - The import attributes object.\r\n * @param {string|null|undefined} referrerName - name of the referrer.\r\n * @returns {Promise<import('internal/modules/esm/loader.js').ModuleExports>} - The imported module object.\r\n * @throws {ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING} - If the callback function is missing.\r\n */\r\nasync function importModuleDynamicallyCallback(referrerSymbol, specifier, attributes, referrerName) {\r\n  // For user-provided vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER, emit the warning\r\n  // and fall back to the default loader.\r\n  if (referrerSymbol === vm_dynamic_import_main_context_default) {\r\n    emitExperimentalWarning('vm.USE_MAIN_CONTEXT_DEFAULT_LOADER');\r\n    return defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName);\r\n  }\r\n  // For script compiled internally that should use the default loader to handle dynamic\r\n  // import, proxy the request to the default loader without the warning.\r\n  if (referrerSymbol === vm_dynamic_import_default_internal) {\r\n    return defaultImportModuleDynamicallyForScript(specifier, attributes, referrerName);\r\n  }\r\n  // For SourceTextModules compiled internally, proxy the request to the default loader.\r\n  if (referrerSymbol === source_text_module_default_hdo) {\r\n    return defaultImportModuleDynamicallyForModule(specifier, attributes, referrerName);\r\n  }\r\n\r\n  if (moduleRegistries.has(referrerSymbol)) {\r\n    const { importModuleDynamically, callbackReferrer } = moduleRegistries.get(referrerSymbol);\r\n    if (importModuleDynamically !== undefined) {\r\n      return importModuleDynamically(specifier, callbackReferrer, attributes);\r\n    }\r\n  }\r\n  if (referrerSymbol === vm_dynamic_import_missing_flag) {\r\n    throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG();\r\n  }\r\n  throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING();\r\n}\r\n\r\nlet _forceDefaultLoader = false;\r\n/**\r\n * Initializes handling of ES modules.\r\n * This is configured during pre-execution. Specifically it's set to true for\r\n * the loader worker in internal/main/worker_thread.js.\r\n * @param {boolean} [forceDefaultLoader=false] - A boolean indicating disabling custom loaders.\r\n */\r\nfunction initializeESM(forceDefaultLoader = false) {\r\n  _forceDefaultLoader = forceDefaultLoader;\r\n  initializeDefaultConditions();\r\n  // Setup per-realm callbacks that locate data or callbacks that we keep\r\n  // track of for different ESM modules.\r\n  setInitializeImportMetaObjectCallback(initializeImportMetaObject);\r\n  setImportModuleDynamicallyCallback(importModuleDynamicallyCallback);\r\n}\r\n\r\n/**\r\n * Determine whether custom loaders are disabled and it is forced to use the\r\n * default loader.\r\n * @returns {boolean}\r\n */\r\nfunction forceDefaultLoader() {\r\n  return _forceDefaultLoader;\r\n}\r\n\r\n/**\r\n * Register module customization hooks.\r\n */\r\nasync function initializeHooks() {\r\n  const customLoaderURLs = getOptionValue('--experimental-loader');\r\n\r\n  const { Hooks } = require('internal/modules/esm/hooks');\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n\r\n  const hooks = new Hooks();\r\n  cascadedLoader.setCustomizations(hooks);\r\n\r\n  // We need the loader customizations to be set _before_ we start invoking\r\n  // `--require`, otherwise loops can happen because a `--require` script\r\n  // might call `register(...)` before we've installed ourselves. These\r\n  // global values are magically set in `setupUserModules` just for us and\r\n  // we call them in the correct order.\r\n  // N.B.  This block appears here specifically in order to ensure that\r\n  // `--require` calls occur before `--loader` ones do.\r\n  loadPreloadModules();\r\n  initializeFrozenIntrinsics();\r\n\r\n  const parentURL = getCWDURL().href;\r\n  for (let i = 0; i < customLoaderURLs.length; i++) {\r\n    await hooks.register(\r\n      customLoaderURLs[i],\r\n      parentURL,\r\n    );\r\n  }\r\n\r\n  return hooks;\r\n}\r\n\r\n/**\r\n * Compile a SourceTextModule for the built-in ESM loader. Register it for default\r\n * source map and import.meta and dynamic import() handling if cascadedLoader is provided.\r\n * @param {string} url URL of the module.\r\n * @param {string} source Source code of the module.\r\n * @param {typeof import('./loader.js').ModuleLoader|undefined} cascadedLoader If provided,\r\n *        register the module for default handling.\r\n * @returns {ModuleWrap}\r\n */\r\nfunction compileSourceTextModule(url, source, cascadedLoader) {\r\n  const hostDefinedOption = cascadedLoader ? source_text_module_default_hdo : undefined;\r\n  const wrap = new ModuleWrap(url, undefined, source, 0, 0, hostDefinedOption);\r\n\r\n  if (!cascadedLoader) {\r\n    return wrap;\r\n  }\r\n  // Cache the source map for the module if present.\r\n  if (wrap.sourceMapURL) {\r\n    maybeCacheSourceMap(url, source, wrap, false, undefined, wrap.sourceMapURL);\r\n  }\r\n  return wrap;\r\n}\r\n\r\nmodule.exports = {\r\n  registerModule,\r\n  initializeESM,\r\n  initializeHooks,\r\n  getDefaultConditions,\r\n  getConditionsSet,\r\n  loaderWorkerId: 'internal/modules/esm/worker',\r\n  forceDefaultLoader,\r\n  compileSourceTextModule,\r\n};\r\n"
  },
  "65": {
    "metadata": {
      "scriptId": "65",
      "url": "node:internal/process/pre_execution",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 738,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b515bd6f9a22420dd0f5f2714bdb1e006993aec46c4f3d417eeecc409635a89e",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 24005,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/process/pre_execution"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  Date,\r\n  DatePrototypeGetDate,\r\n  DatePrototypeGetFullYear,\r\n  DatePrototypeGetHours,\r\n  DatePrototypeGetMinutes,\r\n  DatePrototypeGetMonth,\r\n  DatePrototypeGetSeconds,\r\n  NumberParseInt,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectGetOwnPropertyDescriptor,\r\n  String,\r\n  StringPrototypeStartsWith,\r\n  Symbol,\r\n  SymbolAsyncDispose,\r\n  SymbolDispose,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst {\r\n  getOptionValue,\r\n  refreshOptions,\r\n  getEmbedderOptions,\r\n} = require('internal/options');\r\nconst { reconnectZeroFillToggle } = require('internal/buffer');\r\nconst {\r\n  exposeInterface,\r\n  exposeLazyInterfaces,\r\n  defineReplaceableLazyAttribute,\r\n  setupCoverageHooks,\r\n} = require('internal/util');\r\n\r\nconst {\r\n  ERR_INVALID_THIS,\r\n  ERR_NO_CRYPTO,\r\n  ERR_MISSING_OPTION,\r\n  ERR_ACCESS_DENIED,\r\n} = require('internal/errors').codes;\r\nconst assert = require('internal/assert');\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nfunction prepareMainThreadExecution(expandArgv1 = false, initializeModules = true) {\r\n  return prepareExecution({\r\n    expandArgv1,\r\n    initializeModules,\r\n    isMainThread: true,\r\n  });\r\n}\r\n\r\nfunction prepareWorkerThreadExecution() {\r\n  prepareExecution({\r\n    expandArgv1: false,\r\n    initializeModules: false,\r\n    isMainThread: false,\r\n  });\r\n}\r\n\r\nfunction prepareShadowRealmExecution() {\r\n  // Patch the process object with legacy properties and normalizations.\r\n  // Do not expand argv1 as it is not available in ShadowRealm.\r\n  patchProcessObject(false);\r\n  setupDebugEnv();\r\n\r\n  // Disable custom loaders in ShadowRealm.\r\n  setupUserModules(true);\r\n  const {\r\n    privateSymbols: {\r\n      host_defined_option_symbol,\r\n    },\r\n  } = internalBinding('util');\r\n  const {\r\n    vm_dynamic_import_default_internal,\r\n  } = internalBinding('symbols');\r\n\r\n  // For ShadowRealm.prototype.importValue(), the referrer name is\r\n  // always null, so the native ImportModuleDynamically() callback would\r\n  // always fallback to look up the host-defined option from the\r\n  // global object using host_defined_option_symbol. Using\r\n  // vm_dynamic_import_default_internal as the host-defined option\r\n  // instructs the JS-land importModuleDynamicallyCallback() to\r\n  // proxy the request to defaultImportModuleDynamically().\r\n  globalThis[host_defined_option_symbol] =\r\n    vm_dynamic_import_default_internal;\r\n}\r\n\r\nfunction prepareExecution(options) {\r\n  const { expandArgv1, initializeModules, isMainThread } = options;\r\n\r\n  refreshRuntimeOptions();\r\n  reconnectZeroFillToggle();\r\n\r\n  // Patch the process object and get the resolved main entry point.\r\n  const mainEntry = patchProcessObject(expandArgv1);\r\n  setupTraceCategoryState();\r\n  setupInspectorHooks();\r\n  setupNavigator();\r\n  setupWarningHandler();\r\n  setupUndici();\r\n  setupWebCrypto();\r\n  setupCustomEvent();\r\n  setupEventsource();\r\n  setupCodeCoverage();\r\n  setupDebugEnv();\r\n  // Process initial diagnostic reporting configuration, if present.\r\n  initializeReport();\r\n\r\n  // Load permission system API\r\n  initializePermission();\r\n\r\n  initializeSourceMapsHandlers();\r\n  initializeDeprecations();\r\n\r\n  require('internal/dns/utils').initializeDns();\r\n\r\n  setupSymbolDisposePolyfill();\r\n\r\n  if (isMainThread) {\r\n    assert(internalBinding('worker').isMainThread);\r\n    // Worker threads will get the manifest in the message handler.\r\n\r\n    // Print stack trace on `SIGINT` if option `--trace-sigint` presents.\r\n    setupStacktracePrinterOnSigint();\r\n    initializeReportSignalHandlers();  // Main-thread-only.\r\n    initializeHeapSnapshotSignalHandlers();\r\n    // If the process is spawned with env NODE_CHANNEL_FD, it's probably\r\n    // spawned by our child_process module, then initialize IPC.\r\n    // This attaches some internal event listeners and creates:\r\n    // process.send(), process.channel, process.connected,\r\n    // process.disconnect().\r\n    setupChildProcessIpcChannel();\r\n    // If this is a worker in cluster mode, start up the communication\r\n    // channel. This needs to be done before any user code gets executed\r\n    // (including preload modules).\r\n    initializeClusterIPC();\r\n\r\n    // TODO(joyeecheung): do this for worker threads as well.\r\n    require('internal/v8/startup_snapshot').runDeserializeCallbacks();\r\n  } else {\r\n    assert(!internalBinding('worker').isMainThread);\r\n    // The setup should be called in LOAD_SCRIPT message handler.\r\n    assert(!initializeModules);\r\n  }\r\n\r\n  if (initializeModules) {\r\n    setupUserModules();\r\n  }\r\n\r\n  return mainEntry;\r\n}\r\n\r\nfunction setupSymbolDisposePolyfill() {\r\n  // TODO(MoLow): Remove this polyfill once Symbol.dispose and Symbol.asyncDispose are available in V8.\r\n  // eslint-disable-next-line node-core/prefer-primordials\r\n  if (typeof Symbol.dispose !== 'symbol') {\r\n    ObjectDefineProperty(Symbol, 'dispose', {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: false,\r\n      value: SymbolDispose,\r\n      writable: false,\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line node-core/prefer-primordials\r\n  if (typeof Symbol.asyncDispose !== 'symbol') {\r\n    ObjectDefineProperty(Symbol, 'asyncDispose', {\r\n      __proto__: null,\r\n      configurable: false,\r\n      enumerable: false,\r\n      value: SymbolAsyncDispose,\r\n      writable: false,\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupUserModules(forceDefaultLoader = false) {\r\n  initializeCJSLoader();\r\n  initializeESMLoader(forceDefaultLoader);\r\n  const {\r\n    hasStartedUserCJSExecution,\r\n    hasStartedUserESMExecution,\r\n  } = require('internal/modules/helpers');\r\n  assert(!hasStartedUserCJSExecution());\r\n  assert(!hasStartedUserESMExecution());\r\n  if (getEmbedderOptions().hasEmbedderPreload) {\r\n    runEmbedderPreload();\r\n  }\r\n  // Do not enable preload modules if custom loaders are disabled.\r\n  // For example, loader workers are responsible for doing this themselves.\r\n  // And preload modules are not supported in ShadowRealm as well.\r\n  if (!forceDefaultLoader) {\r\n    loadPreloadModules();\r\n  }\r\n  // Need to be done after --require setup.\r\n  initializeFrozenIntrinsics();\r\n}\r\n\r\nfunction refreshRuntimeOptions() {\r\n  refreshOptions();\r\n}\r\n\r\n/**\r\n * Patch the process object with legacy properties and normalizations.\r\n * Replace `process.argv[0]` with `process.execPath`, preserving the original `argv[0]` value as `process.argv0`.\r\n * Replace `process.argv[1]` with the resolved absolute file path of the entry point, if found.\r\n * @param {boolean} expandArgv1 - Whether to replace `process.argv[1]` with the resolved absolute file path of\r\n * the main entry point.\r\n */\r\nfunction patchProcessObject(expandArgv1) {\r\n  const binding = internalBinding('process_methods');\r\n  binding.patchProcessObject(process);\r\n\r\n  // Since we replace process.argv[0] below, preserve the original value in case the user needs it.\r\n  ObjectDefineProperty(process, 'argv0', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    // Only set it to true during snapshot building.\r\n    configurable: isBuildingSnapshot(),\r\n    value: process.argv[0],\r\n  });\r\n\r\n  process.exitCode = undefined;\r\n  process._exiting = false;\r\n  process.argv[0] = process.execPath;\r\n\r\n  /** @type {string} */\r\n  let mainEntry;\r\n  // If requested, update process.argv[1] to replace whatever the user provided with the resolved absolute file path of\r\n  // the entry point.\r\n  if (expandArgv1 && process.argv[1] &&\r\n      !StringPrototypeStartsWith(process.argv[1], '-')) {\r\n    // Expand process.argv[1] into a full path.\r\n    const path = require('path');\r\n    try {\r\n      mainEntry = path.resolve(process.argv[1]);\r\n      process.argv[1] = mainEntry;\r\n    } catch {\r\n      // Continue regardless of error.\r\n    }\r\n  }\r\n\r\n  // We need to initialize the global console here again with process.stdout\r\n  // and friends for snapshot deserialization.\r\n  const globalConsole = require('internal/console/global');\r\n  const { initializeGlobalConsole } = require('internal/console/constructor');\r\n  initializeGlobalConsole(globalConsole);\r\n\r\n  // TODO(joyeecheung): most of these should be deprecated and removed,\r\n  // except some that we need to be able to mutate during run time.\r\n  addReadOnlyProcessAlias('_eval', '--eval');\r\n  addReadOnlyProcessAlias('_print_eval', '--print');\r\n  addReadOnlyProcessAlias('_syntax_check_only', '--check');\r\n  addReadOnlyProcessAlias('_forceRepl', '--interactive');\r\n  addReadOnlyProcessAlias('_preload_modules', '--require');\r\n  addReadOnlyProcessAlias('noDeprecation', '--no-deprecation');\r\n  addReadOnlyProcessAlias('noProcessWarnings', '--no-warnings');\r\n  addReadOnlyProcessAlias('traceProcessWarnings', '--trace-warnings');\r\n  addReadOnlyProcessAlias('throwDeprecation', '--throw-deprecation');\r\n  addReadOnlyProcessAlias('profProcess', '--prof-process');\r\n  addReadOnlyProcessAlias('traceDeprecation', '--trace-deprecation');\r\n  addReadOnlyProcessAlias('_breakFirstLine', '--inspect-brk', false);\r\n  addReadOnlyProcessAlias('_breakNodeFirstLine', '--inspect-brk-node', false);\r\n\r\n  return mainEntry;\r\n}\r\n\r\nfunction addReadOnlyProcessAlias(name, option, enumerable = true) {\r\n  const value = getOptionValue(option);\r\n  if (value) {\r\n    ObjectDefineProperty(process, name, {\r\n      __proto__: null,\r\n      writable: false,\r\n      configurable: true,\r\n      enumerable,\r\n      value,\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupWarningHandler() {\r\n  const {\r\n    onWarning,\r\n    resetForSerialization,\r\n  } = require('internal/process/warning');\r\n  if (getOptionValue('--warnings') &&\r\n    process.env.NODE_NO_WARNINGS !== '1') {\r\n    process.on('warning', onWarning);\r\n\r\n    // The code above would add the listener back during deserialization,\r\n    // if applicable.\r\n    if (isBuildingSnapshot()) {\r\n      addSerializeCallback(() => {\r\n        process.removeListener('warning', onWarning);\r\n        resetForSerialization();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// https://fetch.spec.whatwg.org/\r\n// https://websockets.spec.whatwg.org/\r\nfunction setupUndici() {\r\n  if (getOptionValue('--no-experimental-fetch')) {\r\n    delete globalThis.fetch;\r\n    delete globalThis.FormData;\r\n    delete globalThis.Headers;\r\n    delete globalThis.Request;\r\n    delete globalThis.Response;\r\n  }\r\n\r\n  if (getOptionValue('--no-experimental-websocket')) {\r\n    delete globalThis.WebSocket;\r\n  }\r\n}\r\n\r\n// https://html.spec.whatwg.org/multipage/server-sent-events.html\r\nfunction setupEventsource() {\r\n  if (!getOptionValue('--experimental-eventsource')) {\r\n    delete globalThis.EventSource;\r\n  }\r\n}\r\n\r\n// TODO(aduh95): move this to internal/bootstrap/web/* when the CLI flag is\r\n//               removed.\r\nfunction setupNavigator() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-navigator')) {\r\n    return;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/system-state.html#the-navigator-object\r\n  exposeLazyInterfaces(globalThis, 'internal/navigator', ['Navigator']);\r\n  defineReplaceableLazyAttribute(globalThis, 'internal/navigator', ['navigator'], false);\r\n}\r\n\r\n// TODO(aduh95): move this to internal/bootstrap/web/* when the CLI flag is\r\n//               removed.\r\nfunction setupWebCrypto() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-webcrypto')) {\r\n    return;\r\n  }\r\n\r\n  if (internalBinding('config').hasOpenSSL) {\r\n    defineReplaceableLazyAttribute(\r\n      globalThis,\r\n      'internal/crypto/webcrypto',\r\n      ['crypto'],\r\n      false,\r\n      function cryptoThisCheck() {\r\n        if (this !== globalThis && this != null)\r\n          throw new ERR_INVALID_THIS(\r\n            'nullish or must be the global object');\r\n      },\r\n    );\r\n    exposeLazyInterfaces(\r\n      globalThis, 'internal/crypto/webcrypto',\r\n      ['Crypto', 'CryptoKey', 'SubtleCrypto'],\r\n    );\r\n  } else {\r\n    ObjectDefineProperty(globalThis, 'crypto',\r\n                         { __proto__: null, ...ObjectGetOwnPropertyDescriptor({\r\n                           get crypto() {\r\n                             throw new ERR_NO_CRYPTO();\r\n                           },\r\n                         }, 'crypto') });\r\n\r\n  }\r\n}\r\n\r\nfunction setupCodeCoverage() {\r\n  // Resolve the coverage directory to an absolute path, and\r\n  // overwrite process.env so that the original path gets passed\r\n  // to child processes even when they switch cwd. Don't do anything if the\r\n  // --experimental-test-coverage flag is present, as the test runner will\r\n  // handle coverage.\r\n  if (process.env.NODE_V8_COVERAGE &&\r\n      !getOptionValue('--experimental-test-coverage')) {\r\n    process.env.NODE_V8_COVERAGE =\r\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\r\n  }\r\n}\r\n\r\n// TODO(daeyeon): move this to internal/bootstrap/web/* when the CLI flag is\r\n//                removed.\r\nfunction setupCustomEvent() {\r\n  if (getEmbedderOptions().noBrowserGlobals ||\r\n      getOptionValue('--no-experimental-global-customevent')) {\r\n    return;\r\n  }\r\n  const { CustomEvent } = require('internal/event_target');\r\n  exposeInterface(globalThis, 'CustomEvent', CustomEvent);\r\n}\r\n\r\nfunction setupStacktracePrinterOnSigint() {\r\n  if (!getOptionValue('--trace-sigint')) {\r\n    return;\r\n  }\r\n  const { SigintWatchdog } = require('internal/watchdog');\r\n\r\n  const watchdog = new SigintWatchdog();\r\n  watchdog.start();\r\n}\r\n\r\nfunction initializeReport() {\r\n  ObjectDefineProperty(process, 'report', {\r\n    __proto__: null,\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const { report } = require('internal/process/report');\r\n      return report;\r\n    },\r\n  });\r\n}\r\n\r\nfunction setupDebugEnv() {\r\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\r\n  if (getOptionValue('--expose-internals')) {\r\n    require('internal/bootstrap/realm').BuiltinModule.exposeInternals();\r\n  }\r\n}\r\n\r\n// This has to be called after initializeReport() is called\r\nfunction initializeReportSignalHandlers() {\r\n  if (getOptionValue('--report-on-signal')) {\r\n    const { addSignalHandler } = require('internal/process/report');\r\n    addSignalHandler();\r\n  }\r\n}\r\n\r\nfunction initializeHeapSnapshotSignalHandlers() {\r\n  const signal = getOptionValue('--heapsnapshot-signal');\r\n  const diagnosticDir = getOptionValue('--diagnostic-dir');\r\n\r\n  if (!signal)\r\n    return;\r\n\r\n  require('internal/validators').validateSignalName(signal);\r\n  const { writeHeapSnapshot } = require('v8');\r\n\r\n  function doWriteHeapSnapshot() {\r\n    const heapSnapshotFilename = getHeapSnapshotFilename(diagnosticDir);\r\n    writeHeapSnapshot(heapSnapshotFilename);\r\n  }\r\n  process.on(signal, doWriteHeapSnapshot);\r\n\r\n  // The code above would add the listener back during deserialization,\r\n  // if applicable.\r\n  if (isBuildingSnapshot()) {\r\n    addSerializeCallback(() => {\r\n      process.removeListener(signal, doWriteHeapSnapshot);\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupTraceCategoryState() {\r\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\r\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\r\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\r\n}\r\n\r\nfunction setupInspectorHooks() {\r\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap,\r\n  // we cannot immediately call into JS to enable the hooks, which could\r\n  // interrupt the JS execution of bootstrap. So instead we save the\r\n  // notification in the inspector agent if it's sent in the middle of\r\n  // bootstrap, and process the notification later here.\r\n  if (internalBinding('config').hasInspector) {\r\n    const {\r\n      enable,\r\n      disable,\r\n    } = require('internal/inspector_async_hook');\r\n    internalBinding('inspector').registerAsyncHook(enable, disable);\r\n  }\r\n}\r\n\r\n// In general deprecations are initialized wherever the APIs are implemented,\r\n// this is used to deprecate APIs implemented in C++ where the deprecation\r\n// utilities are not easily accessible.\r\nfunction initializeDeprecations() {\r\n  const { deprecate } = require('internal/util');\r\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\r\n\r\n  // DEP0103: access to `process.binding('util').isX` type checkers\r\n  // TODO(addaleax): Turn into a full runtime deprecation.\r\n  const utilBinding = internalBinding('util');\r\n  const types = require('internal/util/types');\r\n  for (const name of [\r\n    'isArrayBuffer',\r\n    'isArrayBufferView',\r\n    'isAsyncFunction',\r\n    'isDataView',\r\n    'isDate',\r\n    'isExternal',\r\n    'isMap',\r\n    'isMapIterator',\r\n    'isNativeError',\r\n    'isPromise',\r\n    'isRegExp',\r\n    'isSet',\r\n    'isSetIterator',\r\n    'isTypedArray',\r\n    'isUint8Array',\r\n    'isAnyArrayBuffer',\r\n  ]) {\r\n    utilBinding[name] = pendingDeprecation ?\r\n      deprecate(types[name],\r\n                'Accessing native typechecking bindings of Node ' +\r\n                'directly is deprecated. ' +\r\n                `Please use \\`util.types.${name}\\` instead.`,\r\n                'DEP0103') :\r\n      types[name];\r\n  }\r\n\r\n  // TODO(joyeecheung): this is a legacy property exposed to process.\r\n  // Now that we use the config binding to carry this information, remove\r\n  // it from the process. We may consider exposing it properly in\r\n  // process.features.\r\n  const { noBrowserGlobals } = internalBinding('config');\r\n  if (noBrowserGlobals) {\r\n    ObjectDefineProperty(process, '_noBrowserGlobals', {\r\n      __proto__: null,\r\n      writable: false,\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: noBrowserGlobals,\r\n    });\r\n  }\r\n\r\n  if (pendingDeprecation) {\r\n    process.binding = deprecate(process.binding,\r\n                                'process.binding() is deprecated. ' +\r\n                                'Please use public APIs instead.', 'DEP0111');\r\n\r\n    process._tickCallback = deprecate(process._tickCallback,\r\n                                      'process._tickCallback() is deprecated',\r\n                                      'DEP0134');\r\n  }\r\n}\r\n\r\nfunction setupChildProcessIpcChannel() {\r\n  if (process.env.NODE_CHANNEL_FD) {\r\n    const assert = require('internal/assert');\r\n\r\n    const fd = NumberParseInt(process.env.NODE_CHANNEL_FD, 10);\r\n    assert(fd >= 0);\r\n\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_CHANNEL_FD;\r\n\r\n    const serializationMode =\r\n      process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';\r\n    delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;\r\n\r\n    require('child_process')._forkChild(fd, serializationMode);\r\n    assert(process.send);\r\n  }\r\n}\r\n\r\nfunction initializeClusterIPC() {\r\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\r\n    const cluster = require('cluster');\r\n    cluster._setupWorker();\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_UNIQUE_ID;\r\n  }\r\n}\r\n\r\nfunction initializePermission() {\r\n  const experimentalPermission = getOptionValue('--experimental-permission');\r\n  if (experimentalPermission) {\r\n    process.binding = function binding(_module) {\r\n      throw new ERR_ACCESS_DENIED('process.binding');\r\n    };\r\n    // Guarantee path module isn't monkey-patched to bypass permission model\r\n    ObjectFreeze(require('path'));\r\n    process.emitWarning('Permission is an experimental feature',\r\n                        'ExperimentalWarning');\r\n    const { has, deny } = require('internal/process/permission');\r\n    const warnFlags = [\r\n      '--allow-addons',\r\n      '--allow-child-process',\r\n      '--allow-wasi',\r\n      '--allow-worker',\r\n    ];\r\n    for (const flag of warnFlags) {\r\n      if (getOptionValue(flag)) {\r\n        process.emitWarning(\r\n          `The flag ${flag} must be used with extreme caution. ` +\r\n        'It could invalidate the permission model.', 'SecurityWarning');\r\n      }\r\n    }\r\n    const warnCommaFlags = [\r\n      '--allow-fs-read',\r\n      '--allow-fs-write',\r\n    ];\r\n    for (const flag of warnCommaFlags) {\r\n      const value = getOptionValue(flag);\r\n      if (value.length === 1 && value[0].includes(',')) {\r\n        process.emitWarning(\r\n          `The ${flag} CLI flag has changed. ` +\r\n        'Passing a comma-separated list of paths is no longer valid. ' +\r\n        'Documentation can be found at ' +\r\n        'https://nodejs.org/api/permissions.html#file-system-permissions',\r\n          'Warning',\r\n        );\r\n      }\r\n    }\r\n\r\n    ObjectDefineProperty(process, 'permission', {\r\n      __proto__: null,\r\n      enumerable: true,\r\n      configurable: false,\r\n      value: {\r\n        has,\r\n        deny,\r\n      },\r\n    });\r\n  } else {\r\n    const availablePermissionFlags = [\r\n      '--allow-fs-read',\r\n      '--allow-fs-write',\r\n      '--allow-addons',\r\n      '--allow-child-process',\r\n      '--allow-wasi',\r\n      '--allow-worker',\r\n    ];\r\n    ArrayPrototypeForEach(availablePermissionFlags, (flag) => {\r\n      const value = getOptionValue(flag);\r\n      if (value.length) {\r\n        throw new ERR_MISSING_OPTION('--experimental-permission');\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction initializeCJSLoader() {\r\n  const { initializeCJS } = require('internal/modules/cjs/loader');\r\n  initializeCJS();\r\n}\r\n\r\nfunction initializeESMLoader(forceDefaultLoader) {\r\n  const { initializeESM } = require('internal/modules/esm/utils');\r\n  initializeESM(forceDefaultLoader);\r\n\r\n  // Patch the vm module when --experimental-vm-modules is on.\r\n  // Please update the comments in vm.js when this block changes.\r\n  if (getOptionValue('--experimental-vm-modules')) {\r\n    const {\r\n      Module, SourceTextModule, SyntheticModule,\r\n    } = require('internal/vm/module');\r\n    const vm = require('vm');\r\n    vm.Module = Module;\r\n    vm.SourceTextModule = SourceTextModule;\r\n    vm.SyntheticModule = SyntheticModule;\r\n  }\r\n}\r\n\r\nfunction initializeSourceMapsHandlers() {\r\n  const {\r\n    setSourceMapsEnabled,\r\n  } = require('internal/source_map/source_map_cache');\r\n  setSourceMapsEnabled(getOptionValue('--enable-source-maps'));\r\n}\r\n\r\nfunction initializeFrozenIntrinsics() {\r\n  if (getOptionValue('--frozen-intrinsics')) {\r\n    process.emitWarning('The --frozen-intrinsics flag is experimental',\r\n                        'ExperimentalWarning');\r\n    require('internal/freeze_intrinsics')();\r\n  }\r\n}\r\n\r\nfunction runEmbedderPreload() {\r\n  internalBinding('mksnapshot').runEmbedderPreload(process, require);\r\n}\r\n\r\nfunction loadPreloadModules() {\r\n  // For user code, we preload modules if `-r` is passed\r\n  const preloadModules = getOptionValue('--require');\r\n  if (preloadModules && preloadModules.length > 0) {\r\n    const {\r\n      Module: {\r\n        _preloadModules,\r\n      },\r\n    } = require('internal/modules/cjs/loader');\r\n    _preloadModules(preloadModules);\r\n  }\r\n}\r\n\r\nfunction markBootstrapComplete() {\r\n  internalBinding('performance').markBootstrapComplete();\r\n}\r\n\r\n// Sequence number for diagnostic filenames\r\nlet sequenceNumOfheapSnapshot = 0;\r\n\r\n// To generate the HeapSnapshotFilename while using custom diagnosticDir\r\nfunction getHeapSnapshotFilename(diagnosticDir) {\r\n  if (!diagnosticDir) return undefined;\r\n\r\n  const date = new Date();\r\n\r\n  const year = DatePrototypeGetFullYear(date);\r\n  const month = String(DatePrototypeGetMonth(date) + 1).padStart(2, '0');\r\n  const day = String(DatePrototypeGetDate(date)).padStart(2, '0');\r\n  const hours = String(DatePrototypeGetHours(date)).padStart(2, '0');\r\n  const minutes = String(DatePrototypeGetMinutes(date)).padStart(2, '0');\r\n  const seconds = String(DatePrototypeGetSeconds(date)).padStart(2, '0');\r\n\r\n  const dateString = `${year}${month}${day}`;\r\n  const timeString = `${hours}${minutes}${seconds}`;\r\n  const pid = process.pid;\r\n  const threadId = internalBinding('worker').threadId;\r\n  const fileSequence = (++sequenceNumOfheapSnapshot).toString().padStart(3, '0');\r\n\r\n  return `${diagnosticDir}/Heap.${dateString}.${timeString}.${pid}.${threadId}.${fileSequence}.heapsnapshot`;\r\n}\r\n\r\nmodule.exports = {\r\n  setupUserModules,\r\n  prepareMainThreadExecution,\r\n  prepareWorkerThreadExecution,\r\n  prepareShadowRealmExecution,\r\n  markBootstrapComplete,\r\n  loadPreloadModules,\r\n  initializeFrozenIntrinsics,\r\n};\r\n"
  },
  "66": {
    "metadata": {
      "scriptId": "66",
      "url": "node:internal/inspector_async_hook",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 76,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e24ff7ea9dbcadf65234672fb72ed17b1a10c3bd840c571774a2f3714c9a3981",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2049,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/inspector_async_hook"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  SafeSet,\r\n} = primordials;\r\n\r\nlet hook;\r\nlet config;\r\n\r\nfunction lazyHookCreation() {\r\n  const inspector = internalBinding('inspector');\r\n  const { createHook } = require('async_hooks');\r\n  config = internalBinding('config');\r\n\r\n  hook = createHook({\r\n    init(asyncId, type, triggerAsyncId, resource) {\r\n    // It's difficult to tell which tasks will be recurring and which won't,\r\n    // therefore we mark all tasks as recurring. Based on the discussion\r\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293,\r\n    // this should be fine as long as we call asyncTaskCanceled() too.\r\n      const recurring = true;\r\n      if (type === 'PROMISE')\r\n        this.promiseIds.add(asyncId);\r\n      else\r\n        inspector.asyncTaskScheduled(type, asyncId, recurring);\r\n    },\r\n\r\n    before(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskStarted(asyncId);\r\n    },\r\n\r\n    after(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskFinished(asyncId);\r\n    },\r\n\r\n    destroy(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return this.promiseIds.delete(asyncId);\r\n      inspector.asyncTaskCanceled(asyncId);\r\n    },\r\n  });\r\n\r\n  hook.promiseIds = new SafeSet();\r\n}\r\n\r\nfunction enable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  if (config.bits < 64) {\r\n    // V8 Inspector stores task ids as (void*) pointers.\r\n    // async_hooks store ids as 64bit numbers.\r\n    // As a result, we cannot reliably translate async_hook ids to V8 async_task\r\n    // ids on 32bit platforms.\r\n    process.emitWarning(\r\n      'Warning: Async stack traces in debugger are not available ' +\r\n      `on ${config.bits}bit platforms. The feature is disabled.`,\r\n      {\r\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE',\r\n      });\r\n  } else {\r\n    hook.enable();\r\n  }\r\n}\r\n\r\nfunction disable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  hook.disable();\r\n}\r\n\r\nmodule.exports = {\r\n  enable,\r\n  disable,\r\n};\r\n"
  },
  "67": {
    "metadata": {
      "scriptId": "67",
      "url": "node:internal/modules/run_main",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 176,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "92ee4ad2311bdd12ec331e3a038c793daac87951478914c8cb96eb8d49ec109d",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 6696,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/modules/run_main"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  StringPrototypeEndsWith,\r\n  globalThis,\r\n} = primordials;\r\n\r\nconst { getNearestParentPackageJSONType } = internalBinding('modules');\r\nconst { getOptionValue } = require('internal/options');\r\nconst path = require('path');\r\nconst { pathToFileURL } = require('internal/url');\r\nconst { kEmptyObject, getCWDURL } = require('internal/util');\r\nconst {\r\n  hasUncaughtExceptionCaptureCallback,\r\n} = require('internal/process/execution');\r\nconst {\r\n  triggerUncaughtException,\r\n} = internalBinding('errors');\r\nconst {\r\n  privateSymbols: {\r\n    entry_point_promise_private_symbol,\r\n  },\r\n} = internalBinding('util');\r\n/**\r\n * Get the absolute path to the main entry point.\r\n * @param {string} main - Entry point path\r\n */\r\nfunction resolveMainPath(main) {\r\n  const defaultType = getOptionValue('--experimental-default-type');\r\n  /** @type {string} */\r\n  let mainPath;\r\n  if (defaultType === 'module') {\r\n    if (getOptionValue('--preserve-symlinks-main')) { return; }\r\n    mainPath = path.resolve(main);\r\n  } else {\r\n    // Extension searching for the main entry point is supported only in legacy mode.\r\n    // Module._findPath is monkey-patchable here.\r\n    const { Module } = require('internal/modules/cjs/loader');\r\n    mainPath = Module._findPath(path.resolve(main), null, true);\r\n  }\r\n  if (!mainPath) { return; }\r\n\r\n  const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\r\n  if (!preserveSymlinksMain) {\r\n    const { toRealPath } = require('internal/modules/helpers');\r\n    try {\r\n      mainPath = toRealPath(mainPath);\r\n    } catch (err) {\r\n      if (defaultType === 'module' && err?.code === 'ENOENT') {\r\n        const { decorateErrorWithCommonJSHints } = require('internal/modules/esm/resolve');\r\n        const { getCWDURL } = require('internal/util');\r\n        decorateErrorWithCommonJSHints(err, mainPath, getCWDURL());\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  return mainPath;\r\n}\r\n\r\n/**\r\n * Determine whether the main entry point should be loaded through the ESM Loader.\r\n * @param {string} mainPath - Absolute path to the main entry point\r\n */\r\nfunction shouldUseESMLoader(mainPath) {\r\n  if (getOptionValue('--experimental-default-type') === 'module') { return true; }\r\n\r\n  /**\r\n   * @type {string[]} userLoaders A list of custom loaders registered by the user\r\n   * (or an empty list when none have been registered).\r\n   */\r\n  const userLoaders = getOptionValue('--experimental-loader');\r\n  /**\r\n   * @type {string[]} userImports A list of preloaded modules registered by the user\r\n   * (or an empty list when none have been registered).\r\n   */\r\n  const userImports = getOptionValue('--import');\r\n  if (userLoaders.length > 0 || userImports.length > 0) { return true; }\r\n\r\n  // Determine the module format of the entry point.\r\n  if (mainPath && StringPrototypeEndsWith(mainPath, '.mjs')) { return true; }\r\n  if (!mainPath || StringPrototypeEndsWith(mainPath, '.cjs')) { return false; }\r\n\r\n  const type = getNearestParentPackageJSONType(mainPath);\r\n\r\n  // No package.json or no `type` field.\r\n  if (type === undefined || type === 'none') {\r\n    return false;\r\n  }\r\n\r\n  return type === 'module';\r\n}\r\n\r\n/**\r\n * @param {function(ModuleLoader):ModuleWrap|undefined} callback\r\n */\r\nasync function asyncRunEntryPointWithESMLoader(callback) {\r\n  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\r\n  try {\r\n    const userImports = getOptionValue('--import');\r\n    if (userImports.length > 0) {\r\n      const parentURL = getCWDURL().href;\r\n      for (let i = 0; i < userImports.length; i++) {\r\n        await cascadedLoader.import(userImports[i], parentURL, kEmptyObject);\r\n      }\r\n    } else {\r\n      cascadedLoader.forceLoadHooks();\r\n    }\r\n    await callback(cascadedLoader);\r\n  } catch (err) {\r\n    if (hasUncaughtExceptionCaptureCallback()) {\r\n      process._fatalException(err);\r\n      return;\r\n    }\r\n    triggerUncaughtException(\r\n      err,\r\n      true, /* fromPromise */\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * This initializes the ESM loader and runs --import (if any) before executing the\r\n * callback to run the entry point.\r\n * If the callback intends to evaluate a ESM module as entry point, it should return\r\n * the corresponding ModuleWrap so that stalled TLA can be checked a process exit.\r\n * @param {function(ModuleLoader):ModuleWrap|undefined} callback\r\n * @returns {Promise}\r\n */\r\nfunction runEntryPointWithESMLoader(callback) {\r\n  const promise = asyncRunEntryPointWithESMLoader(callback);\r\n  // Register the promise - if by the time the event loop finishes running, this is\r\n  // still unsettled, we'll search the graph from the entry point module and print\r\n  // the location of any unsettled top-level await found.\r\n  globalThis[entry_point_promise_private_symbol] = promise;\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Parse the CLI main entry point string and run it.\r\n * For backwards compatibility, we have to run a bunch of monkey-patchable code that belongs to the CJS loader (exposed\r\n * by `require('module')`) even when the entry point is ESM.\r\n * This monkey-patchable code is bypassed under `--experimental-default-type=module`.\r\n * Because of backwards compatibility, this function is exposed publicly via `import { runMain } from 'node:module'`.\r\n * When `--experimental-detect-module` is passed, this function will attempt to run ambiguous (no explicit extension, no\r\n * `package.json` type field) entry points as CommonJS first; under certain conditions, it will retry running as ESM.\r\n * @param {string} main - First positional CLI argument, such as `'entry.js'` from `node entry.js`\r\n */\r\nfunction executeUserEntryPoint(main = process.argv[1]) {\r\n  const resolvedMain = resolveMainPath(main);\r\n  const useESMLoader = shouldUseESMLoader(resolvedMain);\r\n  let mainURL;\r\n  // Unless we know we should use the ESM loader to handle the entry point per the checks in `shouldUseESMLoader`, first\r\n  // try to run the entry point via the CommonJS loader; and if that fails under certain conditions, retry as ESM.\r\n  if (!useESMLoader) {\r\n    const cjsLoader = require('internal/modules/cjs/loader');\r\n    const { wrapModuleLoad } = cjsLoader;\r\n    wrapModuleLoad(main, null, true);\r\n  } else {\r\n    const mainPath = resolvedMain || main;\r\n    if (mainURL === undefined) {\r\n      mainURL = pathToFileURL(mainPath).href;\r\n    }\r\n\r\n    runEntryPointWithESMLoader((cascadedLoader) => {\r\n      // Note that if the graph contains unsettled TLA, this may never resolve\r\n      // even after the event loop stops running.\r\n      return cascadedLoader.import(mainURL, undefined, { __proto__: null }, true);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  executeUserEntryPoint,\r\n  runEntryPointWithESMLoader,\r\n};\r\n"
  },
  "68": {
    "metadata": {
      "scriptId": "68",
      "url": "node:internal/dns/utils",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 357,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "e755db9649347e80549c5066472d4657859c1272d44f591970dcbdfa20e8264c",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 9991,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/dns/utils"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  ArrayPrototypeForEach,\r\n  ArrayPrototypeMap,\r\n  ArrayPrototypePush,\r\n  FunctionPrototypeBind,\r\n  NumberParseInt,\r\n  RegExpPrototypeExec,\r\n  RegExpPrototypeSymbolReplace,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_DNS_SET_SERVERS_FAILED,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_IP_ADDRESS,\r\n  },\r\n} = require('internal/errors');\r\nconst { isIP } = require('internal/net');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  validateArray,\r\n  validateInt32,\r\n  validateOneOf,\r\n  validateString,\r\n} = require('internal/validators');\r\nlet binding;\r\nfunction lazyBinding() {\r\n  binding ??= internalBinding('cares_wrap');\r\n  return binding;\r\n}\r\nconst IANA_DNS_PORT = 53;\r\nconst IPv6RE = /^\\[([^[\\]]*)\\]/;\r\nconst addrSplitRE = /(^.+?)(?::(\\d+))?$/;\r\n\r\nconst {\r\n  namespace: {\r\n    addSerializeCallback,\r\n    addDeserializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nfunction validateTimeout(options) {\r\n  const { timeout = -1 } = { ...options };\r\n  validateInt32(timeout, 'options.timeout', -1);\r\n  return timeout;\r\n}\r\n\r\nfunction validateTries(options) {\r\n  const { tries = 4 } = { ...options };\r\n  validateInt32(tries, 'options.tries', 1);\r\n  return tries;\r\n}\r\n\r\nconst kSerializeResolver = Symbol('dns:resolver:serialize');\r\nconst kDeserializeResolver = Symbol('dns:resolver:deserialize');\r\nconst kSnapshotStates = Symbol('dns:resolver:config');\r\nconst kInitializeHandle = Symbol('dns:resolver:initializeHandle');\r\nconst kSetServersInteral = Symbol('dns:resolver:setServers');\r\n\r\n// Resolver instances correspond 1:1 to c-ares channels.\r\n\r\nclass ResolverBase {\r\n  constructor(options = undefined) {\r\n    const timeout = validateTimeout(options);\r\n    const tries = validateTries(options);\r\n    // If we are building snapshot, save the states of the resolver along\r\n    // the way.\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates] = { timeout, tries };\r\n    }\r\n    this[kInitializeHandle](timeout, tries);\r\n  }\r\n\r\n  [kInitializeHandle](timeout, tries) {\r\n    const { ChannelWrap } = lazyBinding();\r\n    this._handle = new ChannelWrap(timeout, tries);\r\n  }\r\n\r\n  cancel() {\r\n    this._handle.cancel();\r\n  }\r\n\r\n  getServers() {\r\n    return ArrayPrototypeMap(this._handle.getServers() || [], (val) => {\r\n      if (!val[1] || val[1] === IANA_DNS_PORT)\r\n        return val[0];\r\n\r\n      const host = isIP(val[0]) === 6 ? `[${val[0]}]` : val[0];\r\n      return `${host}:${val[1]}`;\r\n    });\r\n  }\r\n\r\n  setServers(servers) {\r\n    validateArray(servers, 'servers');\r\n\r\n    // Cache the original servers because in the event of an error while\r\n    // setting the servers, c-ares won't have any servers available for\r\n    // resolution.\r\n    const newSet = [];\r\n    ArrayPrototypeForEach(servers, (serv, index) => {\r\n      validateString(serv, `servers[${index}]`);\r\n      let ipVersion = isIP(serv);\r\n\r\n      if (ipVersion !== 0)\r\n        return ArrayPrototypePush(newSet, [ipVersion, serv, IANA_DNS_PORT]);\r\n\r\n      const match = RegExpPrototypeExec(IPv6RE, serv);\r\n\r\n      // Check for an IPv6 in brackets.\r\n      if (match) {\r\n        ipVersion = isIP(match[1]);\r\n\r\n        if (ipVersion !== 0) {\r\n          const port = NumberParseInt(\r\n            RegExpPrototypeSymbolReplace(addrSplitRE, serv, '$2')) || IANA_DNS_PORT;\r\n          return ArrayPrototypePush(newSet, [ipVersion, match[1], port]);\r\n        }\r\n      }\r\n\r\n      // addr::port\r\n      const addrSplitMatch = RegExpPrototypeExec(addrSplitRE, serv);\r\n\r\n      if (addrSplitMatch) {\r\n        const hostIP = addrSplitMatch[1];\r\n        const port = addrSplitMatch[2] || IANA_DNS_PORT;\r\n\r\n        ipVersion = isIP(hostIP);\r\n\r\n        if (ipVersion !== 0) {\r\n          return ArrayPrototypePush(\r\n            newSet, [ipVersion, hostIP, NumberParseInt(port)]);\r\n        }\r\n      }\r\n\r\n      throw new ERR_INVALID_IP_ADDRESS(serv);\r\n    });\r\n\r\n    this[kSetServersInteral](newSet, servers);\r\n  }\r\n\r\n  [kSetServersInteral](newSet, servers) {\r\n    const orig = ArrayPrototypeMap(this._handle.getServers() || [], (val) => {\r\n      val.unshift(isIP(val[0]));\r\n      return val;\r\n    });\r\n    const errorNumber = this._handle.setServers(newSet);\r\n\r\n    if (errorNumber !== 0) {\r\n      // Reset the servers to the old servers, because ares probably unset them.\r\n      this._handle.setServers(orig);\r\n      const { strerror } = lazyBinding();\r\n      const err = strerror(errorNumber);\r\n      throw new ERR_DNS_SET_SERVERS_FAILED(err, servers);\r\n    }\r\n\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates].servers = newSet;\r\n    }\r\n  }\r\n\r\n\r\n  setLocalAddress(ipv4, ipv6) {\r\n    validateString(ipv4, 'ipv4');\r\n\r\n    if (ipv6 !== undefined) {\r\n      validateString(ipv6, 'ipv6');\r\n    }\r\n\r\n    this._handle.setLocalAddress(ipv4, ipv6);\r\n\r\n    if (isBuildingSnapshot()) {\r\n      this[kSnapshotStates].localAddress = { ipv4, ipv6 };\r\n    }\r\n  }\r\n\r\n  // TODO(joyeecheung): consider exposing this if custom DNS resolvers\r\n  // end up being useful for snapshot users.\r\n  [kSerializeResolver]() {\r\n    this._handle = null;  // We'll restore it during deserialization.\r\n    addDeserializeCallback(function deserializeResolver(resolver) {\r\n      resolver[kDeserializeResolver]();\r\n    }, this);\r\n  }\r\n\r\n  [kDeserializeResolver]() {\r\n    const { timeout, tries, localAddress, servers } = this[kSnapshotStates];\r\n    this[kInitializeHandle](timeout, tries);\r\n    if (localAddress) {\r\n      const { ipv4, ipv6 } = localAddress;\r\n      this._handle.setLocalAddress(ipv4, ipv6);\r\n    }\r\n    if (servers) {\r\n      this[kSetServersInteral](servers, servers);\r\n    }\r\n  }\r\n}\r\n\r\nlet defaultResolver;\r\nlet dnsOrder;\r\n\r\nfunction initializeDns() {\r\n  const orderFromCLI = getOptionValue('--dns-result-order');\r\n  if (!orderFromCLI) {\r\n    dnsOrder ??= 'verbatim';\r\n  } else {\r\n    // Allow the deserialized application to override order from CLI.\r\n    validateOneOf(orderFromCLI, '--dns-result-order', ['verbatim', 'ipv4first', 'ipv6first']);\r\n    dnsOrder = orderFromCLI;\r\n  }\r\n\r\n  if (!isBuildingSnapshot()) {\r\n    return;\r\n  }\r\n\r\n  addSerializeCallback(() => {\r\n    defaultResolver?.[kSerializeResolver]();\r\n  });\r\n}\r\n\r\nconst resolverKeys = [\r\n  'getServers',\r\n  'resolve',\r\n  'resolve4',\r\n  'resolve6',\r\n  'resolveAny',\r\n  'resolveCaa',\r\n  'resolveCname',\r\n  'resolveMx',\r\n  'resolveNaptr',\r\n  'resolveNs',\r\n  'resolvePtr',\r\n  'resolveSoa',\r\n  'resolveSrv',\r\n  'resolveTxt',\r\n  'reverse',\r\n];\r\n\r\nfunction getDefaultResolver() {\r\n  // We do this here instead of pre-execution so that the default resolver is\r\n  // only ever created when the user loads any dns module.\r\n  if (defaultResolver === undefined) {\r\n    defaultResolver = new ResolverBase();\r\n  }\r\n  return defaultResolver;\r\n}\r\n\r\nfunction setDefaultResolver(resolver) {\r\n  defaultResolver = resolver;\r\n}\r\n\r\nfunction bindDefaultResolver(target, source) {\r\n  const defaultResolver = getDefaultResolver();\r\n  ArrayPrototypeForEach(resolverKeys, (key) => {\r\n    target[key] = FunctionPrototypeBind(source[key], defaultResolver);\r\n  });\r\n}\r\n\r\nfunction validateHints(hints) {\r\n  const { AI_ADDRCONFIG, AI_ALL, AI_V4MAPPED } = lazyBinding();\r\n  if ((hints & ~(AI_ADDRCONFIG | AI_ALL | AI_V4MAPPED)) !== 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('hints', hints);\r\n  }\r\n}\r\n\r\nlet invalidHostnameWarningEmitted = false;\r\nfunction emitInvalidHostnameWarning(hostname) {\r\n  if (!invalidHostnameWarningEmitted) {\r\n    process.emitWarning(\r\n      `The provided hostname \"${hostname}\" is not a valid ` +\r\n      'hostname, and is supported in the dns module solely for compatibility.',\r\n      'DeprecationWarning',\r\n      'DEP0118',\r\n    );\r\n    invalidHostnameWarningEmitted = true;\r\n  }\r\n}\r\n\r\nfunction setDefaultResultOrder(value) {\r\n  validateOneOf(value, 'dnsOrder', ['verbatim', 'ipv4first', 'ipv6first']);\r\n  dnsOrder = value;\r\n}\r\n\r\nfunction getDefaultResultOrder() {\r\n  return dnsOrder;\r\n}\r\n\r\nfunction createResolverClass(resolver) {\r\n  const resolveMap = { __proto__: null };\r\n\r\n  class Resolver extends ResolverBase {}\r\n\r\n  Resolver.prototype.resolveAny = resolveMap.ANY = resolver('queryAny');\r\n  Resolver.prototype.resolve4 = resolveMap.A = resolver('queryA');\r\n  Resolver.prototype.resolve6 = resolveMap.AAAA = resolver('queryAaaa');\r\n  Resolver.prototype.resolveCaa = resolveMap.CAA = resolver('queryCaa');\r\n  Resolver.prototype.resolveCname = resolveMap.CNAME = resolver('queryCname');\r\n  Resolver.prototype.resolveMx = resolveMap.MX = resolver('queryMx');\r\n  Resolver.prototype.resolveNs = resolveMap.NS = resolver('queryNs');\r\n  Resolver.prototype.resolveTxt = resolveMap.TXT = resolver('queryTxt');\r\n  Resolver.prototype.resolveSrv = resolveMap.SRV = resolver('querySrv');\r\n  Resolver.prototype.resolvePtr = resolveMap.PTR = resolver('queryPtr');\r\n  Resolver.prototype.resolveNaptr = resolveMap.NAPTR = resolver('queryNaptr');\r\n  Resolver.prototype.resolveSoa = resolveMap.SOA = resolver('querySoa');\r\n  Resolver.prototype.reverse = resolver('getHostByAddr');\r\n\r\n  return {\r\n    resolveMap,\r\n    Resolver,\r\n  };\r\n}\r\n\r\n// ERROR CODES\r\nconst errorCodes = {\r\n  NODATA: 'ENODATA',\r\n  FORMERR: 'EFORMERR',\r\n  SERVFAIL: 'ESERVFAIL',\r\n  NOTFOUND: 'ENOTFOUND',\r\n  NOTIMP: 'ENOTIMP',\r\n  REFUSED: 'EREFUSED',\r\n  BADQUERY: 'EBADQUERY',\r\n  BADNAME: 'EBADNAME',\r\n  BADFAMILY: 'EBADFAMILY',\r\n  BADRESP: 'EBADRESP',\r\n  CONNREFUSED: 'ECONNREFUSED',\r\n  TIMEOUT: 'ETIMEOUT',\r\n  EOF: 'EOF',\r\n  FILE: 'EFILE',\r\n  NOMEM: 'ENOMEM',\r\n  DESTRUCTION: 'EDESTRUCTION',\r\n  BADSTR: 'EBADSTR',\r\n  BADFLAGS: 'EBADFLAGS',\r\n  NONAME: 'ENONAME',\r\n  BADHINTS: 'EBADHINTS',\r\n  NOTINITIALIZED: 'ENOTINITIALIZED',\r\n  LOADIPHLPAPI: 'ELOADIPHLPAPI',\r\n  ADDRGETNETWORKPARAMS: 'EADDRGETNETWORKPARAMS',\r\n  CANCELLED: 'ECANCELLED',\r\n};\r\n\r\nmodule.exports = {\r\n  bindDefaultResolver,\r\n  getDefaultResolver,\r\n  setDefaultResolver,\r\n  validateHints,\r\n  validateTimeout,\r\n  validateTries,\r\n  emitInvalidHostnameWarning,\r\n  getDefaultResultOrder,\r\n  setDefaultResultOrder,\r\n  errorCodes,\r\n  createResolverClass,\r\n  initializeDns,\r\n};\r\n"
  },
  "69": {
    "metadata": {
      "scriptId": "69",
      "url": "node:internal/net",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 78,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "b0bf60614809ef05e21a5b15557753dba8202a0a0f2a622233fcbf4e82bf7808",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 2335,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/net"
    },
    "source": "'use strict';\r\n\r\nconst {\r\n  RegExp,\r\n  RegExpPrototypeTest,\r\n  Symbol,\r\n} = primordials;\r\n\r\nconst Buffer = require('buffer').Buffer;\r\nconst { writeBuffer } = internalBinding('fs');\r\nconst {\r\n  UVException,\r\n} = require('internal/errors');\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])';\r\nconst v4Str = `(?:${v4Seg}\\\\.){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(?:' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(?::${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(?::${v6Seg}){0,1}:${v4Str}|(?::${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(?::${v6Seg}){0,2}:${v4Str}|(?::${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(?::${v6Seg}){0,3}:${v4Str}|(?::${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(?::${v6Seg}){0,4}:${v4Str}|(?::${v6Seg}){1,6}|:)|` +\r\n  `(?::(?:(?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n')(?:%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\nfunction isIPv4(s) {\r\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\r\n  // no longer creates a perf regression in the dns benchmark.\r\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\r\n  return RegExpPrototypeTest(IPv4Reg, s);\r\n}\r\n\r\nfunction isIPv6(s) {\r\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\r\n  // no longer creates a perf regression in the dns benchmark.\r\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\r\n  return RegExpPrototypeTest(IPv6Reg, s);\r\n}\r\n\r\nfunction isIP(s) {\r\n  if (isIPv4(s)) return 4;\r\n  if (isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\nfunction makeSyncWrite(fd) {\r\n  return function(chunk, enc, cb) {\r\n    if (enc !== 'buffer')\r\n      chunk = Buffer.from(chunk, enc);\r\n\r\n    this._handle.bytesWritten += chunk.length;\r\n\r\n    const ctx = {};\r\n    writeBuffer(fd, chunk, 0, chunk.length, null, undefined, ctx);\r\n    if (ctx.errno !== undefined) {\r\n      const ex = new UVException(ctx);\r\n      ex.errno = ctx.errno;\r\n      return cb(ex);\r\n    }\r\n    cb();\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  kReinitializeHandle: Symbol('kReinitializeHandle'),\r\n  isIP,\r\n  isIPv4,\r\n  isIPv6,\r\n  makeSyncWrite,\r\n  normalizedArgsSymbol: Symbol('normalizedArgs'),\r\n};\r\n"
  },
  "70": {
    "metadata": {
      "scriptId": "70",
      "url": "node:internal/bootstrap/switches/does_own_process_state",
      "startLine": 0,
      "startColumn": 0,
      "endLine": 146,
      "endColumn": 0,
      "executionContextId": 0,
      "hash": "ea43e66af69e1aab1abc5102305d841746e1f13b6bef5fa859139c9dd798d379",
      "isLiveEdit": false,
      "sourceMapURL": "",
      "hasSourceURL": false,
      "isModule": false,
      "length": 4031,
      "scriptLanguage": "JavaScript",
      "embedderName": "node:internal/bootstrap/switches/does_own_process_state"
    },
    "source": "'use strict';\r\n\r\nconst credentials = internalBinding('credentials');\r\nconst rawMethods = internalBinding('process_methods');\r\nconst {\r\n  namespace: {\r\n    addDeserializeCallback,\r\n    addSerializeCallback,\r\n    isBuildingSnapshot,\r\n  },\r\n} = require('internal/v8/startup_snapshot');\r\n\r\nprocess.abort = rawMethods.abort;\r\nprocess.umask = wrappedUmask;\r\nprocess.chdir = wrappedChdir;\r\nprocess.cwd = wrappedCwd;\r\n\r\nif (credentials.implementsPosixCredentials) {\r\n  const wrapped = wrapPosixCredentialSetters(credentials);\r\n\r\n  process.initgroups = wrapped.initgroups;\r\n  process.setgroups = wrapped.setgroups;\r\n  process.setegid = wrapped.setegid;\r\n  process.seteuid = wrapped.seteuid;\r\n  process.setgid = wrapped.setgid;\r\n  process.setuid = wrapped.setuid;\r\n}\r\n\r\n// ---- keep the attachment of the wrappers above so that it's easier to ----\r\n// ----              compare the setups side-by-side                    -----\r\n\r\nconst {\r\n  parseFileMode,\r\n  validateArray,\r\n  validateString,\r\n} = require('internal/validators');\r\n\r\nfunction wrapPosixCredentialSetters(credentials) {\r\n  const {\r\n    codes: {\r\n      ERR_INVALID_ARG_TYPE,\r\n      ERR_UNKNOWN_CREDENTIAL,\r\n    },\r\n  } = require('internal/errors');\r\n  const {\r\n    validateUint32,\r\n  } = require('internal/validators');\r\n\r\n  const {\r\n    initgroups: _initgroups,\r\n    setgroups: _setgroups,\r\n    setegid: _setegid,\r\n    seteuid: _seteuid,\r\n    setgid: _setgid,\r\n    setuid: _setuid,\r\n  } = credentials;\r\n\r\n  function initgroups(user, extraGroup) {\r\n    validateId(user, 'user');\r\n    validateId(extraGroup, 'extraGroup');\r\n    // Result is 0 on success, 1 if user is unknown, 2 if group is unknown.\r\n    const result = _initgroups(user, extraGroup);\r\n    if (result === 1) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('User', user);\r\n    } else if (result === 2) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', extraGroup);\r\n    }\r\n  }\r\n\r\n  function setgroups(groups) {\r\n    validateArray(groups, 'groups');\r\n    for (let i = 0; i < groups.length; i++) {\r\n      validateId(groups[i], `groups[${i}]`);\r\n    }\r\n    // Result is 0 on success. A positive integer indicates that the\r\n    // corresponding group was not found.\r\n    const result = _setgroups(groups);\r\n    if (result > 0) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', groups[result - 1]);\r\n    }\r\n  }\r\n\r\n  function wrapIdSetter(type, method) {\r\n    return function(id) {\r\n      validateId(id, 'id');\r\n      if (typeof id === 'number') id >>>= 0;\r\n      // Result is 0 on success, 1 if credential is unknown.\r\n      const result = method(id);\r\n      if (result === 1) {\r\n        throw new ERR_UNKNOWN_CREDENTIAL(type, id);\r\n      }\r\n    };\r\n  }\r\n\r\n  function validateId(id, name) {\r\n    if (typeof id === 'number') {\r\n      validateUint32(id, name);\r\n    } else if (typeof id !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, ['number', 'string'], id);\r\n    }\r\n  }\r\n\r\n  return {\r\n    initgroups,\r\n    setgroups,\r\n    setegid: wrapIdSetter('Group', _setegid),\r\n    seteuid: wrapIdSetter('User', _seteuid),\r\n    setgid: wrapIdSetter('Group', _setgid),\r\n    setuid: wrapIdSetter('User', _setuid),\r\n  };\r\n}\r\n\r\n// Cache the working directory to prevent lots of lookups. If the working\r\n// directory is changed by `chdir`, it'll be updated.\r\nlet cachedCwd = '';\r\n\r\nif (isBuildingSnapshot()) {\r\n  // Reset the cwd on both serialization and deserialization so it's fine\r\n  // for process.cwd() to be accessed inside of serialization callbacks.\r\n  addSerializeCallback(() => {\r\n    cachedCwd = '';\r\n    addDeserializeCallback(() => {\r\n      cachedCwd = '';\r\n    });\r\n  });\r\n}\r\n\r\nfunction wrappedChdir(directory) {\r\n  validateString(directory, 'directory');\r\n  rawMethods.chdir(directory);\r\n  // Mark cache that it requires an update.\r\n  cachedCwd = '';\r\n}\r\n\r\nfunction wrappedUmask(mask) {\r\n  if (mask !== undefined) {\r\n    mask = parseFileMode(mask, 'mask');\r\n  }\r\n  return rawMethods.umask(mask);\r\n}\r\n\r\nfunction wrappedCwd() {\r\n  if (cachedCwd === '')\r\n    cachedCwd = rawMethods.cwd();\r\n  return cachedCwd;\r\n}\r\n"
  }
}